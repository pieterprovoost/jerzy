// This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake

(function (modules) {
	'use strict';

	var resolve, getRequire, wmRequire, notFoundError, findFile
	  , extensions = {".js":[],".json":[],".css":[],".html":[]}
	  , envRequire = typeof require === 'function' ? require : null;

	notFoundError = function (path) {
		var error = new Error("Could not find module '" + path + "'");
		error.code = 'MODULE_NOT_FOUND';
		return error;
	};
	findFile = function (scope, name, extName) {
		var i, ext;
		if (typeof scope[name + extName] === 'function') return name + extName;
		for (i = 0; (ext = extensions[extName][i]); ++i) {
			if (typeof scope[name + ext] === 'function') return name + ext;
		}
		return null;
	};
	resolve = function (scope, tree, path, fullPath, state, id) {
		var name, dir, exports, module, fn, found, ext;
		path = path.split('/');
		name = path.pop();
		if ((name === '.') || (name === '..')) {
			path.push(name);
			name = '';
		}
		while ((dir = path.shift()) != null)  {
			if (!dir || (dir === '.')) continue;
			if (dir === '..') {
				scope = tree.pop();
				id = id.slice(0, id.lastIndexOf('/'));
			} else {
				tree.push(scope);
				scope = scope[dir];
				id += '/' + dir;
			}
			if (!scope) throw notFoundError(fullPath);
		}
		if (name && (typeof scope[name] !== 'function')) {
			found = findFile(scope, name, '.js');
			if (!found) found = findFile(scope, name, '.json');
			if (!found) found = findFile(scope, name, '.css');
			if (!found) found = findFile(scope, name, '.html');
			if (found) {
				name = found;
			} else if ((state !== 2) && (typeof scope[name] === 'object')) {
				tree.push(scope);
				scope = scope[name];
				id += '/' + name;
				name = '';
			}
		}
		if (!name) {
			if ((state !== 1) && scope[':mainpath:']) {
				return resolve(scope, tree, scope[':mainpath:'], fullPath, 1, id);
			}
			return resolve(scope, tree, 'index', fullPath, 2, id);
		}
		fn = scope[name];
		if (!fn) throw notFoundError(fullPath);
		if (fn.hasOwnProperty('module')) return fn.module.exports;
		exports = {};
		fn.module = module = { exports: exports, id: id + '/' + name };
		fn.call(exports, exports, module, getRequire(scope, tree, id));
		return module.exports;
	};
	wmRequire = function (scope, tree, fullPath, id) {
		var name, path = fullPath, t = fullPath.charAt(0), state = 0;
		if (t === '/') {
			path = path.slice(1);
			scope = modules['/'];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = '/';
			tree = [];
		} else if (t !== '.') {
			name = path.indexOf('@') === 0 ? path.split('/', 2).join("/") : path.split('/', 1)[0];
			scope = modules[name];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = name;
			tree = [];
			path = path.slice(name.length + 1);
			if (!path) {
				path = scope[':mainpath:'];
				if (path) {
					state = 1;
				} else {
					path = 'index';
					state = 2;
				}
			}
		}
		return resolve(scope, tree, path, fullPath, state, id);
	};
	getRequire = function (scope, tree, id) {
		var localRequire = function (path) {
			return wmRequire(scope, [].concat(tree), path, id);
		};
		if (envRequire) localRequire.fromParentEnvironment = envRequire;
		return localRequire
	};
	return getRequire(modules, [], '');
})
({
	"@stdlib/array-base-filled": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2021 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Create a filled "generic" array.
				*
				* @module @stdlib/array-base-filled
				*
				* @example
				* var filled = require( '@stdlib/array-base-filled' );
				*
				* var out = filled( 0.0, 3 );
				* // returns [ 0.0, 0.0, 0.0 ]
				*
				* @example
				* var filled = require( '@stdlib/array-base-filled' );
				*
				* var out = filled( 'beep', 3 );
				* // returns [ 'beep', 'beep', 'beep' ]
				*/

				// MODULES //

				var main = require( './main.js' );


				// EXPORTS //

				module.exports = main;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2021 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MAIN //

				/**
				* Returns a filled "generic" array.
				*
				* @param {*} value - fill value
				* @param {NonNegativeInteger} len - array length
				* @returns {Array} filled array
				*
				* @example
				* var out = filled( 0.0, 3 );
				* // returns [ 0.0, 0.0, 0.0 ]
				*
				* @example
				* var out = filled( 'beep', 3 );
				* // returns [ 'beep', 'beep', 'beep' ]
				*/
				function filled( value, len ) {
					var arr;
					var i;

					// Manually push elements in order to ensure "fast" elements...
					arr = [];
					for ( i = 0; i < len; i++ ) {
						arr.push( value );
					}
					return arr;
				}


				// EXPORTS //

				module.exports = filled;
			}
		}
	},
	"@stdlib/array-base-zeros": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2021 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Create a zero-filled "generic" array.
				*
				* @module @stdlib/array-base-zeros
				*
				* @example
				* var zeros = require( '@stdlib/array-base-zeros' );
				*
				* var out = zeros( 3 );
				* // returns [ 0.0, 0.0, 0.0 ]
				*/

				// MODULES //

				var main = require( './main.js' );


				// EXPORTS //

				module.exports = main;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2021 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var filled = require( '@stdlib/array-base-filled' );


				// MAIN //

				/**
				* Returns a zero-filled "generic" array.
				*
				* @param {NonNegativeInteger} len - array length
				* @returns {Array} output array
				*
				* @example
				* var out = zeros( 3 );
				* // returns [ 0.0, 0.0, 0.0 ]
				*/
				function zeros( len ) {
					return filled( 0.0, len );
				}


				// EXPORTS //

				module.exports = zeros;
			}
		}
	},
	"@stdlib/array-float64": {
		":mainpath:": "./lib",
		"lib": {
			"float64array.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MAIN //

				var ctor = ( typeof Float64Array === 'function' ) ? Float64Array : void 0; // eslint-disable-line stdlib/require-globals


				// EXPORTS //

				module.exports = ctor;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Typed array constructor which returns a typed array representing an array of double-precision floating-point numbers in the platform byte order.
				*
				* @module @stdlib/array-float64
				*
				* @example
				* var ctor = require( '@stdlib/array-float64' );
				*
				* var arr = new ctor( 10 );
				* // returns <Float64Array>
				*/

				// MODULES //

				var hasFloat64ArraySupport = require( '@stdlib/assert-has-float64array-support' );
				var builtin = require( './float64array.js' );
				var polyfill = require( './polyfill.js' );


				// MAIN //

				var ctor;
				if ( hasFloat64ArraySupport() ) {
					ctor = builtin;
				} else {
					ctor = polyfill;
				}


				// EXPORTS //

				module.exports = ctor;
			},
			"polyfill.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// TODO: write polyfill

				// MAIN //

				/**
				* Typed array which represents an array of double-precision floating-point numbers in the platform byte order.
				*
				* @throws {Error} not implemented
				*/
				function polyfill() {
					throw new Error( 'not implemented' );
				}


				// EXPORTS //

				module.exports = polyfill;
			}
		}
	},
	"@stdlib/array-uint16": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Typed array constructor which returns a typed array representing an array of 16-bit unsigned integers in the platform byte order.
				*
				* @module @stdlib/array-uint16
				*
				* @example
				* var ctor = require( '@stdlib/array-uint16' );
				*
				* var arr = new ctor( 10 );
				* // returns <Uint16Array>
				*/

				// MODULES //

				var hasUint16ArraySupport = require( '@stdlib/assert-has-uint16array-support' );
				var builtin = require( './uint16array.js' );
				var polyfill = require( './polyfill.js' );


				// MAIN //

				var ctor;
				if ( hasUint16ArraySupport() ) {
					ctor = builtin;
				} else {
					ctor = polyfill;
				}


				// EXPORTS //

				module.exports = ctor;
			},
			"polyfill.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// TODO: write polyfill

				// MAIN //

				/**
				* Typed array which represents an array of 16-bit unsigned integers in the platform byte order.
				*
				* @throws {Error} not implemented
				*/
				function polyfill() {
					throw new Error( 'not implemented' );
				}


				// EXPORTS //

				module.exports = polyfill;
			},
			"uint16array.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MAIN //

				var ctor = ( typeof Uint16Array === 'function' ) ? Uint16Array : void 0; // eslint-disable-line stdlib/require-globals


				// EXPORTS //

				module.exports = ctor;
			}
		}
	},
	"@stdlib/array-uint32": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Typed array constructor which returns a typed array representing an array of 32-bit unsigned integers in the platform byte order.
				*
				* @module @stdlib/array-uint32
				*
				* @example
				* var ctor = require( '@stdlib/array-uint32' );
				*
				* var arr = new ctor( 10 );
				* // returns <Uint32Array>
				*/

				// MODULES //

				var hasUint32ArraySupport = require( '@stdlib/assert-has-uint32array-support' );
				var builtin = require( './uint32array.js' );
				var polyfill = require( './polyfill.js' );


				// MAIN //

				var ctor;
				if ( hasUint32ArraySupport() ) {
					ctor = builtin;
				} else {
					ctor = polyfill;
				}


				// EXPORTS //

				module.exports = ctor;
			},
			"polyfill.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// TODO: write polyfill

				// MAIN //

				/**
				* Typed array which represents an array of 32-bit unsigned integers in the platform byte order.
				*
				* @throws {Error} not implemented
				*/
				function polyfill() {
					throw new Error( 'not implemented' );
				}


				// EXPORTS //

				module.exports = polyfill;
			},
			"uint32array.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MAIN //

				var ctor = ( typeof Uint32Array === 'function' ) ? Uint32Array : void 0; // eslint-disable-line stdlib/require-globals


				// EXPORTS //

				module.exports = ctor;
			}
		}
	},
	"@stdlib/array-uint8": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Typed array constructor which returns a typed array representing an array of 8-bit unsigned integers in the platform byte order.
				*
				* @module @stdlib/array-uint8
				*
				* @example
				* var ctor = require( '@stdlib/array-uint8' );
				*
				* var arr = new ctor( 10 );
				* // returns <Uint8Array>
				*/

				// MODULES //

				var hasUint8ArraySupport = require( '@stdlib/assert-has-uint8array-support' );
				var builtin = require( './uint8array.js' );
				var polyfill = require( './polyfill.js' );


				// MAIN //

				var ctor;
				if ( hasUint8ArraySupport() ) {
					ctor = builtin;
				} else {
					ctor = polyfill;
				}


				// EXPORTS //

				module.exports = ctor;
			},
			"polyfill.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// TODO: write polyfill

				// MAIN //

				/**
				* Typed array which represents an array of 8-bit unsigned integers in the platform byte order.
				*
				* @throws {Error} not implemented
				*/
				function polyfill() {
					throw new Error( 'not implemented' );
				}


				// EXPORTS //

				module.exports = polyfill;
			},
			"uint8array.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MAIN //

				var ctor = ( typeof Uint8Array === 'function' ) ? Uint8Array : void 0; // eslint-disable-line stdlib/require-globals


				// EXPORTS //

				module.exports = ctor;
			}
		}
	},
	"@stdlib/assert-has-float64array-support": {
		":mainpath:": "./lib",
		"lib": {
			"float64array.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MAIN //

				var main = ( typeof Float64Array === 'function' ) ? Float64Array : null; // eslint-disable-line stdlib/require-globals


				// EXPORTS //

				module.exports = main;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Test for native `Float64Array` support.
				*
				* @module @stdlib/assert-has-float64array-support
				*
				* @example
				* var hasFloat64ArraySupport = require( '@stdlib/assert-has-float64array-support' );
				*
				* var bool = hasFloat64ArraySupport();
				* // returns <boolean>
				*/

				// MODULES //

				var hasFloat64ArraySupport = require( './main.js' );


				// EXPORTS //

				module.exports = hasFloat64ArraySupport;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var isFloat64Array = require( '@stdlib/assert-is-float64array' );
				var GlobalFloat64Array = require( './float64array.js' );


				// MAIN //

				/**
				* Tests for native `Float64Array` support.
				*
				* @returns {boolean} boolean indicating if an environment has `Float64Array` support
				*
				* @example
				* var bool = hasFloat64ArraySupport();
				* // returns <boolean>
				*/
				function hasFloat64ArraySupport() {
					var bool;
					var arr;

					if ( typeof GlobalFloat64Array !== 'function' ) {
						return false;
					}
					// Test basic support...
					try {
						arr = new GlobalFloat64Array( [ 1.0, 3.14, -3.14, NaN ] );
						bool = (
							isFloat64Array( arr ) &&
							arr[ 0 ] === 1.0 &&
							arr[ 1 ] === 3.14 &&
							arr[ 2 ] === -3.14 &&
							arr[ 3 ] !== arr[ 3 ]
						);
					} catch ( err ) { // eslint-disable-line no-unused-vars
						bool = false;
					}
					return bool;
				}


				// EXPORTS //

				module.exports = hasFloat64ArraySupport;
			}
		}
	},
	"@stdlib/assert-has-generator-support": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Test for native `function*()` support.
				*
				* @module @stdlib/assert-has-generator-support
				*
				* @example
				* var hasGeneratorSupport = require( '@stdlib/assert-has-generator-support' );
				*
				* var bool = hasGeneratorSupport();
				* // returns <boolean>
				*/

				// MODULES //

				var hasGeneratorSupport = require( './main.js' );


				// EXPORTS //

				module.exports = hasGeneratorSupport;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var evil = require( '@stdlib/utils-eval' );


				// MAIN //

				/**
				* Tests for native `function*()` support.
				*
				* @returns {boolean} boolean indicating if an environment has native `function*()` support
				*
				* @example
				* var bool = hasGeneratorSupport();
				* // returns <boolean>
				*/
				function hasGeneratorSupport() {
					var bool;
					try {
						evil( '"use strict"; (function* () {})' );
						bool = true;
					} catch ( err ) { // eslint-disable-line no-unused-vars
						bool = false;
					}
					return bool;
				}


				// EXPORTS //

				module.exports = hasGeneratorSupport;
			}
		}
	},
	"@stdlib/assert-has-own-property": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Test whether an object has a specified property.
				*
				* @module @stdlib/assert-has-own-property
				*
				* @example
				* var hasOwnProp = require( '@stdlib/assert-has-own-property' );
				*
				* var beep = {
				*     'boop': true
				* };
				*
				* var bool = hasOwnProp( beep, 'boop' );
				* // returns true
				*
				* bool = hasOwnProp( beep, 'bop' );
				* // returns false
				*/

				// MODULES //

				var hasOwnProp = require( './main.js' );


				// EXPORTS //

				module.exports = hasOwnProp;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// FUNCTIONS //

				var has = Object.prototype.hasOwnProperty;


				// MAIN //

				/**
				* Tests if an object has a specified property.
				*
				* @param {*} value - value to test
				* @param {*} property - property to test
				* @returns {boolean} boolean indicating if an object has a specified property
				*
				* @example
				* var beep = {
				*     'boop': true
				* };
				*
				* var bool = hasOwnProp( beep, 'boop' );
				* // returns true
				*
				* @example
				* var beep = {
				*     'boop': true
				* };
				*
				* var bool = hasOwnProp( beep, 'bap' );
				* // returns false
				*/
				function hasOwnProp( value, property ) {
					if (
						value === void 0 ||
						value === null
					) {
						return false;
					}
					return has.call( value, property );
				}


				// EXPORTS //

				module.exports = hasOwnProp;
			}
		}
	},
	"@stdlib/assert-has-symbol-support": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Test for native `Symbol` support.
				*
				* @module @stdlib/assert-has-symbol-support
				*
				* @example
				* var hasSymbolSupport = require( '@stdlib/assert-has-symbol-support' );
				*
				* var bool = hasSymbolSupport();
				* // returns <boolean>
				*/

				// MODULES //

				var hasSymbolSupport = require( './main.js' );


				// EXPORTS //

				module.exports = hasSymbolSupport;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MAIN //

				/**
				* Tests for native `Symbol` support.
				*
				* @returns {boolean} boolean indicating if an environment has `Symbol` support
				*
				* @example
				* var bool = hasSymbolSupport();
				* // returns <boolean>
				*/
				function hasSymbolSupport() {
					return (
						typeof Symbol === 'function' &&
						typeof Symbol( 'foo' ) === 'symbol'
					);
				}


				// EXPORTS //

				module.exports = hasSymbolSupport;
			}
		}
	},
	"@stdlib/assert-has-tostringtag-support": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Test for native `toStringTag` support.
				*
				* @module @stdlib/assert-has-tostringtag-support
				*
				* @example
				* var hasToStringTagSupport = require( '@stdlib/assert-has-tostringtag-support' );
				*
				* var bool = hasToStringTagSupport();
				* // returns <boolean>
				*/

				// MODULES //

				var hasToStringTagSupport = require( './main.js' );


				// EXPORTS //

				module.exports = hasToStringTagSupport;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var hasSymbols = require( '@stdlib/assert-has-symbol-support' );


				// VARIABLES //

				var FLG = hasSymbols();


				// MAIN //

				/**
				* Tests for native `toStringTag` support.
				*
				* @returns {boolean} boolean indicating if an environment has `toStringTag` support
				*
				* @example
				* var bool = hasToStringTagSupport();
				* // returns <boolean>
				*/
				function hasToStringTagSupport() {
					return ( FLG && typeof Symbol.toStringTag === 'symbol' );
				}


				// EXPORTS //

				module.exports = hasToStringTagSupport;
			}
		}
	},
	"@stdlib/assert-has-uint16array-support": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Test for native `Uint16Array` support.
				*
				* @module @stdlib/assert-has-uint16array-support
				*
				* @example
				* var hasUint16ArraySupport = require( '@stdlib/assert-has-uint16array-support' );
				*
				* var bool = hasUint16ArraySupport();
				* // returns <boolean>
				*/

				// MODULES //

				var hasUint16ArraySupport = require( './main.js' );


				// EXPORTS //

				module.exports = hasUint16ArraySupport;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var isUint16Array = require( '@stdlib/assert-is-uint16array' );
				var UINT16_MAX = require( '@stdlib/constants-uint16-max' );
				var GlobalUint16Array = require( './uint16array.js' );


				// MAIN //

				/**
				* Tests for native `Uint16Array` support.
				*
				* @returns {boolean} boolean indicating if an environment has `Uint16Array` support
				*
				* @example
				* var bool = hasUint16ArraySupport();
				* // returns <boolean>
				*/
				function hasUint16ArraySupport() {
					var bool;
					var arr;

					if ( typeof GlobalUint16Array !== 'function' ) {
						return false;
					}
					// Test basic support...
					try {
						arr = [ 1, 3.14, -3.14, UINT16_MAX+1, UINT16_MAX+2 ];
						arr = new GlobalUint16Array( arr );
						bool = (
							isUint16Array( arr ) &&
							arr[ 0 ] === 1 &&
							arr[ 1 ] === 3 &&            // truncation
							arr[ 2 ] === UINT16_MAX-2 && // truncation and wrap around
							arr[ 3 ] === 0 &&            // wrap around
							arr[ 4 ] === 1               // wrap around
						);
					} catch ( err ) { // eslint-disable-line no-unused-vars
						bool = false;
					}
					return bool;
				}


				// EXPORTS //

				module.exports = hasUint16ArraySupport;
			},
			"uint16array.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MAIN //

				var main = ( typeof Uint16Array === 'function' ) ? Uint16Array : null; // eslint-disable-line stdlib/require-globals


				// EXPORTS //

				module.exports = main;
			}
		}
	},
	"@stdlib/assert-has-uint32array-support": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Test for native `Uint32Array` support.
				*
				* @module @stdlib/assert-has-uint32array-support
				*
				* @example
				* var hasUint32ArraySupport = require( '@stdlib/assert-has-uint32array-support' );
				*
				* var bool = hasUint32ArraySupport();
				* // returns <boolean>
				*/

				// MODULES //

				var hasUint32ArraySupport = require( './main.js' );


				// EXPORTS //

				module.exports = hasUint32ArraySupport;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var isUint32Array = require( '@stdlib/assert-is-uint32array' );
				var UINT32_MAX = require( '@stdlib/constants-uint32-max' );
				var GlobalUint32Array = require( './uint32array.js' );


				// MAIN //

				/**
				* Tests for native `Uint32Array` support.
				*
				* @returns {boolean} boolean indicating if an environment has `Uint32Array` support
				*
				* @example
				* var bool = hasUint32ArraySupport();
				* // returns <boolean>
				*/
				function hasUint32ArraySupport() {
					var bool;
					var arr;

					if ( typeof GlobalUint32Array !== 'function' ) {
						return false;
					}
					// Test basic support...
					try {
						arr = [ 1, 3.14, -3.14, UINT32_MAX+1, UINT32_MAX+2 ];
						arr = new GlobalUint32Array( arr );
						bool = (
							isUint32Array( arr ) &&
							arr[ 0 ] === 1 &&
							arr[ 1 ] === 3 &&            // truncation
							arr[ 2 ] === UINT32_MAX-2 && // truncation and wrap around
							arr[ 3 ] === 0 &&            // wrap around
							arr[ 4 ] === 1               // wrap around
						);
					} catch ( err ) { // eslint-disable-line no-unused-vars
						bool = false;
					}
					return bool;
				}


				// EXPORTS //

				module.exports = hasUint32ArraySupport;
			},
			"uint32array.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MAIN //

				var main = ( typeof Uint32Array === 'function' ) ? Uint32Array : null; // eslint-disable-line stdlib/require-globals


				// EXPORTS //

				module.exports = main;
			}
		}
	},
	"@stdlib/assert-has-uint8array-support": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Test for native `Uint8Array` support.
				*
				* @module @stdlib/assert-has-uint8array-support
				*
				* @example
				* var hasUint8ArraySupport = require( '@stdlib/assert-has-uint8array-support' );
				*
				* var bool = hasUint8ArraySupport();
				* // returns <boolean>
				*/

				// MODULES //

				var hasUint8ArraySupport = require( './main.js' );


				// EXPORTS //

				module.exports = hasUint8ArraySupport;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var isUint8Array = require( '@stdlib/assert-is-uint8array' );
				var UINT8_MAX = require( '@stdlib/constants-uint8-max' );
				var GlobalUint8Array = require( './uint8array.js' );


				// MAIN //

				/**
				* Tests for native `Uint8Array` support.
				*
				* @returns {boolean} boolean indicating if an environment has `Uint8Array` support
				*
				* @example
				* var bool = hasUint8ArraySupport();
				* // returns <boolean>
				*/
				function hasUint8ArraySupport() {
					var bool;
					var arr;

					if ( typeof GlobalUint8Array !== 'function' ) {
						return false;
					}
					// Test basic support...
					try {
						arr = [ 1, 3.14, -3.14, UINT8_MAX+1, UINT8_MAX+2 ];
						arr = new GlobalUint8Array( arr );
						bool = (
							isUint8Array( arr ) &&
							arr[ 0 ] === 1 &&
							arr[ 1 ] === 3 &&           // truncation
							arr[ 2 ] === UINT8_MAX-2 && // truncation and wrap around
							arr[ 3 ] === 0 &&           // wrap around
							arr[ 4 ] === 1              // wrap around
						);
					} catch ( err ) { // eslint-disable-line no-unused-vars
						bool = false;
					}
					return bool;
				}


				// EXPORTS //

				module.exports = hasUint8ArraySupport;
			},
			"uint8array.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MAIN //

				var main = ( typeof Uint8Array === 'function' ) ? Uint8Array : null; // eslint-disable-line stdlib/require-globals


				// EXPORTS //

				module.exports = main;
			}
		}
	},
	"@stdlib/assert-is-float64array": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Test if a value is a Float64Array.
				*
				* @module @stdlib/assert-is-float64array
				*
				* @example
				* var isFloat64Array = require( '@stdlib/assert-is-float64array' );
				*
				* var bool = isFloat64Array( new Float64Array( 10 ) );
				* // returns true
				*
				* bool = isFloat64Array( [] );
				* // returns false
				*/

				// MODULES //

				var isFloat64Array = require( './main.js' );


				// EXPORTS //

				module.exports = isFloat64Array;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var nativeClass = require( '@stdlib/utils-native-class' );


				// VARIABLES //

				var hasFloat64Array = ( typeof Float64Array === 'function' ); // eslint-disable-line stdlib/require-globals


				// MAIN //

				/**
				* Tests if a value is a Float64Array.
				*
				* @param {*} value - value to test
				* @returns {boolean} boolean indicating whether value is a Float64Array
				*
				* @example
				* var bool = isFloat64Array( new Float64Array( 10 ) );
				* // returns true
				*
				* @example
				* var bool = isFloat64Array( [] );
				* // returns false
				*/
				function isFloat64Array( value ) {
					return (
						( hasFloat64Array && value instanceof Float64Array ) || // eslint-disable-line stdlib/require-globals
						nativeClass( value ) === '[object Float64Array]'
					);
				}


				// EXPORTS //

				module.exports = isFloat64Array;
			}
		}
	},
	"@stdlib/assert-is-little-endian": {
		":mainpath:": "./lib",
		"lib": {
			"ctors.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var Uint8Array = require( '@stdlib/array-uint8' );
				var Uint16Array = require( '@stdlib/array-uint16' );


				// MAIN //

				var ctors = {
					'uint16': Uint16Array,
					'uint8': Uint8Array
				};


				// EXPORTS //

				module.exports = ctors;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Return a boolean indicating if an environment is little endian.
				*
				* @module @stdlib/assert-is-little-endian
				*
				* @example
				* var IS_LITTLE_ENDIAN = require( '@stdlib/assert-is-little-endian' );
				*
				* var bool = IS_LITTLE_ENDIAN;
				* // returns <boolean>
				*/

				// MODULES //

				var IS_LITTLE_ENDIAN = require( './main.js' );


				// EXPORTS //

				module.exports = IS_LITTLE_ENDIAN;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var ctors = require( './ctors.js' );


				// VARIABLES //

				var bool;


				// FUNCTIONS //

				/**
				* Returns a boolean indicating if an environment is little endian.
				*
				* @private
				* @returns {boolean} boolean indicating if an environment is little endian
				*
				* @example
				* var bool = isLittleEndian();
				* // returns <boolean>
				*/
				function isLittleEndian() {
					var uint16view;
					var uint8view;

					uint16view = new ctors[ 'uint16' ]( 1 );

					/*
					* Set the uint16 view to a value having distinguishable lower and higher order words.
					*
					* 4660 => 0x1234 => 0x12 0x34 => '00010010 00110100' => (0x12,0x34) == (18,52)
					*/
					uint16view[ 0 ] = 0x1234;

					// Create a uint8 view on top of the uint16 buffer:
					uint8view = new ctors[ 'uint8' ]( uint16view.buffer );

					// If little endian, the least significant byte will be first...
					return ( uint8view[ 0 ] === 0x34 );
				}


				// MAIN //

				bool = isLittleEndian();


				// EXPORTS //

				module.exports = bool;
			}
		}
	},
	"@stdlib/assert-is-uint16array": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Test if a value is a Uint16Array.
				*
				* @module @stdlib/assert-is-uint16array
				*
				* @example
				* var isUint16Array = require( '@stdlib/assert-is-uint16array' );
				*
				* var bool = isUint16Array( new Uint16Array( 10 ) );
				* // returns true
				*
				* bool = isUint16Array( [] );
				* // returns false
				*/

				// MODULES //

				var isUint16Array = require( './main.js' );


				// EXPORTS //

				module.exports = isUint16Array;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var nativeClass = require( '@stdlib/utils-native-class' );


				// VARIABLES //

				var hasUint16Array = ( typeof Uint16Array === 'function' ); // eslint-disable-line stdlib/require-globals


				// MAIN //

				/**
				* Tests if a value is a Uint16Array.
				*
				* @param {*} value - value to test
				* @returns {boolean} boolean indicating whether value is a Uint16Array
				*
				* @example
				* var bool = isUint16Array( new Uint16Array( 10 ) );
				* // returns true
				*
				* @example
				* var bool = isUint16Array( [] );
				* // returns false
				*/
				function isUint16Array( value ) {
					return (
						( hasUint16Array && value instanceof Uint16Array ) || // eslint-disable-line stdlib/require-globals
						nativeClass( value ) === '[object Uint16Array]'
					);
				}


				// EXPORTS //

				module.exports = isUint16Array;
			}
		}
	},
	"@stdlib/assert-is-uint32array": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Test if a value is a Uint32Array.
				*
				* @module @stdlib/assert-is-uint32array
				*
				* @example
				* var isUint32Array = require( '@stdlib/assert-is-uint32array' );
				*
				* var bool = isUint32Array( new Uint32Array( 10 ) );
				* // returns true
				*
				* bool = isUint32Array( [] );
				* // returns false
				*/

				// MODULES //

				var isUint32Array = require( './main.js' );


				// EXPORTS //

				module.exports = isUint32Array;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var nativeClass = require( '@stdlib/utils-native-class' );


				// VARIABLES //

				var hasUint32Array = ( typeof Uint32Array === 'function' ); // eslint-disable-line stdlib/require-globals


				// MAIN //

				/**
				* Tests if a value is a Uint32Array.
				*
				* @param {*} value - value to test
				* @returns {boolean} boolean indicating whether value is a Uint32Array
				*
				* @example
				* var bool = isUint32Array( new Uint32Array( 10 ) );
				* // returns true
				*
				* @example
				* var bool = isUint32Array( [] );
				* // returns false
				*/
				function isUint32Array( value ) {
					return (
						( hasUint32Array && value instanceof Uint32Array ) || // eslint-disable-line stdlib/require-globals
						nativeClass( value ) === '[object Uint32Array]'
					);
				}


				// EXPORTS //

				module.exports = isUint32Array;
			}
		}
	},
	"@stdlib/assert-is-uint8array": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Test if a value is a Uint8Array.
				*
				* @module @stdlib/assert-is-uint8array
				*
				* @example
				* var isUint8Array = require( '@stdlib/assert-is-uint8array' );
				*
				* var bool = isUint8Array( new Uint8Array( 10 ) );
				* // returns true
				*
				* bool = isUint8Array( [] );
				* // returns false
				*/

				// MODULES //

				var isUint8Array = require( './main.js' );


				// EXPORTS //

				module.exports = isUint8Array;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var nativeClass = require( '@stdlib/utils-native-class' );


				// VARIABLES //

				var hasUint8Array = ( typeof Uint8Array === 'function' ); // eslint-disable-line stdlib/require-globals


				// MAIN //

				/**
				* Tests if a value is a Uint8Array.
				*
				* @param {*} value - value to test
				* @returns {boolean} boolean indicating whether value is a Uint8Array
				*
				* @example
				* var bool = isUint8Array( new Uint8Array( 10 ) );
				* // returns true
				*
				* @example
				* var bool = isUint8Array( [] );
				* // returns false
				*/
				function isUint8Array( value ) {
					return (
						( hasUint8Array && value instanceof Uint8Array ) || // eslint-disable-line stdlib/require-globals
						nativeClass( value ) === '[object Uint8Array]'
					);
				}


				// EXPORTS //

				module.exports = isUint8Array;
			}
		}
	},
	"@stdlib/constants-float32-smallest-normal": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Smallest positive single-precision floating-point normal number.
				*
				* @module @stdlib/constants-float32-smallest-normal
				* @type {number}
				*
				* @example
				* var FLOAT32_SMALLEST_NORMAL = require( '@stdlib/constants-float32-smallest-normal' );
				* // returns 1.1754943508222875e-38
				*/


				// MAIN //

				/**
				* The smallest positive single-precision floating-point normal number.
				*
				* ## Notes
				*
				* The number has the value
				*
				* ```tex
				* \frac{1}{2^{127-1}}
				* ```
				*
				* which corresponds to the bit sequence
				*
				* ```binarystring
				* 0 00000001 00000000000000000000000
				* ```
				*
				* @constant
				* @type {number}
				* @default 1.1754943508222875e-38
				* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
				*/
				var FLOAT32_SMALLEST_NORMAL = 1.1754943508222875e-38;


				// EXPORTS //

				module.exports = FLOAT32_SMALLEST_NORMAL;
			}
		}
	},
	"@stdlib/constants-float64-e": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Euler's number.
				*
				* @module @stdlib/constants-float64-e
				* @type {number}
				*
				* @example
				* var E = require( '@stdlib/constants-float64-e' );
				* // returns 2.718281828459045
				*/


				// MAIN //

				/**
				* Euler's number.
				*
				* @constant
				* @type {number}
				* @default 2.718281828459045
				* @see [OEIS]{@link https://oeis.org/A001113}
				* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/E_(mathematical_constant)}
				*/
				var E = 2.718281828459045235360287471352662497757247093699959574966;


				// EXPORTS //

				module.exports = E;
			}
		}
	},
	"@stdlib/constants-float64-eps": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
				*
				* @module @stdlib/constants-float64-eps
				* @type {number}
				*
				* @example
				* var FLOAT64_EPSILON = require( '@stdlib/constants-float64-eps' );
				* // returns 2.220446049250313e-16
				*/


				// MAIN //

				/**
				* Difference between one and the smallest value greater than one that can be represented as a double-precision floating-point number.
				*
				* ## Notes
				*
				* The difference is
				*
				* ```tex
				* \frac{1}{2^{52}}
				* ```
				*
				* @constant
				* @type {number}
				* @default 2.220446049250313e-16
				* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
				* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
				*/
				var FLOAT64_EPSILON = 2.2204460492503130808472633361816E-16;


				// EXPORTS //

				module.exports = FLOAT64_EPSILON;
			}
		}
	},
	"@stdlib/constants-float64-eulergamma": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* The Euler-Mascheroni constant.
				*
				* @module @stdlib/constants-float64-eulergamma
				* @type {number}
				*
				* @example
				* var GAMMA = require( '@stdlib/constants-float64-eulergamma' );
				* // returns 0.5772156649015329
				*/


				// MAIN //

				/**
				* The Euler-Mascheroni constant.
				*
				* @constant
				* @type {number}
				* @default 0.5772156649015329
				* @see [OEIS]{@link http://oeis.org/A001620}
				* @see [Mathworld]{@link http://mathworld.wolfram.com/Euler-MascheroniConstant.html}
				*/
				var GAMMA = 0.577215664901532860606512090082402431042;


				// EXPORTS //

				module.exports = GAMMA;
			}
		}
	},
	"@stdlib/constants-float64-exponent-bias": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* The bias of a double-precision floating-point number's exponent.
				*
				* @module @stdlib/constants-float64-exponent-bias
				* @type {integer32}
				*
				* @example
				* var FLOAT64_EXPONENT_BIAS = require( '@stdlib/constants-float64-exponent-bias' );
				* // returns 1023
				*/


				// MAIN //

				/**
				* Bias of a double-precision floating-point number's exponent.
				*
				* ## Notes
				*
				* The bias can be computed via
				*
				* ```tex
				* \mathrm{bias} = 2^{k-1} - 1
				* ```
				*
				* where \\(k\\) is the number of bits in the exponent; here, \\(k = 11\\).
				*
				* @constant
				* @type {integer32}
				* @default 1023
				* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
				*/
				var FLOAT64_EXPONENT_BIAS = 1023|0; // asm type annotation


				// EXPORTS //

				module.exports = FLOAT64_EXPONENT_BIAS;
			}
		}
	},
	"@stdlib/constants-float64-fourth-pi": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* One fourth times the mathematical constant `π`.
				*
				* @module @stdlib/constants-float64-fourth-pi
				* @type {number}
				*
				* @example
				* var FOURTH_PI = require( '@stdlib/constants-float64-fourth-pi' );
				* // returns 7.85398163397448309616e-1
				*/


				// MAIN //

				/**
				* One fourth times the mathematical constant `π`.
				*
				* @constant
				* @type {number}
				* @default 7.85398163397448309616e-1
				* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
				*/
				var FOURTH_PI = 7.85398163397448309616e-1;


				// EXPORTS //

				module.exports = FOURTH_PI;
			}
		}
	},
	"@stdlib/constants-float64-gamma-lanczos-g": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Arbitrary constant `g` to be used in Lanczos approximation functions.
				*
				* @module @stdlib/constants-float64-gamma-lanczos-g
				* @type {number}
				*
				* @example
				* var FLOAT64_GAMMA_LANCZOS_G = require( '@stdlib/constants-float64-gamma-lanczos-g' );
				* // returns 10.900511
				*/


				// MAIN //

				/**
				* Arbitrary constant `g` to be used in Lanczos approximation functions.
				*
				* @constant
				* @type {number}
				* @default 10.900511
				* @see [Lanczos Approximation]{@link https://en.wikipedia.org/wiki/Lanczos_approximation}
				*/
				var FLOAT64_GAMMA_LANCZOS_G = 10.90051099999999983936049829935654997826;


				// EXPORTS //

				module.exports = FLOAT64_GAMMA_LANCZOS_G;
			}
		}
	},
	"@stdlib/constants-float64-half-ln-two": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* One half times the natural logarithm of 2.
				*
				* @module @stdlib/constants-float64-half-ln-two
				* @type {number}
				*
				* @example
				* var HALF_LN2 = require( '@stdlib/constants-float64-half-ln-two' );
				* // returns 3.46573590279972654709e-01
				*/

				// MAIN //

				/**
				* One half times the natural logarithm of 2.
				*
				* ```tex
				* \frac{\ln 2}{2}
				* ```
				*
				* @constant
				* @type {number}
				* @default 3.46573590279972654709e-01
				*/
				var HALF_LN2 = 3.46573590279972654709e-01; // 0x3FD62E42 0xFEFA39EF


				// EXPORTS //

				module.exports = HALF_LN2;
			}
		}
	},
	"@stdlib/constants-float64-half-pi": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* One half times the mathematical constant `π`.
				*
				* @module @stdlib/constants-float64-half-pi
				* @type {number}
				*
				* @example
				* var HALF_PI = require( '@stdlib/constants-float64-half-pi' );
				* // returns 1.5707963267948966
				*/


				// MAIN //

				/**
				* One half times the mathematical constant `π`.
				*
				* @constant
				* @type {number}
				* @default 1.5707963267948966
				* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
				*/
				var HALF_PI = 1.5707963267948966;


				// EXPORTS //

				module.exports = HALF_PI;
			}
		}
	},
	"@stdlib/constants-float64-high-word-exponent-mask": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* High word mask for the exponent of a double-precision floating-point number.
				*
				* @module @stdlib/constants-float64-high-word-exponent-mask
				* @type {uinteger32}
				*
				* @example
				* var FLOAT64_HIGH_WORD_EXPONENT_MASK = require( '@stdlib/constants-float64-high-word-exponent-mask' );
				* // returns 2146435072
				*/


				// MAIN //

				/**
				* High word mask for the exponent of a double-precision floating-point number.
				*
				* ## Notes
				*
				* The high word mask for the exponent of a double-precision floating-point number is an unsigned 32-bit integer with the value \\( 2146435072 \\), which corresponds to the bit sequence
				*
				* ```binarystring
				* 0 11111111111 00000000000000000000
				* ```
				*
				* @constant
				* @type {uinteger32}
				* @default 0x7ff00000
				* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
				*/
				var FLOAT64_HIGH_WORD_EXPONENT_MASK = 0x7ff00000;


				// EXPORTS //

				module.exports = FLOAT64_HIGH_WORD_EXPONENT_MASK;
			}
		}
	},
	"@stdlib/constants-float64-ln-two": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Natural logarithm of `2`.
				*
				* @module @stdlib/constants-float64-ln-two
				* @type {number}
				*
				* @example
				* var LN2 = require( '@stdlib/constants-float64-ln-two' );
				* // returns 0.6931471805599453
				*/


				// MAIN //

				/**
				* Natural logarithm of `2`.
				*
				* ```tex
				* \ln 2
				* ```
				*
				* @constant
				* @type {number}
				* @default 0.6931471805599453
				*/
				var LN2 = 6.93147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687542001481021e-01; // eslint-disable-line max-len


				// EXPORTS //

				module.exports = LN2;
			}
		}
	},
	"@stdlib/constants-float64-max": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Maximum double-precision floating-point number.
				*
				* @module @stdlib/constants-float64-max
				* @type {number}
				*
				* @example
				* var FLOAT64_MAX = require( '@stdlib/constants-float64-max' );
				* // returns 1.7976931348623157e+308
				*/


				// MAIN //

				/**
				* Maximum double-precision floating-point number.
				*
				* ## Notes
				*
				* The maximum is given by
				*
				* ```tex
				* 2^{1023} (2 - 2^{-52})
				* ```
				*
				* @constant
				* @type {number}
				* @default 1.7976931348623157e+308
				* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
				*/
				var FLOAT64_MAX = 1.7976931348623157e+308;


				// EXPORTS //

				module.exports = FLOAT64_MAX;
			}
		}
	},
	"@stdlib/constants-float64-max-base2-exponent": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* The maximum biased base 2 exponent for a double-precision floating-point number.
				*
				* @module @stdlib/constants-float64-max-base2-exponent
				* @type {integer32}
				*
				* @example
				* var FLOAT64_MAX_BASE2_EXPONENT = require( '@stdlib/constants-float64-max-base2-exponent' );
				* // returns 1023
				*/


				// MAIN //

				/**
				* The maximum biased base 2 exponent for a double-precision floating-point number.
				*
				* ```text
				* 11111111110 => 2046 - BIAS = 1023
				* ```
				*
				* where `BIAS = 1023`.
				*
				* @constant
				* @type {integer32}
				* @default 1023
				* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
				*/
				var FLOAT64_MAX_BASE2_EXPONENT = 1023|0; // asm type annotation


				// EXPORTS //

				module.exports = FLOAT64_MAX_BASE2_EXPONENT;
			}
		}
	},
	"@stdlib/constants-float64-max-base2-exponent-subnormal": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
				*
				* @module @stdlib/constants-float64-max-base2-exponent-subnormal
				* @type {integer32}
				*
				* @example
				* var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants-float64-max-base2-exponent-subnormal' );
				* // returns -1023
				*/


				// MAIN //

				/**
				* The maximum biased base 2 exponent for a subnormal double-precision floating-point number.
				*
				* ```text
				* 00000000000 => 0 - BIAS = -1023
				* ```
				*
				* where `BIAS = 1023`.
				*
				* @constant
				* @type {integer32}
				* @default -1023
				* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
				*/
				var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023|0; // asm type annotation


				// EXPORTS //

				module.exports = FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;
			}
		}
	},
	"@stdlib/constants-float64-max-ln": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Natural logarithm of the maximum double-precision floating-point number.
				*
				* @module @stdlib/constants-float64-max-ln
				* @type {number}
				*
				* @example
				* var FLOAT64_MAX_LN = require( '@stdlib/constants-float64-max-ln' );
				* // returns 709.782712893384
				*/


				// MAIN //

				/**
				* Natural logarithm of the maximum double-precision floating-point number.
				*
				* ## Notes
				*
				* The natural logarithm of the maximum is given by
				*
				* ```tex
				* \ln \left( 2^{1023} (2 - 2^{-52}) \right)
				* ```
				*
				* @constant
				* @type {number}
				* @default 709.782712893384
				* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
				*/
				var FLOAT64_MAX_LN = 709.782712893384;


				// EXPORTS //

				module.exports = FLOAT64_MAX_LN;
			}
		}
	},
	"@stdlib/constants-float64-min-base2-exponent-subnormal": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
				*
				* @module @stdlib/constants-float64-min-base2-exponent-subnormal
				* @type {integer32}
				*
				* @example
				* var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = require( '@stdlib/constants-float64-min-base2-exponent-subnormal' );
				* // returns -1074
				*/


				// MAIN //

				/**
				* The minimum biased base 2 exponent for a subnormal double-precision floating-point number.
				*
				* ```text
				* -(BIAS+(52-1)) = -(1023+51) = -1074
				* ```
				*
				* where `BIAS = 1023` and `52` is the number of digits in the significand.
				*
				* @constant
				* @type {integer32}
				* @default -1074
				* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
				*/
				var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074|0; // asm type annotation


				// EXPORTS //

				module.exports = FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;
			}
		}
	},
	"@stdlib/constants-float64-min-ln": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Natural logarithm of the smallest normalized double-precision floating-point number.
				*
				* @module @stdlib/constants-float64-min-ln
				* @type {number}
				*
				* @example
				* var FLOAT64_MIN_LN = require( '@stdlib/constants-float64-min-ln' );
				* // returns -708.3964185322641
				*/


				// MAIN //

				/**
				* Natural logarithm of the smallest normalized double-precision floating-point number.
				*
				* ## Notes
				*
				* The number has the value
				*
				* ```tex
				* -\ln \left( 2^{1023-1} \right)
				* ```
				*
				* @constant
				* @type {number}
				* @default -708.3964185322641
				* @see [IEEE 754]{@link http://en.wikipedia.org/wiki/IEEE_754-1985}
				*/
				var FLOAT64_MIN_LN = -708.3964185322641;


				// EXPORTS //

				module.exports = FLOAT64_MIN_LN;
			}
		}
	},
	"@stdlib/constants-float64-ninf": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Double-precision floating-point negative infinity.
				*
				* @module @stdlib/constants-float64-ninf
				* @type {number}
				*
				* @example
				* var FLOAT64_NINF = require( '@stdlib/constants-float64-ninf' );
				* // returns -Infinity
				*/

				// MODULES //

				var Number = require( '@stdlib/number-ctor' );


				// MAIN //

				/**
				* Double-precision floating-point negative infinity.
				*
				* ## Notes
				*
				* Double-precision floating-point negative infinity has the bit sequence
				*
				* ```binarystring
				* 1 11111111111 00000000000000000000 00000000000000000000000000000000
				* ```
				*
				* @constant
				* @type {number}
				* @default Number.NEGATIVE_INFINITY
				* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
				*/
				var FLOAT64_NINF = Number.NEGATIVE_INFINITY;


				// EXPORTS //

				module.exports = FLOAT64_NINF;
			}
		}
	},
	"@stdlib/constants-float64-pi": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* The mathematical constant `π`.
				*
				* @module @stdlib/constants-float64-pi
				* @type {number}
				*
				* @example
				* var PI = require( '@stdlib/constants-float64-pi' );
				* // returns 3.141592653589793
				*/


				// MAIN //

				/**
				* The mathematical constant `π`.
				*
				* @constant
				* @type {number}
				* @default 3.141592653589793
				* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
				*/
				var PI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679; // eslint-disable-line max-len


				// EXPORTS //

				module.exports = PI;
			}
		}
	},
	"@stdlib/constants-float64-pinf": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Double-precision floating-point positive infinity.
				*
				* @module @stdlib/constants-float64-pinf
				* @type {number}
				*
				* @example
				* var FLOAT64_PINF = require( '@stdlib/constants-float64-pinf' );
				* // returns Infinity
				*/


				// MAIN //

				/**
				* Double-precision floating-point positive infinity.
				*
				* ## Notes
				*
				* Double-precision floating-point positive infinity has the bit sequence
				*
				* ```binarystring
				* 0 11111111111 00000000000000000000 00000000000000000000000000000000
				* ```
				*
				* @constant
				* @type {number}
				* @default Number.POSITIVE_INFINITY
				* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
				*/
				var FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals


				// EXPORTS //

				module.exports = FLOAT64_PINF;
			}
		}
	},
	"@stdlib/constants-float64-smallest-normal": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Smallest positive double-precision floating-point normal number.
				*
				* @module @stdlib/constants-float64-smallest-normal
				* @type {number}
				*
				* @example
				* var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants-float64-smallest-normal' );
				* // returns 2.2250738585072014e-308
				*/


				// MAIN //

				/**
				* The smallest positive double-precision floating-point normal number.
				*
				* ## Notes
				*
				* The number has the value
				*
				* ```tex
				* \frac{1}{2^{1023-1}}
				* ```
				*
				* which corresponds to the bit sequence
				*
				* ```binarystring
				* 0 00000000001 00000000000000000000 00000000000000000000000000000000
				* ```
				*
				* @constant
				* @type {number}
				* @default 2.2250738585072014e-308
				* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
				*/
				var FLOAT64_SMALLEST_NORMAL = 2.2250738585072014e-308;


				// EXPORTS //

				module.exports = FLOAT64_SMALLEST_NORMAL;
			}
		}
	},
	"@stdlib/constants-float64-sqrt-eps": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Square root of double-precision floating-point epsilon.
				*
				* @module @stdlib/constants-float64-sqrt-eps
				* @type {number}
				*
				* @example
				* var FLOAT64_SQRT_EPSILON = require( '@stdlib/constants-float64-sqrt-eps' );
				* // returns 0.14901161193847656e-7
				*/


				// MAIN //

				/**
				* Square root of double-precision floating-point epsilon.
				*
				* ```tex
				* \sqrt{\frac{1}{2^{52}}}
				* ```
				*
				* @constant
				* @type {number}
				* @default 0.14901161193847656e-7
				* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}
				* @see [Machine Epsilon]{@link https://en.wikipedia.org/wiki/Machine_epsilon}
				*/
				var FLOAT64_SQRT_EPSILON = 0.1490116119384765625e-7;


				// EXPORTS //

				module.exports = FLOAT64_SQRT_EPSILON;
			}
		}
	},
	"@stdlib/constants-float64-sqrt-two-pi": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Square root of the mathematical constant `π` times `2`.
				*
				* @module @stdlib/constants-float64-sqrt-two-pi
				* @type {number}
				*
				* @example
				* var SQRT_TWO_PI = require( '@stdlib/constants-float64-sqrt-two-pi' );
				* // returns 2.5066282746310007
				*/


				// MAIN //

				/**
				* Square root of the mathematical constant `π` times `2`.
				*
				* @constant
				* @type {number}
				* @default 2.5066282746310007
				* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
				*/
				var SQRT_TWO_PI = 2.506628274631000502415765284811045253e+00;


				// EXPORTS //

				module.exports = SQRT_TWO_PI;
			}
		}
	},
	"@stdlib/constants-float64-two-pi": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* The mathematical constant `π` times `2`.
				*
				* @module @stdlib/constants-float64-two-pi
				* @type {number}
				*
				* @example
				* var TWO_PI = require( '@stdlib/constants-float64-two-pi' );
				* // returns 6.283185307179586
				*/


				// MAIN //

				/**
				* The mathematical constant `π` times `2`.
				*
				* @constant
				* @type {number}
				* @default 6.283185307179586
				* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}
				*/
				var TWO_PI = 6.28318530717958647692528676655900576839433879875021164194988918461563281257241799725606965068423413596429617303; // eslint-disable-line max-len


				// EXPORTS //

				module.exports = TWO_PI;
			}
		}
	},
	"@stdlib/constants-int32-max": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Maximum signed 32-bit integer.
				*
				* @module @stdlib/constants-int32-max
				* @type {integer32}
				*
				* @example
				* var INT32_MAX = require( '@stdlib/constants-int32-max' );
				* // returns 2147483647
				*/


				// MAIN //

				/**
				* Maximum signed 32-bit integer.
				*
				* ## Notes
				*
				* The number has the value
				*
				* ```tex
				* 2^{31} - 1
				* ```
				*
				* which corresponds to the bit sequence
				*
				* ```binarystring
				* 01111111111111111111111111111111
				* ```
				*
				* @constant
				* @type {integer32}
				* @default 2147483647
				*/
				var INT32_MAX = 2147483647|0; // asm type annotation


				// EXPORTS //

				module.exports = INT32_MAX;
			}
		}
	},
	"@stdlib/constants-uint16-max": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Maximum unsigned 16-bit integer.
				*
				* @module @stdlib/constants-uint16-max
				* @type {integer32}
				*
				* @example
				* var UINT16_MAX = require( '@stdlib/constants-uint16-max' );
				* // returns 65535
				*/


				// MAIN //

				/**
				* Maximum unsigned 16-bit integer.
				*
				* ## Notes
				*
				* The number has the value
				*
				* ```tex
				* 2^{16} - 1
				* ```
				*
				* which corresponds to the bit sequence
				*
				* ```binarystring
				* 1111111111111111
				* ```
				*
				* @constant
				* @type {integer32}
				* @default 65535
				*/
				var UINT16_MAX = 65535|0; // asm type annotation


				// EXPORTS //

				module.exports = UINT16_MAX;
			}
		}
	},
	"@stdlib/constants-uint32-max": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Maximum unsigned 32-bit integer.
				*
				* @module @stdlib/constants-uint32-max
				* @type {uinteger32}
				*
				* @example
				* var UINT32_MAX = require( '@stdlib/constants-uint32-max' );
				* // returns 4294967295
				*/


				// MAIN //

				/**
				* Maximum unsigned 32-bit integer.
				*
				* ## Notes
				*
				* The number has the value
				*
				* ```tex
				* 2^{32} - 1
				* ```
				*
				* which corresponds to the bit sequence
				*
				* ```binarystring
				* 11111111111111111111111111111111
				* ```
				*
				* @constant
				* @type {uinteger32}
				* @default 4294967295
				*/
				var UINT32_MAX = 4294967295;


				// EXPORTS //

				module.exports = UINT32_MAX;
			}
		}
	},
	"@stdlib/constants-uint8-max": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Maximum unsigned 8-bit integer.
				*
				* @module @stdlib/constants-uint8-max
				* @type {integer32}
				*
				* @example
				* var UINT8_MAX = require( '@stdlib/constants-uint8-max' );
				* // returns 255
				*/


				// MAIN //

				/**
				* Maximum unsigned 8-bit integer.
				*
				* ## Notes
				*
				* The number has the value
				*
				* ```tex
				* 2^{8} - 1
				* ```
				*
				* which corresponds to the bit sequence
				*
				* ```binarystring
				* 11111111
				* ```
				*
				* @constant
				* @type {integer32}
				* @default 255
				*/
				var UINT8_MAX = 255|0; // asm type annotation


				// EXPORTS //

				module.exports = UINT8_MAX;
			}
		}
	},
	"@stdlib/math-base-assert-is-even": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Test if a finite numeric value is an even number.
				*
				* @module @stdlib/math-base-assert-is-even
				*
				* @example
				* var isEven = require( '@stdlib/math-base-assert-is-even' );
				*
				* var bool = isEven( 5.0 );
				* // returns false
				*
				* bool = isEven( -2.0 );
				* // returns true
				*
				* bool = isEven( 0.0 );
				* // returns true
				*
				* bool = isEven( NaN );
				* // returns false
				*/

				// MODULES //

				var isEven = require( './is_even.js' );


				// EXPORTS //

				module.exports = isEven;
			},
			"is_even.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var isInteger = require( '@stdlib/math-base-assert-is-integer' );


				// MAIN //

				/**
				* Tests if a finite numeric value is an even number.
				*
				* @param {number} x - value to test
				* @returns {boolean} boolean indicating whether the value is an even number
				*
				* @example
				* var bool = isEven( 5.0 );
				* // returns false
				*
				* @example
				* var bool = isEven( -2.0 );
				* // returns true
				*
				* @example
				* var bool = isEven( 0.0 );
				* // returns true
				*
				* @example
				* var bool = isEven( NaN );
				* // returns false
				*/
				function isEven( x ) {
					return isInteger( x/2.0 );
				}


				// EXPORTS //

				module.exports = isEven;
			}
		}
	},
	"@stdlib/math-base-assert-is-infinite": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Test if a double-precision floating-point numeric value is infinite.
				*
				* @module @stdlib/math-base-assert-is-infinite
				*
				* @example
				* var isInfinite = require( '@stdlib/math-base-assert-is-infinite' );
				*
				* var bool = isInfinite( Infinity );
				* // returns true
				*
				* bool = isInfinite( -Infinity );
				* // returns true
				*
				* bool = isInfinite( 5.0 );
				* // returns false
				*
				* bool = isInfinite( NaN );
				* // returns false
				*/

				// MODULES //

				var isInfinite = require( './main.js' );


				// EXPORTS //

				module.exports = isInfinite;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var PINF = require( '@stdlib/constants-float64-pinf' );
				var NINF = require( '@stdlib/constants-float64-ninf' );


				// MAIN //

				/**
				* Tests if a double-precision floating-point numeric value is infinite.
				*
				* @param {number} x - value to test
				* @returns {boolean} boolean indicating whether the value is infinite
				*
				* @example
				* var bool = isInfinite( Infinity );
				* // returns true
				*
				* @example
				* var bool = isInfinite( -Infinity );
				* // returns true
				*
				* @example
				* var bool = isInfinite( 5.0 );
				* // returns false
				*
				* @example
				* var bool = isInfinite( NaN );
				* // returns false
				*/
				function isInfinite( x ) {
					return (x === PINF || x === NINF);
				}


				// EXPORTS //

				module.exports = isInfinite;
			}
		}
	},
	"@stdlib/math-base-assert-is-integer": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Test if a finite double-precision floating-point number is an integer.
				*
				* @module @stdlib/math-base-assert-is-integer
				*
				* @example
				* var isInteger = require( '@stdlib/math-base-assert-is-integer' );
				*
				* var bool = isInteger( 1.0 );
				* // returns true
				*
				* bool = isInteger( 3.14 );
				* // returns false
				*/

				// MODULES //

				var isInteger = require( './is_integer.js' );


				// EXPORTS //

				module.exports = isInteger;
			},
			"is_integer.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var floor = require( '@stdlib/math-base-special-floor' );


				// MAIN //

				/**
				* Tests if a finite double-precision floating-point number is an integer.
				*
				* @param {number} x - value to test
				* @returns {boolean} boolean indicating whether the value is an integer
				*
				* @example
				* var bool = isInteger( 1.0 );
				* // returns true
				*
				* @example
				* var bool = isInteger( 3.14 );
				* // returns false
				*/
				function isInteger( x ) {
					return (floor(x) === x);
				}


				// EXPORTS //

				module.exports = isInteger;
			}
		}
	},
	"@stdlib/math-base-assert-is-nan": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Test if a double-precision floating-point numeric value is `NaN`.
				*
				* @module @stdlib/math-base-assert-is-nan
				*
				* @example
				* var isnan = require( '@stdlib/math-base-assert-is-nan' );
				*
				* var bool = isnan( NaN );
				* // returns true
				*
				* bool = isnan( 7.0 );
				* // returns false
				*/

				// MODULES //

				var isnan = require( './main.js' );


				// EXPORTS //

				module.exports = isnan;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MAIN //

				/**
				* Tests if a double-precision floating-point numeric value is `NaN`.
				*
				* @param {number} x - value to test
				* @returns {boolean} boolean indicating whether the value is `NaN`
				*
				* @example
				* var bool = isnan( NaN );
				* // returns true
				*
				* @example
				* var bool = isnan( 7.0 );
				* // returns false
				*/
				function isnan( x ) {
					return ( x !== x );
				}


				// EXPORTS //

				module.exports = isnan;
			}
		}
	},
	"@stdlib/math-base-assert-is-negative-zero": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Test if a double-precision floating-point numeric value is negative zero.
				*
				* @module @stdlib/math-base-assert-is-negative-zero
				*
				* @example
				* var isNegativeZero = require( '@stdlib/math-base-assert-is-negative-zero' );
				*
				* var bool = isNegativeZero( -0.0 );
				* // returns true
				*
				* bool = isNegativeZero( 0.0 );
				* // returns false
				*/

				// MODULES //

				var isNegativeZero = require( './main.js' );


				// EXPORTS //

				module.exports = isNegativeZero;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var NINF = require( '@stdlib/constants-float64-ninf' );


				// MAIN //

				/**
				* Tests if a double-precision floating-point numeric value is negative zero.
				*
				* @param {number} x - value to test
				* @returns {boolean} boolean indicating whether the value is negative zero
				*
				* @example
				* var bool = isNegativeZero( -0.0 );
				* // returns true
				*
				* @example
				* var bool = isNegativeZero( 0.0 );
				* // returns false
				*/
				function isNegativeZero( x ) {
					return (x === 0.0 && 1.0/x === NINF);
				}


				// EXPORTS //

				module.exports = isNegativeZero;
			}
		}
	},
	"@stdlib/math-base-assert-is-odd": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Test if a finite numeric value is an odd number.
				*
				* @module @stdlib/math-base-assert-is-odd
				*
				* @example
				* var isOdd = require( '@stdlib/math-base-assert-is-odd' );
				*
				* var bool = isOdd( 5.0 );
				* // returns true
				*
				* bool = isOdd( -2.0 );
				* // returns false
				*
				* bool = isOdd( 0.0 );
				* // returns false
				*
				* bool = isOdd( NaN );
				* // returns false
				*/

				// MODULES //

				var isOdd = require( './is_odd.js' );


				// EXPORTS //

				module.exports = isOdd;
			},
			"is_odd.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var isEven = require( '@stdlib/math-base-assert-is-even' );


				// MAIN //

				/**
				* Tests if a finite numeric value is an odd number.
				*
				* @param {number} x - value to test
				* @returns {boolean} boolean indicating whether the value is an odd number
				*
				* @example
				* var bool = isOdd( 5.0 );
				* // returns true
				*
				* @example
				* var bool = isOdd( -2.0 );
				* // returns false
				*
				* @example
				* var bool = isOdd( 0.0 );
				* // returns false
				*
				* @example
				* var bool = isOdd( NaN );
				* // returns false
				*/
				function isOdd( x ) {
					// Check sign to prevent overflow...
					if ( x > 0.0 ) {
						return isEven( x-1.0 );
					}
					return isEven( x+1.0 );
				}


				// EXPORTS //

				module.exports = isOdd;
			}
		}
	},
	"@stdlib/math-base-assert-is-positive-zero": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Test if a double-precision floating-point numeric value is positive zero.
				*
				* @module @stdlib/math-base-assert-is-positive-zero
				*
				* @example
				* var isPositiveZero = require( '@stdlib/math-base-assert-is-positive-zero' );
				*
				* var bool = isPositiveZero( 0.0 );
				* // returns true
				*
				* bool = isPositiveZero( -0.0 );
				* // returns false
				*/

				// MODULES //

				var isPositiveZero = require( './main.js' );


				// EXPORTS //

				module.exports = isPositiveZero;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var PINF = require( '@stdlib/constants-float64-pinf' );


				// MAIN //

				/**
				* Tests if a double-precision floating-point numeric value is positive zero.
				*
				* @param {number} x - value to test
				* @returns {boolean} boolean indicating whether the value is positive zero
				*
				* @example
				* var bool = isPositiveZero( 0.0 );
				* // returns true
				*
				* @example
				* var bool = isPositiveZero( -0.0 );
				* // returns false
				*/
				function isPositiveZero( x ) {
					return (x === 0.0 && 1.0/x === PINF);
				}


				// EXPORTS //

				module.exports = isPositiveZero;
			}
		}
	},
	"@stdlib/math-base-special-abs": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Compute an absolute value of a double-precision floating-point number.
				*
				* @module @stdlib/math-base-special-abs
				*
				* @example
				* var abs = require( '@stdlib/math-base-special-abs' );
				*
				* var v = abs( -1.0 );
				* // returns 1.0
				*
				* v = abs( 2.0 );
				* // returns 2.0
				*
				* v = abs( 0.0 );
				* // returns 0.0
				*
				* v = abs( -0.0 );
				* // returns 0.0
				*
				* v = abs( NaN );
				* // returns NaN
				*/

				// MODULES //

				var abs = require( './main.js' );


				// EXPORTS //

				module.exports = abs;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2021 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MAIN //

				/**
				* Computes the absolute value of a double-precision floating-point number `x`.
				*
				* @param {number} x - input value
				* @returns {number} absolute value
				*
				* @example
				* var v = abs( -1.0 );
				* // returns 1.0
				*
				* @example
				* var v = abs( 2.0 );
				* // returns 2.0
				*
				* @example
				* var v = abs( 0.0 );
				* // returns 0.0
				*
				* @example
				* var v = abs( -0.0 );
				* // returns 0.0
				*
				* @example
				* var v = abs( NaN );
				* // returns NaN
				*/
				function abs( x ) {
					return Math.abs( x ); // eslint-disable-line stdlib/no-builtin-math
				}


				// EXPORTS //

				module.exports = abs;
			}
		}
	},
	"@stdlib/math-base-special-asin": {
		":mainpath:": "./lib",
		"lib": {
			"asin.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright 1984, 1995, 2000 by Stephen L. Moshier
				*
				* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
				*
				* Stephen L. Moshier
				* moshier@na-net.ornl.gov
				* ```
				*/

				'use strict';

				// MODULES //

				var isnan = require( '@stdlib/math-base-assert-is-nan' );
				var sqrt = require( '@stdlib/math-base-special-sqrt' );
				var PIO4 = require( '@stdlib/constants-float64-fourth-pi' );
				var ratevalPQ = require( './rational_pq.js' );
				var ratevalRS = require( './rational_rs.js' );


				// VARIABLES //

				var MOREBITS = 6.123233995736765886130e-17; // pi/2 = PIO2 + MOREBITS


				// MAIN //

				/**
				* Computes the arcsine of a number.
				*
				* ## Method
				*
				* -   A rational function of the form
				*
				*     ```tex
				*     x + x^3 \frac{P(x^2)}{Q(x^2)}
				*     ```
				*
				*     is used for \\(\|x\|\\) in the interval \\(\[0, 0.5\]\\). If \\(\|x\| > 0.5\\), it is transformed by the identity
				*
				*     ```tex
				*     \operatorname{asin}(x) = \frac{\pi}{2} - 2 \operatorname{asin}( \sqrt{ (1-x)/2 } )
				*     ```
				*
				* ## Notes
				*
				* -   Relative error:
				*
				*     | arithmetic | domain | # trials | peak    | rms     |
				*     |:-----------|:-------|:---------|:--------|:--------|
				*     | DEC        | -1, 1  | 40000    | 2.6e-17 | 7.1e-18 |
				*     | IEEE       | -1, 1  | 10^6     | 1.9e-16 | 5.4e-17 |
				*
				* @param {number} x - input value
				* @returns {number} arcsine (in radians)
				*
				* @example
				* var v = asin( 0.0 );
				* // returns ~0.0
				*
				* @example
				* var v = asin( 3.141592653589793/4.0 );
				* // returns ~0.903
				*
				* @example
				* var v = asin( -3.141592653589793/6.0 );
				* // returns ~-0.551
				*
				* @example
				* var v = asin( NaN );
				* // returns NaN
				*/
				function asin( x ) {
					var sgn;
					var zz;
					var a;
					var p;
					var z;

					if ( isnan( x ) ) {
						return NaN;
					}
					if ( x > 0.0 ) {
						a = x;
					} else {
						sgn = true;
						a = -x;
					}
					if ( a > 1.0 ) {
						return NaN;
					}
					if ( a > 0.625 ) {
						// arcsin(1-x) = pi/2 - sqrt(2x)(1+R(x))
						zz = 1.0 - a;
						p = zz * ratevalRS( zz );
						zz = sqrt( zz + zz );
						z = PIO4 - zz;
						zz = ( zz*p ) - MOREBITS;
						z -= zz;
						z += PIO4;
					} else {
						if ( a < 1.0e-8 ) {
							return x;
						}
						zz = a * a;
						z = zz * ratevalPQ( zz );
						z = ( a*z ) + a;
					}
					return ( sgn ) ? -z : z;
				}


				// EXPORTS //

				module.exports = asin;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Compute the arcsine of a number.
				*
				* @module @stdlib/math-base-special-asin
				*
				* @example
				* var asin = require( '@stdlib/math-base-special-asin' );
				*
				* var v = asin( 0.0 );
				* // returns 0.0
				*
				* v = asin( 3.141592653589793/4.0 );
				* // returns ~0.903
				*
				* v = asin( -3.141592653589793/6.0 );
				* // returns ~-0.551
				*
				* v = asin( NaN );
				* // returns NaN
				*/

				// MODULES //

				var asin = require( './asin.js' );


				// EXPORTS //

				module.exports = asin;
			},
			"rational_pq.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2020 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
				*
				* ## Notes
				*
				* -   Coefficients should be sorted in ascending degree.
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the rational function
				* @returns {number} evaluated rational function
				*/
				function evalrational( x ) {
					var ax;
					var s1;
					var s2;
					if ( x === 0.0 ) {
						return 0.16666666666666713;
					}
					if ( x < 0.0 ) {
						ax = -x;
					} else {
						ax = x;
					}
					if ( ax <= 1.0 ) {
						s1 = -8.198089802484825 + (x * (19.562619833175948 + (x * (-16.262479672107002 + (x * (5.444622390564711 + (x * (-0.6019598008014124 + (x * 0.004253011369004428))))))))); // eslint-disable-line max-len
						s2 = -49.18853881490881 + (x * (139.51056146574857 + (x * (-147.1791292232726 + (x * (70.49610280856842 + (x * (-14.740913729888538 + (x * 1.0))))))))); // eslint-disable-line max-len
					} else {
						x = 1.0 / x;
						s1 = 0.004253011369004428 + (x * (-0.6019598008014124 + (x * (5.444622390564711 + (x * (-16.262479672107002 + (x * (19.562619833175948 + (x * -8.198089802484825))))))))); // eslint-disable-line max-len
						s2 = 1.0 + (x * (-14.740913729888538 + (x * (70.49610280856842 + (x * (-147.1791292232726 + (x * (139.51056146574857 + (x * -49.18853881490881))))))))); // eslint-disable-line max-len
					}
					return s1 / s2;
				}


				// EXPORTS //

				module.exports = evalrational;
			},
			"rational_rs.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2020 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
				*
				* ## Notes
				*
				* -   Coefficients should be sorted in ascending degree.
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the rational function
				* @returns {number} evaluated rational function
				*/
				function evalrational( x ) {
					var ax;
					var s1;
					var s2;
					if ( x === 0.0 ) {
						return 0.08333333333333809;
					}
					if ( x < 0.0 ) {
						ax = -x;
					} else {
						ax = x;
					}
					if ( ax <= 1.0 ) {
						s1 = 28.536655482610616 + (x * (-25.56901049652825 + (x * (6.968710824104713 + (x * (-0.5634242780008963 + (x * 0.002967721961301243))))))); // eslint-disable-line max-len
						s2 = 342.43986579130785 + (x * (-383.8770957603691 + (x * (147.0656354026815 + (x * (-21.947795316429207 + (x * 1.0))))))); // eslint-disable-line max-len
					} else {
						x = 1.0 / x;
						s1 = 0.002967721961301243 + (x * (-0.5634242780008963 + (x * (6.968710824104713 + (x * (-25.56901049652825 + (x * 28.536655482610616))))))); // eslint-disable-line max-len
						s2 = 1.0 + (x * (-21.947795316429207 + (x * (147.0656354026815 + (x * (-383.8770957603691 + (x * 342.43986579130785))))))); // eslint-disable-line max-len
					}
					return s1 / s2;
				}


				// EXPORTS //

				module.exports = evalrational;
			}
		}
	},
	"@stdlib/math-base-special-beta": {
		":mainpath:": "./lib",
		"lib": {
			"beta.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var isnan = require( '@stdlib/math-base-assert-is-nan' );
				var log1p = require( '@stdlib/math-base-special-log1p' );
				var sqrt = require( '@stdlib/math-base-special-sqrt' );
				var abs = require( '@stdlib/math-base-special-abs' );
				var exp = require( '@stdlib/math-base-special-exp' );
				var pow = require( '@stdlib/math-base-special-pow' );
				var E = require( '@stdlib/constants-float64-e' );
				var EPSILON = require( '@stdlib/constants-float64-eps' );
				var lanczosSumExpGScaled = require( './lanczos_sum_expg_scaled.js' ); // Lanczos approximation scaled by exp(G)


				// VARIABLES //

				var G = 10.90051099999999983936049829935654997826;


				// MAIN //

				/**
				* Evaluate the beta function.
				*
				* @param {NonNegativeNumber} a - input value
				* @param {NonNegativeNumber} b - input value
				* @returns {number} evaluated beta function
				*
				* @example
				* var v = beta( 0.0, 0.5 );
				* // returns Infinity
				*
				* @example
				* var v = beta( 1.0, 1.0 );
				* // returns 1.0
				*
				* @example
				* var v = beta( -1.0, 2.0 );
				* // returns NaN
				*
				* @example
				* var v = beta( 5.0, 0.2 );
				* // returns ~3.382
				*
				* @example
				* var v = beta( 4.0, 1.0 );
				* // returns 0.25
				*
				* @example
				* var v = beta( NaN, 2.0 );
				* // returns NaN
				*/
				function beta( a, b ) {
					var ambh;
					var agh;
					var bgh;
					var cgh;
					var res;
					var tmp;
					var c;

					if ( isnan( a ) || isnan( b ) ) {
						return NaN;
					}
					if ( a < 0.0 || b < 0.0 ) {
						return NaN;
					}
					if ( b === 1.0 ) {
						return 1.0 / a;
					}
					if ( a === 1.0 ) {
						return 1.0 / b;
					}
					c = a + b;
					if ( c < EPSILON ) {
						res = c / a;
						res /= b;
						return res;
					}

					// Special cases:
					if ( c === a && b < EPSILON ) {
						return 1.0 / b;
					}
					if ( c === b && a < EPSILON ) {
						return 1.0 / a;
					}

					if ( a < b ) {
						// Swap `a` and `b`:
						tmp = b;
						b = a;
						a = tmp;
					}

					// Lanczos calculation:
					agh = a + G - 0.5;
					bgh = b + G - 0.5;
					cgh = c + G - 0.5;
					res = lanczosSumExpGScaled( a ) * ( lanczosSumExpGScaled( b )/lanczosSumExpGScaled( c ) ); // eslint-disable-line max-len
					ambh = a - 0.5 - b;
					if ( ( abs( b*ambh ) < ( cgh*100.0 ) ) && a > 100.0 ) {
						// Special case where the base of the power term is close to 1; compute `(1+x)^y` instead:
						res *= exp( ambh * log1p( -b/cgh ) );
					} else {
						res *= pow( agh/cgh, ambh );
					}
					if ( cgh > 1.0e10 ) {
						// This avoids possible overflow, but appears to be marginally less accurate:
						res *= pow( (agh/cgh)*(bgh/cgh), b );
					} else {
						res *= pow( (agh*bgh)/(cgh*cgh), b );
					}
					res *= sqrt( E/bgh);
					return res;
				}


				// EXPORTS //

				module.exports = beta;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Evaluate the beta function.
				*
				* @module @stdlib/math-base-special-beta
				*
				* @example
				* var beta = require( '@stdlib/math-base-special-beta' );
				*
				* var v = beta( 0.0, 0.5 );
				* // returns Infinity
				*
				* v = beta( 1.0, 1.0 );
				* // returns 1.0
				*
				* v = beta( -1.0, 2.0 );
				* // returns NaN
				*
				* v = beta( 5.0, 0.2 );
				* // returns ~3.382
				*
				* v = beta( 4.0, 1.0 );
				* // returns 0.25
				*
				* v = beta( NaN, 2.0 );
				* // returns NaN
				*/

				// MODULES //

				var beta = require( './beta.js' );


				// EXPORTS //

				module.exports = beta;
			},
			"lanczos_sum_expg_scaled.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
				*
				* ## Notes
				*
				* -   Coefficients should be sorted in ascending degree.
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the rational function
				* @returns {number} evaluated rational function
				*/
				function evalrational( x ) {
					var ax;
					var s1;
					var s2;
					if ( x === 0.0 ) {
						return Infinity;
					}
					if ( x < 0.0 ) {
						ax = -x;
					} else {
						ax = x;
					}
					if ( ax <= 1.0 ) {
						s1 = 709811.662581658 + (x * (679979.8474157227 + (x * (293136.7857211597 + (x * (74887.54032914672 + (x * (12555.290582413863 + (x * (1443.4299244417066 + (x * (115.24194596137347 + (x * (6.309239205732627 + (x * (0.22668404630224365 + (x * (0.004826466289237662 + (x * 0.00004624429436045379))))))))))))))))))); // eslint-disable-line max-len
						s2 = 0.0 + (x * (362880.0 + (x * (1026576.0 + (x * (1172700.0 + (x * (723680.0 + (x * (269325.0 + (x * (63273.0 + (x * (9450.0 + (x * (870.0 + (x * (45.0 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
					} else {
						x = 1.0 / x;
						s1 = 0.00004624429436045379 + (x * (0.004826466289237662 + (x * (0.22668404630224365 + (x * (6.309239205732627 + (x * (115.24194596137347 + (x * (1443.4299244417066 + (x * (12555.290582413863 + (x * (74887.54032914672 + (x * (293136.7857211597 + (x * (679979.8474157227 + (x * 709811.662581658))))))))))))))))))); // eslint-disable-line max-len
						s2 = 1.0 + (x * (45.0 + (x * (870.0 + (x * (9450.0 + (x * (63273.0 + (x * (269325.0 + (x * (723680.0 + (x * (1172700.0 + (x * (1026576.0 + (x * (362880.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
					}
					return s1 / s2;
				}


				// EXPORTS //

				module.exports = evalrational;
			}
		}
	},
	"@stdlib/math-base-special-betainc": {
		":mainpath:": "./lib",
		"lib": {
			"betainc.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var kernelBetainc = require( '@stdlib/math-base-special-kernel-betainc' ).assign;


				// MAIN //

				/**
				* Evaluates the incomplete beta function.
				*
				* @param {Probability} x - function parameter
				* @param {NonNegativeNumber} a - function parameter
				* @param {NonNegativeNumber} b - function parameter
				* @param {boolean} [regularized=true] - boolean indicating if the function should evaluate the regularized or non-regularized incomplete beta function
				* @param {boolean} [upper=false] - boolean indicating if the function should return the upper tail of the incomplete beta function
				* @returns {number} function value
				*
				* @example
				* var y = betainc( 0.5, 2.0, 2.0 );
				* // returns 0.5
				*
				* @example
				* var y = betainc( 0.5, 2.0, 2.0, false );
				* // returns ~0.083
				*
				* @example
				* var y = betainc( 0.2, 1.0, 2.0 );
				* // returns 0.36
				*/
				function betainc( x, a, b, regularized, upper ) {
					var out = [ 0.0, 0.0 ];
					regularized = ( regularized === false ) ? false : true; // eslint-disable-line no-unneeded-ternary
					upper = ( upper === true ) ? true : false; // eslint-disable-line no-unneeded-ternary
					kernelBetainc( x, a, b, regularized, upper, out, 1, 0 );
					return out[ 0 ];
				}


				// EXPORTS //

				module.exports = betainc;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Evaluate the incomplete beta function.
				*
				* @module @stdlib/math-base-special-betainc
				*
				* @example
				* var betainc = require( '@stdlib/math-base-special-betainc' );
				*
				* var y = betainc( 0.5, 2.0, 2.0 );
				* // returns 0.5
				*
				* y = betainc( 0.5, 2.0, 2.0, false );
				* // returns ~0.083
				*
				* y = betainc( 0.2, 1.0, 2.0 );
				* // returns 0.36
				*
				* y = betainc( 0.2, 1.0, 2.0, true, true );
				* // returns 0.64
				*/

				// MODULES //

				var betainc = require( './betainc.js' );


				// EXPORTS //

				module.exports = betainc;
			}
		}
	},
	"@stdlib/math-base-special-binomcoef": {
		":mainpath:": "./lib",
		"lib": {
			"binomcoef.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var isInteger = require( '@stdlib/math-base-assert-is-integer' );
				var isnan = require( '@stdlib/math-base-assert-is-nan' );
				var isOdd = require( '@stdlib/math-base-assert-is-odd' );
				var round = require( '@stdlib/math-base-special-round' );


				// MAIN //

				/**
				* Computes the binomial coefficient of two integers.
				*
				* ## Method
				*
				* -   Instead of evaluating the factorial form, which is inefficient and prone to overflow for large inputs arguments, this module computes the following multiplicative representation of the binomial coefficient for integer arguments
				*
				*     ```tex
				*     \binom nk = \prod_{i=1}^k \frac{n+1-i}{i}
				*     ```
				*
				* @param {integer} n - input value
				* @param {integer} k - second input value
				* @returns {integer} function value
				*
				* @example
				* var v = binomcoef( 8, 2 );
				* // returns 28
				*
				* @example
				* var v = binomcoef( 0, 0 );
				* // returns 1
				*
				* @example
				* var v = binomcoef( -4, 2 );
				* // returns 10
				*
				* @example
				* var v = binomcoef( NaN, 3 );
				* // returns NaN
				*
				* @example
				* var v = binomcoef( 5, NaN );
				* // returns NaN
				*
				* @example
				* var v = binomcoef( NaN, NaN );
				* // returns NaN
				*/
				function binomcoef( n, k ) {
					var res;
					var j;
					if ( isnan( n ) || isnan( k ) ) {
						return NaN;
					}
					if ( !isInteger( n ) || !isInteger( k ) ) {
						return NaN;
					}
					if ( k < 0 ) {
						return 0;
					}
					if ( n < 0 ) {
						res = binomcoef( -n + k - 1, k );
						if ( isOdd( k ) ) {
							res = -res;
						}
						return res;
					}
					if ( k > n ) {
						return 0;
					}
					if ( k === 0 || k === n ) {
						return 1;
					}
					if ( k === 1 || k === n - 1 ) {
						return n;
					}
					if ( n - k < k ) {
						k = n - k;
					}
					// Use recursive definition...
					res = n;
					for ( j = 2; j <= k; j++ ) {
						res *= ( n - j + 1 ) / j;
					}
					// Correct for rounding errors...
					return ( isInteger( res ) ) ? res : round( res );
				}


				// EXPORTS //

				module.exports = binomcoef;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Compute the binomial coefficient.
				*
				* @module @stdlib/math-base-special-binomcoef
				*
				* @example
				* var binomcoef = require( '@stdlib/math-base-special-binomcoef' );
				*
				* var v = binomcoef( 8, 2 );
				* // returns 28
				*
				* v = binomcoef( 0, 0 );
				* // returns 1
				*
				* v = binomcoef( -4, 2 );
				* // returns 10
				*
				* v = binomcoef( 5, 3 );
				* // returns 10
				*
				* v = binomcoef( NaN, 3 );
				* // returns NaN
				*
				* v = binomcoef( 5, NaN );
				* // returns NaN
				*
				* v = binomcoef( NaN, NaN );
				* // returns NaN
				*/

				// MODULES //

				var binomcoef = require( './binomcoef.js' );


				// EXPORTS //

				module.exports = binomcoef;
			}
		}
	},
	"@stdlib/math-base-special-ceil": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Round a double-precision floating-point number toward positive infinity.
				*
				* @module @stdlib/math-base-special-ceil
				*
				* @example
				* var ceil = require( '@stdlib/math-base-special-ceil' );
				*
				* var v = ceil( -4.2 );
				* // returns -4.0
				*
				* v = ceil( 9.99999 );
				* // returns 10.0
				*
				* v = ceil( 0.0 );
				* // returns 0.0
				*
				* v = ceil( NaN );
				* // returns NaN
				*/

				// MODULES //

				var ceil = require( './main.js' );


				// EXPORTS //

				module.exports = ceil;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// TODO: implementation (?)

				/**
				* Rounds a double-precision floating-point number toward positive infinity.
				*
				* @param {number} x - input value
				* @returns {number} rounded value
				*
				* @example
				* var v = ceil( -4.2 );
				* // returns -4.0
				*
				* @example
				* var v = ceil( 9.99999 );
				* // returns 10.0
				*
				* @example
				* var v = ceil( 0.0 );
				* // returns 0.0
				*
				* @example
				* var v = ceil( NaN );
				* // returns NaN
				*/
				var ceil = Math.ceil; // eslint-disable-line stdlib/no-builtin-math


				// EXPORTS //

				module.exports = ceil;
			}
		}
	},
	"@stdlib/math-base-special-copysign": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Return a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
				*
				* @module @stdlib/math-base-special-copysign
				*
				* @example
				* var copysign = require( '@stdlib/math-base-special-copysign' );
				*
				* var z = copysign( -3.14, 10.0 );
				* // returns 3.14
				*
				* z = copysign( 3.14, -1.0 );
				* // returns -3.14
				*
				* z = copysign( 1.0, -0.0 );
				* // returns -1.0
				*
				* z = copysign( -3.14, -0.0 );
				* // returns -3.14
				*
				* z = copysign( -0.0, 1.0 );
				* // returns 0.0
				*/

				// MODULES //

				var main = require( './main.js' );


				// EXPORTS //

				module.exports = main;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var toWords = require( '@stdlib/number-float64-base-to-words' );
				var getHighWord = require( '@stdlib/number-float64-base-get-high-word' );
				var fromWords = require( '@stdlib/number-float64-base-from-words' );


				// VARIABLES //

				// 10000000000000000000000000000000 => 2147483648 => 0x80000000
				var SIGN_MASK = 0x80000000>>>0; // asm type annotation

				// 01111111111111111111111111111111 => 2147483647 => 0x7fffffff
				var MAGNITUDE_MASK = 0x7fffffff|0; // asm type annotation

				// High/low words workspace:
				var WORDS = [ 0, 0 ];


				// MAIN //

				/**
				* Returns a double-precision floating-point number with the magnitude of `x` and the sign of `y`.
				*
				* @param {number} x - number from which to derive a magnitude
				* @param {number} y - number from which to derive a sign
				* @returns {number} a double-precision floating-point number
				*
				* @example
				* var z = copysign( -3.14, 10.0 );
				* // returns 3.14
				*
				* @example
				* var z = copysign( 3.14, -1.0 );
				* // returns -3.14
				*
				* @example
				* var z = copysign( 1.0, -0.0 );
				* // returns -1.0
				*
				* @example
				* var z = copysign( -3.14, -0.0 );
				* // returns -3.14
				*
				* @example
				* var z = copysign( -0.0, 1.0 );
				* // returns 0.0
				*/
				function copysign( x, y ) {
					var hx;
					var hy;

					// Split `x` into higher and lower order words:
					toWords( WORDS, x );
					hx = WORDS[ 0 ];

					// Turn off the sign bit of `x`:
					hx &= MAGNITUDE_MASK;

					// Extract the higher order word from `y`:
					hy = getHighWord( y );

					// Leave only the sign bit of `y` turned on:
					hy &= SIGN_MASK;

					// Copy the sign bit of `y` to `x`:
					hx |= hy;

					// Return a new value having the same magnitude as `x`, but with the sign of `y`:
					return fromWords( hx, WORDS[ 1 ] );
				}


				// EXPORTS //

				module.exports = copysign;
			}
		}
	},
	"@stdlib/math-base-special-cos": {
		":mainpath:": "./lib",
		"lib": {
			"cos.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_cos.c}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
				*
				* Developed at SunPro, a Sun Microsystems, Inc. business.
				* Permission to use, copy, modify, and distribute this
				* software is freely granted, provided that this notice
				* is preserved.
				* ```
				*/

				'use strict';

				// MODULES //

				var getHighWord = require( '@stdlib/number-float64-base-get-high-word' );
				var kernelCos = require( '@stdlib/math-base-special-kernel-cos' );
				var kernelSin = require( '@stdlib/math-base-special-kernel-sin' );
				var rempio2 = require( '@stdlib/math-base-special-rempio2' );


				// VARIABLES //

				// Scratch array for storing temporary values:
				var buffer = [ 0.0, 0.0 ]; // WARNING: not thread safe

				// High word absolute value mask: 0x7fffffff => 01111111111111111111111111111111
				var HIGH_WORD_ABS_MASK = 0x7fffffff|0; // asm type annotation

				// High word of π/4: 0x3fe921fb => 00111111111010010010000111111011
				var HIGH_WORD_PIO4 = 0x3fe921fb|0; // asm type annotation

				// High word of 2^-27: 0x3e400000 => 00111110010000000000000000000000
				var HIGH_WORD_TWO_NEG_27 = 0x3e400000|0; // asm type annotation

				// High word exponent mask: 0x7ff00000 => 01111111111100000000000000000000
				var HIGH_WORD_EXPONENT_MASK = 0x7ff00000|0; // asm type annotation


				// MAIN //

				/**
				* Computes the cosine of a number.
				*
				* @param {number} x - input value (in radians)
				* @returns {number} cosine
				*
				* @example
				* var v = cos( 0.0 );
				* // returns 1.0
				*
				* @example
				* var v = cos( 3.141592653589793/4.0 );
				* // returns ~0.707
				*
				* @example
				* var v = cos( -3.141592653589793/6.0 );
				* // returns ~0.866
				*
				* @example
				* var v = cos( NaN );
				* // returns NaN
				*/
				function cos( x ) {
					var ix;
					var n;

					ix = getHighWord( x );
					ix &= HIGH_WORD_ABS_MASK;

					// Case: |x| ~< pi/4
					if ( ix <= HIGH_WORD_PIO4 ) {
						// Case: x < 2**-27
						if ( ix < HIGH_WORD_TWO_NEG_27 ) {
							return 1.0;
						}
						return kernelCos( x, 0.0 );
					}
					// Case: cos(Inf or NaN) is NaN */
					if ( ix >= HIGH_WORD_EXPONENT_MASK ) {
						return NaN;
					}
					// Case: Argument reduction needed...
					n = rempio2( x, buffer );
					switch ( n & 3 ) {
					case 0:
						return kernelCos( buffer[ 0 ], buffer[ 1 ] );
					case 1:
						return -kernelSin( buffer[ 0 ], buffer[ 1 ] );
					case 2:
						return -kernelCos( buffer[ 0 ], buffer[ 1 ] );
					default:
						return kernelSin( buffer[ 0 ], buffer[ 1 ] );
					}
				}


				// EXPORTS //

				module.exports = cos;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Compute the cosine of a number.
				*
				* @module @stdlib/math-base-special-cos
				*
				* @example
				* var cos = require( '@stdlib/math-base-special-cos' );
				*
				* var v = cos( 0.0 );
				* // returns 1.0
				*
				* v = cos( 3.141592653589793/4.0 );
				* // returns ~0.707
				*
				* v = cos( -3.141592653589793/6.0 );
				* // returns ~0.866
				*/

				// MODULES //

				var cos = require( './cos.js' );


				// EXPORTS //

				module.exports = cos;
			}
		}
	},
	"@stdlib/math-base-special-erfc": {
		":mainpath:": "./lib",
		"lib": {
			"erfc.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_erf.c}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
				*
				* Developed at SunPro, a Sun Microsystems, Inc. business.
				* Permission to use, copy, modify, and distribute this
				* software is freely granted, provided that this notice
				* is preserved.
				* ```
				*/

				'use strict';

				// MODULES //

				var isnan = require( '@stdlib/math-base-assert-is-nan' );
				var exp = require( '@stdlib/math-base-special-exp' );
				var setLowWord = require( '@stdlib/number-float64-base-set-low-word' );
				var PINF = require( '@stdlib/constants-float64-pinf' );
				var NINF = require( '@stdlib/constants-float64-ninf' );
				var polyvalPP = require( './polyval_pp.js' );
				var polyvalQQ = require( './polyval_qq.js' );
				var polyvalPA = require( './polyval_pa.js' );
				var polyvalQA = require( './polyval_qa.js' );
				var polyvalRA = require( './polyval_ra.js' );
				var polyvalSA = require( './polyval_sa.js' );
				var polyvalRB = require( './polyval_rb.js' );
				var polyvalSB = require( './polyval_sb.js' );


				// VARIABLES //

				var TINY = 1.0e-300;

				// 2**-56 = 1/(2**56) = 1/72057594037927940
				var SMALL = 1.3877787807814457e-17;

				var ERX = 8.45062911510467529297e-1;  // 0x3FEB0AC1, 0x60000000

				var PPC = 1.28379167095512558561e-1;  // 0x3FC06EBA, 0x8214DB68
				var QQC = 1.0;

				var PAC = -2.36211856075265944077e-3; // 0xBF6359B8, 0xBEF77538
				var QAC = 1.0;

				var RAC = -9.86494403484714822705e-3; // 0xBF843412, 0x600D6435
				var SAC = 1.0;

				var RBC = -9.86494292470009928597e-3; // 0xBF843412, 0x39E86F4A
				var SBC = 1.0;


				// MAIN //

				/**
				* Evaluates the complementary error function.
				*
				* ```tex
				* \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}} \int^{x}_{0} e^{-t^2}\ \mathrm{dt}
				* ```
				*
				* Note that
				*
				* ```tex
				* \begin{align*}
				* \operatorname{erfc}(x) &= 1 - \operatorname{erf}(x) \\
				* \operatorname{erf}(-x) &= -\operatorname{erf}(x) \\
				* \operatorname{erfc}(-x) &= 2 - \operatorname{erfc}(x)
				* \end{align*}
				* ```
				*
				* ## Method
				*
				* 1.  For \\(|x| \in [0, 0.84375)\\),
				*
				*     ```tex
				*     \operatorname{erf}(x) = x + x \cdot \operatorname{R}(x^2)
				*     ```
				*
				*     and
				*
				*     ```tex
				*     \operatorname{erfc}(x) = \begin{cases}
				*     1 - \operatorname{erf}(x) & \textrm{if}\ x \in (-.84375,0.25) \\
				*     0.5 + ((0.5-x)-x \mathrm{R}) & \textrm{if}\ x \in [0.25,0.84375)
				*     \end{cases}
				*     ```
				*
				*     where \\(R = P/Q\\) and where \\(P\\) is an odd polynomial of degree \\(8\\) and \\(Q\\) is an odd polynomial of degree \\(10\\).
				*
				*     ```tex
				*     \biggl| \mathrm{R} - \frac{\operatorname{erf}(x)-x}{x} \biggr| \leq 2^{-57.90}
				*     ```
				*
				*     <!-- <note> -->
				*
				*     The formula is derived by noting
				*
				*     ```tex
				*     \operatorname{erf}(x) = \frac{2}{\sqrt{\pi}}\biggl(x - \frac{x^3}{3} + \frac{x^5}{10} - \frac{x^7}{42} + \ldots \biggr)
				*     ```
				*
				*     and that
				*
				*     ```tex
				*     \frac{2}{\sqrt{\pi}} = 1.128379167095512573896158903121545171688
				*     ```
				*
				*     is close to unity. The interval is chosen because the fix point of \\(\operatorname{erf}(x)\\) is near \\(0.6174\\) (i.e., \\(\operatorname{erf(x)} = x\\) when \\(x\\) is near \\(0.6174\\)), and, by some experiment, \\(0.84375\\) is chosen to guarantee the error is less than one ulp for \\(\operatorname{erf}(x)\\).
				*
				*     <!-- </note> -->
				*
				* 2.  For \\(|x| \in [0.84375,1.25)\\), let \\(s = |x|-1\\), and \\(c = 0.84506291151\\) rounded to single (\\(24\\) bits)
				*
				*     ```tex
				*     \operatorname{erf}(x) = \operatorname{sign}(x) \cdot \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr)
				*     ```
				*
				*     and
				*
				*     ```tex
				*     \operatorname{erfc}(x) = \begin{cases}
				*     (1-c) - \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)} & \textrm{if}\ x > 0 \\
				*     1 + \biggl(c + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}\biggr) & \textrm{if}\ x < 0
				*     \end{cases}
				*     ```
				*
				*     where
				*
				*     ```tex
				*     \biggl|\frac{\mathrm{P1}}{\mathrm{Q1}} - (\operatorname{erf}(|x|)-c)\biggr| \leq 2^{-59.06}
				*     ```
				*
				*     <!-- <note> -->
				*
				*     Here, we use the Taylor series expansion at \\(x = 1\\)
				*
				*     ```tex
				*     \begin{align*}
				*     \operatorname{erf}(1+s) &= \operatorname{erf}(1) + s\cdot \operatorname{poly}(s) \\
				*     &= 0.845.. + \frac{\operatorname{P1}(s)}{\operatorname{Q1}(s)}
				*     \end{align*}
				*     ```
				*
				*     using a rational approximation to approximate
				*
				*     ```tex
				*     \operatorname{erf}(1+s) - (c = (\mathrm{single})0.84506291151)
				*     ```
				*
				*     <!-- </note> -->
				*
				*     Note that, for \\(x \in [0.84375,1.25)\\), \\(|\mathrm{P1}/\mathrm{Q1}| < 0.078\\), where
				*
				*     -   \\(\operatorname{P1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
				*     -   \\(\operatorname{Q1}(s)\\) is a degree \\(6\\) polynomial in \\(s\\)
				*
				* 3.  For \\(x \in [1.25,1/0.35)\\),
				*
				*     ```tex
				*     \begin{align*}
				*     \operatorname{erfc}(x) &= \frac{1}{x}e^{-x^2-0.5625+(\mathrm{R1}/\mathrm{S1})} \\
				*     \operatorname{erf}(x) &= 1 - \operatorname{erfc}(x)
				*     \end{align*}
				*     ```
				*
				*     where
				*
				*     -   \\(\operatorname{R1}(z)\\) is a degree \\(7\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
				*     -   \\(\operatorname{S1}(z)\\) is a degree \\(8\\) polynomial in \\(z\\)
				*
				* 4.  For \\(x \in [1/0.35,28)\\),
				*
				*     ```tex
				*     \operatorname{erfc}(x) = \begin{cases}
				*     \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ x > 0 \\
				*     2.0 - \frac{1}{x} e^{-x^2-0.5625+(\mathrm{R2}/\mathrm{S2})} & \textrm{if}\ -6 < x < 0 \\
				*     2.0 - \mathrm{tiny} & \textrm{if}\ x \leq -6
				*     \end{cases}
				*     ```
				*
				*     and
				*
				*     ```tex
				*     \operatorname{erf}(x) = \begin{cases}
				*     \operatorname{sign}(x) \cdot (1.0 - \operatorname{erfc}(x)) & \textrm{if}\ x < 6 \\
				*     \operatorname{sign}(x) \cdot (1.0 - \mathrm{tiny}) & \textrm{otherwise}
				*     \end{cases}
				*     ```
				*
				*     where
				*
				*     -   \\(\operatorname{R2}(z)\\) is a degree \\(6\\) polynomial in \\(z\\), where \\(z = 1/x^2\\)
				*     -   \\(\operatorname{S2}(z)\\) is a degree \\(7\\) polynomial in \\(z\\)
				*
				* 5.  For \\(x \in [28, \infty)\\),
				*
				*     ```tex
				*     \begin{align*}
				*     \operatorname{erf}(x) &= \operatorname{sign}(x) \cdot (1 - \mathrm{tiny}) & \textrm{(raise inexact)}
				*     \end{align*}
				*     ```
				*
				*     and
				*
				*     ```tex
				*     \operatorname{erfc}(x) = \begin{cases}
				*     \mathrm{tiny} \cdot \mathrm{tiny} & \textrm{if}\ x > 0\ \textrm{(raise underflow)} \\
				*     2 - \mathrm{tiny} & \textrm{if}\ x < 0
				*     \end{cases}
				*     ```
				*
				*
				* ## Special Cases
				*
				* ```tex
				* \begin{align*}
				* \operatorname{erf}(0) &= 0 \\
				* \operatorname{erf}(-0) &= -0 \\
				* \operatorname{erf}(\infty) &= 1 \\
				* \operatorname{erf}(-\infty) &= -1 \\
				* \operatorname{erfc}(0) &= 1 \\
				* \operatorname{erfc}(\infty) &= 0 \\
				* \operatorname{erfc}(-\infty) &= 2 \\
				* \operatorname{erf}(\mathrm{NaN}) &= \mathrm{NaN} \\
				* \operatorname{erfc}(\mathrm{NaN}) &= \mathrm{NaN}
				* \end{align*}
				* ```
				*
				*
				* ## Notes
				*
				* -   To compute \\(\exp(-x^2-0.5625+(\mathrm{R}/\mathrm{S}))\\), let \\(s\\) be a single precision number and \\(s := x\\); then
				*
				*     ```tex
				*     -x^2 = -s^2 + (s-x)(s+x)
				*     ```
				*
				*     and
				*
				*     ```tex
				*     e^{-x^2-0.5626+(\mathrm{R}/\mathrm{S})} = e^{-s^2-0.5625} e^{(s-x)(s+x)+(\mathrm{R}/\mathrm{S})}
				*     ```
				*
				* -   `#4` and `#5` make use of the asymptotic series
				*
				*     ```tex
				*     \operatorname{erfc}(x) \approx \frac{e^{-x^2}}{x\sqrt{\pi}} (1 + \operatorname{poly}(1/x^2))
				*     ```
				*
				*     We use a rational approximation to approximate
				*
				*     ```tex
				*     g(s) = f(1/x^2) = \ln(\operatorname{erfc}(x) \cdot x) - x^2 + 0.5625
				*     ```
				*
				* -   The error bound for \\(\mathrm{R1}/\mathrm{S1}\\) is
				*
				*     ```tex
				*     |\mathrm{R1}/\mathrm{S1} - f(x)| < 2^{-62.57}
				*     ```
				*
				*     and for \\(\mathrm{R2}/\mathrm{S2}\\) is
				*
				*     ```tex
				*     |\mathrm{R2}/\mathrm{S2} - f(x)| < 2^{-61.52}
				*     ```
				*
				* @param {number} x - input value
				* @returns {number} function value
				*
				* @example
				* var y = erfc( 2.0 );
				* // returns ~0.0047
				*
				* @example
				* var y = erfc( -1.0 );
				* // returns ~1.8427
				*
				* @example
				* var y = erfc( 0.0 );
				* // returns 1.0
				*
				* @example
				* var y = erfc( Infinity );
				* // returns 0.0
				*
				* @example
				* var y = erfc( -Infinity );
				* // returns 2.0
				*
				* @example
				* var y = erfc( NaN );
				* // returns NaN
				*/
				function erfc( x ) {
					var sign;
					var ax;
					var z;
					var r;
					var s;
					var y;
					var p;
					var q;

					// Special case: NaN
					if ( isnan( x ) ) {
						return NaN;
					}
					// Special case: +infinity
					if ( x === PINF ) {
						return 0.0;
					}
					// Special case: -infinity
					if ( x === NINF ) {
						return 2.0;
					}
					// Special case: +-0
					if ( x === 0.0 ) {
						return 1.0;
					}
					if ( x < 0.0 ) {
						sign = true;
						ax = -x;
					} else {
						sign = false;
						ax = x;
					}
					// |x| < 0.84375
					if ( ax < 0.84375 ) {
						if ( ax < SMALL ) {
							return 1.0 - x; // raise inexact
						}
						z = x * x;
						r = PPC + ( z*polyvalPP( z ) );
						s = QQC + ( z*polyvalQQ( z ) );
						y = r / s;

						// x < 1/4
						if ( x < 0.25 ) {
							return 1.0 - ( x + (x*y) );
						}
						r = x * y;
						r += x - 0.5;
						return 0.5 - r;
					}
					// 0.84375 <= |x| < 1.25
					if ( ax < 1.25 ) {
						s = ax - 1.0;
						p = PAC + ( s*polyvalPA( s ) );
						q = QAC + ( s*polyvalQA( s ) );
						if ( sign ) {
							return 1.0 + ERX + (p/q);
						}
						return 1.0 - ERX - (p/q);
					}
					// |x| < 28
					if ( ax < 28.0 ) {
						s = 1.0 / (ax*ax);

						// |x| < 1/0.35 ~ 2.857143
						if ( ax < 2.857142857142857 ) {
							r = RAC + ( s*polyvalRA( s ) );
							s = SAC + ( s*polyvalSA( s ) );
						}
						// |x| >= 1/0.35 ~ 2.857143
						else {
							// x < -6
							if ( x < -6.0 ) {
								return 2.0 - TINY; // raise inexact
							}
							r = RBC + ( s*polyvalRB( s ) );
							s = SBC + ( s*polyvalSB( s ) );
						}
						z = setLowWord( ax, 0 ); // pseudo-single (20-bit) precision x
						r = exp( -(z*z) - 0.5625 ) * exp( ((z-ax)*(z+ax)) + (r/s) );
						if ( sign ) {
							return 2.0 - (r/ax);
						}
						return r/ax;
					}
					if ( sign ) {
						return 2.0 - TINY; // raise inexact; ~2
					}
					return TINY * TINY; // raise inexact; ~0
				}


				// EXPORTS //

				module.exports = erfc;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Evaluate the complementary error function.
				*
				* @module @stdlib/math-base-special-erfc
				*
				* @example
				* var erfc = require( '@stdlib/math-base-special-erfc' );
				*
				* var y = erfc( 2.0 );
				* // returns ~0.0047
				*
				* y = erfc( -1.0 );
				* // returns ~1.8427
				*
				* y = erfc( 0.0 );
				* // returns 1.0
				*
				* y = erfc( Infinity );
				* // returns 0.0
				*
				* y = erfc( -Infinity );
				* // returns 2.0
				*
				* y = erfc( NaN );
				* // returns NaN
				*/

				// MODULES //

				var erfc = require( './erfc.js' );


				// EXPORTS //

				module.exports = erfc;
			},
			"polyval_pa.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 0.41485611868374833;
					}
					return 0.41485611868374833 + (x * (-0.3722078760357013 + (x * (0.31834661990116175 + (x * (-0.11089469428239668 + (x * (0.035478304325618236 + (x * -0.002166375594868791))))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_pp.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return -0.3250421072470015;
					}
					return -0.3250421072470015 + (x * (-0.02848174957559851 + (x * (-0.005770270296489442 + (x * -0.000023763016656650163))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_qa.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 0.10642088040084423;
					}
					return 0.10642088040084423 + (x * (0.540397917702171 + (x * (0.07182865441419627 + (x * (0.12617121980876164 + (x * (0.01363708391202905 + (x * 0.011984499846799107))))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_qq.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 0.39791722395915535;
					}
					return 0.39791722395915535 + (x * (0.0650222499887673 + (x * (0.005081306281875766 + (x * (0.00013249473800432164 + (x * -0.000003960228278775368))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_ra.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return -0.6938585727071818;
					}
					return -0.6938585727071818 + (x * (-10.558626225323291 + (x * (-62.375332450326006 + (x * (-162.39666946257347 + (x * (-184.60509290671104 + (x * (-81.2874355063066 + (x * -9.814329344169145))))))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_rb.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return -0.799283237680523;
					}
					return -0.799283237680523 + (x * (-17.757954917754752 + (x * (-160.63638485582192 + (x * (-637.5664433683896 + (x * (-1025.0951316110772 + (x * -483.5191916086514))))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_sa.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 19.651271667439257;
					}
					return 19.651271667439257 + (x * (137.65775414351904 + (x * (434.56587747522923 + (x * (645.3872717332679 + (x * (429.00814002756783 + (x * (108.63500554177944 + (x * (6.570249770319282 + (x * -0.0604244152148581))))))))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_sb.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 30.33806074348246;
					}
					return 30.33806074348246 + (x * (325.7925129965739 + (x * (1536.729586084437 + (x * (3199.8582195085955 + (x * (2553.0504064331644 + (x * (474.52854120695537 + (x * -22.44095244658582))))))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			}
		}
	},
	"@stdlib/math-base-special-exp": {
		":mainpath:": "./lib",
		"lib": {
			"exp.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_exp.c}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
				*
				* Developed at SunPro, a Sun Microsystems, Inc. business.
				* Permission to use, copy, modify, and distribute this
				* software is freely granted, provided that this notice
				* is preserved.
				* ```
				*/

				'use strict';

				// MODULES //

				var isnan = require( '@stdlib/math-base-assert-is-nan' );
				var trunc = require( '@stdlib/math-base-special-trunc' );
				var NINF = require( '@stdlib/constants-float64-ninf' );
				var PINF = require( '@stdlib/constants-float64-pinf' );
				var expmulti = require( './expmulti.js' );


				// VARIABLES //

				var LN2_HI = 6.93147180369123816490e-01;
				var LN2_LO = 1.90821492927058770002e-10;
				var LOG2_E = 1.44269504088896338700e+00;
				var OVERFLOW = 7.09782712893383973096e+02;
				var UNDERFLOW = -7.45133219101941108420e+02;
				var NEARZERO = 1.0 / (1 << 28); // 2^-28;
				var NEG_NEARZERO = -NEARZERO;


				// MAIN //

				/**
				* Evaluates the natural exponential function.
				*
				* ## Method
				*
				* 1.  We reduce \\( x \\) to an \\( r \\) so that \\( |r| \leq 0.5 \cdot \ln(2) \approx 0.34658 \\). Given \\( x \\), we find an \\( r \\) and integer \\( k \\) such that
				*
				*     ```tex
				*     \begin{align*}
				*     x &= k \cdot \ln(2) + r \\
				*     |r| &\leq 0.5 \cdot \ln(2)
				*     \end{align*}
				*     ```
				*
				*     <!-- <note> -->
				*
				*     \\( r \\) can be represented as \\( r = \mathrm{hi} - \mathrm{lo} \\) for better accuracy.
				*
				*     <!-- </note> -->
				*
				* 2.  We approximate of \\( e^{r} \\) by a special rational function on the interval \\(\[0,0.34658]\\):
				*
				*     ```tex
				*     \begin{align*}
				*     R\left(r^2\right) &= r \cdot \frac{ e^{r}+1 }{ e^{r}-1 } \\
				*     &= 2 + \frac{r^2}{6} - \frac{r^4}{360} + \ldots
				*     \end{align*}
				*     ```
				*
				*     We use a special Remes algorithm on \\(\[0,0.34658]\\) to generate a polynomial of degree \\(5\\) to approximate \\(R\\). The maximum error of this polynomial approximation is bounded by \\(2^{-59}\\). In other words,
				*
				*     ```tex
				*     R(z) \sim 2 + P_1 z + P_2 z^2 + P_3 z^3 + P_4 z^4 + P_5 z^5
				*     ```
				*
				*     where \\( z = r^2 \\) and
				*
				*     ```tex
				*     \left|  2 + P_1 z + \ldots + P_5 z^5  - R(z) \right| \leq 2^{-59}
				*     ```
				*
				*     <!-- <note> -->
				*
				*     The values of \\( P_1 \\) to \\( P_5 \\) are listed in the source code.
				*
				*     <!-- </note> -->
				*
				*     The computation of \\( e^{r} \\) thus becomes
				*
				*     ```tex
				*     \begin{align*}
				*     e^{r} &= 1 + \frac{2r}{R-r} \\
				*           &= 1 + r + \frac{r \cdot R_1(r)}{2 - R_1(r)}\ \text{for better accuracy}
				*     \end{align*}
				*     ```
				*
				*     where
				*
				*     ```tex
				*     R_1(r) = r - P_1\ r^2 + P_2\ r^4 + \ldots + P_5\ r^{10}
				*     ```
				*
				* 3.  We scale back to obtain \\( e^{x} \\). From step 1, we have
				*
				*     ```tex
				*     e^{x} = 2^k e^{r}
				*     ```
				*
				*
				* ## Special Cases
				*
				* ```tex
				* \begin{align*}
				* e^\infty &= \infty \\
				* e^{-\infty} &= 0 \\
				* e^{\mathrm{NaN}} &= \mathrm{NaN} \\
				* e^0 &= 1\ \mathrm{is\ exact\ for\ finite\ argument\ only}
				* \end{align*}
				* ```
				*
				* ## Notes
				*
				* -   According to an error analysis, the error is always less than \\(1\\) ulp (unit in the last place).
				*
				* -   For an IEEE double,
				*
				*     -   if \\(x > 7.09782712893383973096\mbox{e+}02\\), then \\(e^{x}\\) overflows
				*     -   if \\(x < -7.45133219101941108420\mbox{e+}02\\), then \\(e^{x}\\) underflows
				*
				* -   The hexadecimal values included in the source code are the intended ones for the used constants. Decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the intended hexadecimal values.
				*
				*
				* @param {number} x - input value
				* @returns {number} function value
				*
				* @example
				* var v = exp( 4.0 );
				* // returns ~54.5982
				*
				* @example
				* var v = exp( -9.0 );
				* // returns ~1.234e-4
				*
				* @example
				* var v = exp( 0.0 );
				* // returns 1.0
				*
				* @example
				* var v = exp( NaN );
				* // returns NaN
				*/
				function exp( x ) {
					var hi;
					var lo;
					var k;

					if ( isnan( x ) || x === PINF ) {
						return x;
					}
					if ( x === NINF ) {
						return 0.0;
					}
					if ( x > OVERFLOW ) {
						return PINF;
					}
					if ( x < UNDERFLOW ) {
						return 0.0;
					}
					if (
						x > NEG_NEARZERO &&
						x < NEARZERO
					) {
						return 1.0 + x;
					}
					// Reduce and compute `r = hi - lo` for extra precision.
					if ( x < 0.0 ) {
						k = trunc( (LOG2_E*x) - 0.5 );
					} else {
						k = trunc( (LOG2_E*x) + 0.5 );
					}
					hi = x - (k*LN2_HI);
					lo = k * LN2_LO;

					return expmulti( hi, lo, k );
				}


				// EXPORTS //

				module.exports = exp;
			},
			"expmulti.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_exp.c}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
				*
				* Developed at SunPro, a Sun Microsystems, Inc. business.
				* Permission to use, copy, modify, and distribute this
				* software is freely granted, provided that this notice
				* is preserved.
				* ```
				*/

				'use strict';

				// MODULES //

				var ldexp = require( '@stdlib/math-base-special-ldexp' );
				var polyvalP = require( './polyval_p.js' );


				// MAIN //

				/**
				* Computes \\(e^{r} 2^k\\) where \\(r = \mathrm{hi} - \mathrm{lo}\\) and \\(|r| \leq \ln(2)/2\\).
				*
				* @private
				* @param {number} hi - upper bound
				* @param {number} lo - lower bound
				* @param {integer} k - power of 2
				* @returns {number} function value
				*/
				function expmulti( hi, lo, k ) {
					var r;
					var t;
					var c;
					var y;

					r = hi - lo;
					t = r * r;
					c = r - ( t*polyvalP( t ) );
					y = 1.0 - ( lo - ( (r*c)/(2.0-c) ) - hi);

					return ldexp( y, k );
				}


				// EXPORTS //

				module.exports = expmulti;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Evaluate the natural exponential function.
				*
				* @module @stdlib/math-base-special-exp
				*
				* @example
				* var exp = require( '@stdlib/math-base-special-exp' );
				*
				* var v = exp( 4.0 );
				* // returns ~54.5982
				*
				* v = exp( -9.0 );
				* // returns ~1.234e-4
				*
				* v = exp( 0.0 );
				* // returns 1.0
				*
				* v = exp( NaN );
				* // returns NaN
				*/

				// MODULES //

				var exp = require( './exp.js' );


				// EXPORTS //

				module.exports = exp;
			},
			"polyval_p.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2021 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 0.16666666666666602;
					}
					return 0.16666666666666602 + (x * (-0.0027777777777015593 + (x * (0.00006613756321437934 + (x * (-0.0000016533902205465252 + (x * 4.1381367970572385e-8))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			}
		}
	},
	"@stdlib/math-base-special-expm1": {
		":mainpath:": "./lib",
		"lib": {
			"expm1.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The following copyright, license, and long comment were part of the original implementation available as part of [FDLIBM]{@link http://www.netlib.org/fdlibm/s_expm1.c}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
				*
				* Developed at SunPro, a Sun Microsystems, Inc. business.
				* Permission to use, copy, modify, and distribute this
				* software is freely granted, provided that this notice
				* is preserved.
				* ```
				*/

				'use strict';

				// MODULES //

				var isnan = require( '@stdlib/math-base-assert-is-nan' );
				var getHighWord = require( '@stdlib/number-float64-base-get-high-word' );
				var setHighWord = require( '@stdlib/number-float64-base-set-high-word' );
				var PINF = require( '@stdlib/constants-float64-pinf' );
				var NINF = require( '@stdlib/constants-float64-ninf' );
				var FLOAT64_EXPONENT_BIAS = require( '@stdlib/constants-float64-exponent-bias' );
				var HALF_LN2 = require( '@stdlib/constants-float64-half-ln-two' );
				var polyval = require( './polyval_q.js' );


				// VARIABLES //

				var OVERFLOW_THRESHOLD = 7.09782712893383973096e+02; // 0x40862E42 0xFEFA39EF

				// High and low words of ln(2):
				var LN2_HI = 6.93147180369123816490e-01; // 0x3FE62E42 0xFEE00000
				var LN2_LO = 1.90821492927058770002e-10; // 0x3DEA39EF 0x35793C76

				// 1 / ln(2):
				var LN2_INV = 1.44269504088896338700e+00; // 0x3FF71547 0x652B82FE

				// ln(2) * 56:
				var LN2x56 = 3.88162421113569373274e+01; // 0x4043687A 0x9F1AF2B1

				// ln(2) * 1.5:
				var LN2_HALFX3 = 1.03972077083991796413e+00; // 0x3FF0A2B2 0x3F3BAB73


				// MAIN //

				/**
				* Computes `exp(x) - 1`.
				*
				* ## Method
				*
				* 1.  Given \\(x\\), we use argument reduction to find \\(r\\) and an integer \\(k\\) such that
				*
				*     ```tex
				*     x = k \cdot \ln(2) + r
				*     ```
				*
				*     where
				*
				*     ```tex
				*     |r| \leq \frac{\ln(2)}{2} \approx 0.34658
				*     ```
				*
				*     <!-- <note> -->
				*
				*     A correction term \\(c\\) will need to be computed to compensate for the error in \\(r\\) when rounded to a floating-point number.
				*
				*     <!-- </note> -->
				*
				* 2.  To approximate \\(\operatorname{expm1}(r)\\), we use a special rational function on the interval \\(\[0,0.34658]\\). Since
				*
				*     ```tex
				*     r \frac{e^r + 1}{e^r - 1} = 2 + \frac{r^2}{6} - \frac{r^4}{360} + \ldots
				*     ```
				*
				*     we define \\(\operatorname{R1}(r^2)\\) by
				*
				*     ```tex
				*     r \frac{e^r + 1}{e^r - 1} = 2 + \frac{r^2}{6} \operatorname{R1}(r^2)
				*     ```
				*
				*     That is,
				*
				*     ```tex
				*     \begin{align*}
				*     \operatorname{R1}(r^2) &= \frac{6}{r} \biggl(\frac{e^r+1}{e^r-1} - \frac{2}{r}\biggr) \\
				*     &= \frac{6}{r} \biggl( 1 + 2 \biggl(\frac{1}{e^r-1} - \frac{1}{r}\biggr)\biggr) \\
				*     &= 1 - \frac{r^2}{60} + \frac{r^4}{2520} - \frac{r^6}{100800} + \ldots
				*     \end{align*}
				*     ```
				*
				*     We use a special Remes algorithm on \\(\[0,0.347]\\) to generate a polynomial of degree \\(5\\) in \\(r^2\\) to approximate \\(\mathrm{R1}\\). The maximum error of this polynomial approximation is bounded by \\(2^{-61}\\). In other words,
				*
				*     ```tex
				*     \operatorname{R1}(z) \approx 1 + \mathrm{Q1} \cdot z + \mathrm{Q2} \cdot z^2 + \mathrm{Q3} \cdot z^3 + \mathrm{Q4} \cdot z^4 + \mathrm{Q5} \cdot z^5
				*     ```
				*
				*     where
				*
				*     ```tex
				*     \begin{align*}
				*     \mathrm{Q1} &= -1.6666666666666567384\mbox{e-}2 \\
				*     \mathrm{Q2} &= 3.9682539681370365873\mbox{e-}4 \\
				*     \mathrm{Q3} &= -9.9206344733435987357\mbox{e-}6 \\
				*     \mathrm{Q4} &= 2.5051361420808517002\mbox{e-}7 \\
				*     \mathrm{Q5} &= -6.2843505682382617102\mbox{e-}9
				*     \end{align*}
				*     ```
				*
				*     where \\(z = r^2\\) and the values of \\(\mathrm{Q1}\\) to \\(\mathrm{Q5}\\) are listed in the source. The error is bounded by
				*
				*     ```tex
				*     \biggl| 1 + \mathrm{Q1} \cdot z + \ldots + \mathrm{Q5} \cdot z - \operatorname{R1}(z) \biggr| \leq 2^{-61}
				*     ```
				*
				*     \\(\operatorname{expm1}(r) = e^r - 1\\) is then computed by the following specific way which minimizes the accumulated rounding error
				*
				*     ```tex
				*     \operatorname{expm1}(r) = r + \frac{r^2}{2} + \frac{r^3}{2} \biggl( \frac{3 - (\mathrm{R1} + \mathrm{R1} \cdot \frac{r}{2})}{6 - r ( 3 - \mathrm{R1} \cdot \frac{r}{2})} \biggr)
				*     ```
				*
				*     To compensate for the error in the argument reduction, we use
				*
				*     ```tex
				*     \begin{align*}
				*     \operatorname{expm1}(r+c) &= \operatorname{expm1}(r) + c + \operatorname{expm1}(r) \cdot c \\
				*     &\approx \operatorname{expm1}(r) + c + rc
				*     \end{align*}
				*     ```
				*
				*     Thus, \\(c + rc\\) will be added in as the correction terms for \\(\operatorname{expm1}(r+c)\\). Now, we can rearrange the term to avoid optimization screw up.
				*
				*     ```tex
				*     \begin{align*}
				*     \operatorname{expm1}(r+c) &\approx r - \biggl( \biggl( r + \biggl( \frac{r^2}{2} \biggl( \frac{\mathrm{R1} - (3 - \mathrm{R1} \cdot \frac{r}{2})}{6 - r (3 - \mathrm{R1} \cdot \frac{r}{2})} \biggr) - c \biggr) - c \biggr) - \frac{r^2}{2} \biggr) \\
				*     &= r - \mathrm{E}
				*     \end{align*}
				*     ```
				*
				* 3.  To scale back to obtain \\(\operatorname{expm1}(x)\\), we have (from step 1)
				*
				*     ```tex
				*     \operatorname{expm1}(x) = \begin{cases}
				*     2^k  (\operatorname{expm1}(r) + 1) - 1 \\
				*     2^k (\operatorname{expm1}(r) + (1-2^{-k}))
				*     \end{cases}
				*     ```
				*
				* ## Special Cases
				*
				* ```tex
				* \begin{align*}
				* \operatorname{expm1}(\infty) &= \infty \\
				* \operatorname{expm1}(-\infty) &= -1 \\
				* \operatorname{expm1}(\mathrm{NaN}) &= \mathrm{NaN}
				* \end{align*}
				* ```
				*
				*
				* ## Notes
				*
				* -   For finite arguments, only \\(\operatorname{expm1}(0) = 0\\) is exact.
				*
				* -   To save one multiplication, we scale the coefficient \\(\mathrm{Qi}\\) to \\(\mathrm{Qi} \cdot {2^i}\\) and replace \\(z\\) by \\(\frac{x^2}{2}\\).
				*
				* -   To achieve maximum accuracy, we compute \\(\operatorname{expm1}(x)\\) by
				*
				*     -   if \\(x < -56 \cdot \ln(2)\\), return \\(-1.0\\) (raise inexact if \\(x\\) does not equal \\(\infty\\))
				*
				*     -   if \\(k = 0\\), return \\(r-\mathrm{E}\\)
				*
				*     -   if \\(k = -1\\), return \\(\frac{(r-\mathrm{E})-1}{2}\\)
				*
				*     -   if \\(k = 1\\),
				*
				*         -   if \\(r < -0.25\\), return \\(2((r+0.5)- \mathrm{E})\\)
				*         -   else return \\(1+2(r-\mathrm{E})\\)
				*
				*     -   if \\(k < -2\\) or \\(k > 56\\), return \\(2^k(1-(\mathrm{E}-r)) - 1\\) (or \\(e^x-1\\))
				*
				*     -   if \\(k \leq 20\\), return \\(2^k((1-2^{-k})-(\mathrm{E}-r))\\)
				*
				*     -   else return \\(2^k(1-((\mathrm{E}+2^{-k})-r))\\)
				*
				* -   For IEEE 754 double, if \\(x > 7.09782712893383973096\mbox{e+}02\\), then \\(\operatorname{expm1}(x)\\) will overflow.
				*
				* -   The hexadecimal values listed in the source are the intended ones for the implementation constants. Decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the intended hexadecimal values.
				*
				* -   According to an error analysis, the error is always less than \\(1\\) ulp (unit in the last place).
				*
				*
				* @param {number} x - input value
				* @returns {number} function value
				*
				* @example
				* var v = expm1( 0.2 );
				* // returns ~0.221
				*
				* @example
				* var v = expm1( -9.0 );
				* // returns ~-0.9999
				*
				* @example
				* var v = expm1( 0.0 );
				* // returns 0.0
				*
				* @example
				* var v = expm1( NaN );
				* // returns NaN
				*/
				function expm1( x ) {
					var halfX;
					var sign;
					var hi;
					var lo;
					var hx;
					var r1;
					var y;
					var z;
					var c;
					var t;
					var e;
					var k;

					if ( x === PINF || isnan( x ) ) {
						return x;
					}
					if ( x === NINF ) {
						return -1.0;
					}
					if ( x === 0.0 ) {
						return x; // handles +-0 (IEEE 754-2008)
					}
					// Set y = |x|:
					if ( x < 0.0 ) {
						sign = true;
						y = -x;
					} else {
						sign = false;
						y = x;
					}
					// Filter out huge and non-finite arguments...
					if ( y >= LN2x56 ) { // if |x| >= 56*ln(2)
						if ( sign ) { // if x <= -56*ln(2)
							return -1.0;
						}
						if ( y >= OVERFLOW_THRESHOLD ) { // if |x| >= 709.78...
							return PINF;
						}
					}
					// Extract the more significant bits from |x|:
					hx = getHighWord( y )|0; // asm type annotation

					// Argument reduction...
					if ( y > HALF_LN2 ) { // if |x| > 0.5*ln(2)
						if ( y < LN2_HALFX3 ) { // if |x| < 1.5*ln(2)
							if ( sign ) {
								hi = x + LN2_HI;
								lo = -LN2_LO;
								k = -1;
							} else {
								hi = x - LN2_HI;
								lo = LN2_LO;
								k = 1;
							}
						} else {
							if ( sign ) {
								k = (LN2_INV*x) - 0.5;
							} else {
								k = (LN2_INV*x) + 0.5;
							}
							k |= 0; // use a bitwise OR to cast `k` to an integer (see also asm.js type annotations: http://asmjs.org/spec/latest/#annotations)
							t = k;
							hi = x - (t*LN2_HI); // t*ln2_hi is exact here
							lo = t * LN2_LO;
						}
						x = hi - lo;
						c = (hi-x) - lo;
					}
					// if |x| < 2**-54 => high word: 0 01111001001 00000000000000000000 => 0x3c900000 = 1016070144  => exponent = 01111001001 = 969 = 1023-54
					else if ( hx < 1016070144 ) {
						return x;
					}
					else {
						k = 0;
					}
					// x is now in primary range...
					halfX = 0.5 * x;
					z = x * halfX;

					r1 = 1.0 + ( z * polyval( z ) );

					t = 3.0 - (r1*halfX);
					e = z * ( (r1-t) / (6.0 - (x*t)) );
					if ( k === 0 ) {
						return x - ( (x*e) - z );	// c is 0
					}
					e = ( x * (e-c) ) - c;
					e -= z;
					if ( k === -1 ) {
						return ( 0.5*(x-e) )- 0.5;
					}
					if ( k === 1 ) {
						if ( x < -0.25 ) {
							return -2.0 * ( e - (x+0.5) );
						}
						return 1 + ( 2.0 * (x-e) );
					}
					if ( k <= -2 || k > 56 ) { // suffice to return exp(x)-1
						y = 1.0 - (e-x);

						// Add k to y's exponent:
						hi = (getHighWord( y ) + (k<<20))|0; // asm type annotation
						y = setHighWord( y, hi );

						return y - 1.0;
					}
					t = 1.0;
					if ( k < 20 ) {
						// 0x3ff00000 - (0x200000>>k) = 1072693248 - (0x200000>>k) => 0x200000 = 0 00000000010 00000000000000000000
						hi = (1072693248 - (0x200000>>k))|0; // asm type annotation
						t = setHighWord( t, hi ); // t=1-2^-k
						y = t - (e-x);
					} else {
						hi = ( (FLOAT64_EXPONENT_BIAS-k)<<20 )|0; // asm type annotation
						t = setHighWord( t, hi ); // t=2^-k
						y = x - (e+t);
						y += 1.0;
					}
					// Add k to y's exponent:
					hi = (getHighWord( y ) + (k<<20))|0; // asm type annotation
					return setHighWord( y, hi );
				}


				// EXPORTS //

				module.exports = expm1;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Compute `exp(x) - 1`.
				*
				* @module @stdlib/math-base-special-expm1
				*
				* @example
				* var expm1 = require( '@stdlib/math-base-special-expm1' );
				*
				* var v = expm1( 0.2 );
				* // returns ~0.221
				*
				* v = expm1( -9.0 );
				* // returns ~-0.999
				*
				* v = expm1( 0.0 );
				* // returns 0.0
				*
				* v = expm1( NaN );
				* // returns NaN
				*/

				// MODULES //

				var expm1 = require( './expm1.js' );


				// EXPORTS //

				module.exports = expm1;
			},
			"polyval_q.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return -0.03333333333333313;
					}
					return -0.03333333333333313 + (x * (0.0015873015872548146 + (x * (-0.0000793650757867488 + (x * (0.000004008217827329362 + (x * -2.0109921818362437e-7))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			}
		}
	},
	"@stdlib/math-base-special-factorial": {
		":mainpath:": "./lib",
		"lib": {
			"factorial.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var isnan = require( '@stdlib/math-base-assert-is-nan' );
				var isInteger = require( '@stdlib/math-base-assert-is-integer' );
				var gamma = require( '@stdlib/math-base-special-gamma' );
				var PINF = require( '@stdlib/constants-float64-pinf' );
				var FACTORIALS = require( './factorials.json' );


				// VARIABLES //

				var MAX_FACTORIAL = 170; // TODO: consider extracting as a constant


				// MAIN //

				/**
				* Evaluates the factorial of `x`.
				*
				* @param {number} x - input value
				* @returns {number} factorial
				*
				* @example
				* var v = factorial( 3.0 );
				* // returns 6.0
				*
				* @example
				* var v = factorial( -1.5 );
				* // returns ~-3.545
				*
				* @example
				* var v = factorial( -0.5 );
				* // returns ~1.772
				*
				* @example
				* var v = factorial( 0.5 );
				* // returns ~0.886
				*
				* @example
				* var v = factorial( -10.0 );
				* // returns NaN
				*
				* @example
				* var v = factorial( 171.0 );
				* // returns Infinity
				*
				* @example
				* var v = factorial( NaN );
				* // returns NaN
				*/
				function factorial( x ) {
					if ( isnan( x ) ) {
						return NaN;
					}
					if ( isInteger( x ) ) {
						if ( x < 0 ) {
							return NaN;
						}
						if ( x <= MAX_FACTORIAL ) {
							return FACTORIALS[ x ];
						}
						return PINF;
					}
					return gamma( x + 1.0 );
				}


				// EXPORTS //

				module.exports = factorial;
			},
			"factorials.json": function (exports, module, require) {
				module.exports = [
					1,
					1,
					2,
					6,
					24,
					120,
					720,
					5040,
					40320,
					362880.0,
					3628800.0,
					39916800.0,
					479001600.0,
					6227020800.0,
					87178291200.0,
					1307674368000.0,
					20922789888000.0,
					355687428096000.0,
					6402373705728000.0,
					121645100408832000.0,
					0.243290200817664e19,
					0.5109094217170944e20,
					0.112400072777760768e22,
					0.2585201673888497664e23,
					0.62044840173323943936e24,
					0.15511210043330985984e26,
					0.403291461126605635584e27,
					0.10888869450418352160768e29,
					0.304888344611713860501504e30,
					0.8841761993739701954543616e31,
					0.26525285981219105863630848e33,
					0.822283865417792281772556288e34,
					0.26313083693369353016721801216e36,
					0.868331761881188649551819440128e37,
					0.29523279903960414084761860964352e39,
					0.103331479663861449296666513375232e41,
					0.3719933267899012174679994481508352e42,
					0.137637530912263450463159795815809024e44,
					0.5230226174666011117600072241000742912e45,
					0.203978820811974433586402817399028973568e47,
					0.815915283247897734345611269596115894272e48,
					0.3345252661316380710817006205344075166515e50,
					0.1405006117752879898543142606244511569936e52,
					0.6041526306337383563735513206851399750726e53,
					0.265827157478844876804362581101461589032e55,
					0.1196222208654801945619631614956577150644e57,
					0.5502622159812088949850305428800254892962e58,
					0.2586232415111681806429643551536119799692e60,
					0.1241391559253607267086228904737337503852e62,
					0.6082818640342675608722521633212953768876e63,
					0.3041409320171337804361260816606476884438e65,
					0.1551118753287382280224243016469303211063e67,
					0.8065817517094387857166063685640376697529e68,
					0.427488328406002556429801375338939964969e70,
					0.2308436973392413804720927426830275810833e72,
					0.1269640335365827592596510084756651695958e74,
					0.7109985878048634518540456474637249497365e75,
					0.4052691950487721675568060190543232213498e77,
					0.2350561331282878571829474910515074683829e79,
					0.1386831185456898357379390197203894063459e81,
					0.8320987112741390144276341183223364380754e82,
					0.507580213877224798800856812176625227226e84,
					0.3146997326038793752565312235495076408801e86,
					0.1982608315404440064116146708361898137545e88,
					0.1268869321858841641034333893351614808029e90,
					0.8247650592082470666723170306785496252186e91,
					0.5443449390774430640037292402478427526443e93,
					0.3647111091818868528824985909660546442717e95,
					0.2480035542436830599600990418569171581047e97,
					0.1711224524281413113724683388812728390923e99,
					0.1197857166996989179607278372168909873646e101,
					0.8504785885678623175211676442399260102886e102,
					0.6123445837688608686152407038527467274078e104,
					0.4470115461512684340891257138125051110077e106,
					0.3307885441519386412259530282212537821457e108,
					0.2480914081139539809194647711659403366093e110,
					0.188549470166605025498793226086114655823e112,
					0.1451830920282858696340707840863082849837e114,
					0.1132428117820629783145752115873204622873e116,
					0.8946182130782975286851441715398316520698e117,
					0.7156945704626380229481153372318653216558e119,
					0.5797126020747367985879734231578109105412e121,
					0.4753643337012841748421382069894049466438e123,
					0.3945523969720658651189747118012061057144e125,
					0.3314240134565353266999387579130131288001e127,
					0.2817104114380550276949479442260611594801e129,
					0.2422709538367273238176552320344125971528e131,
					0.210775729837952771721360051869938959523e133,
					0.1854826422573984391147968456455462843802e135,
					0.1650795516090846108121691926245361930984e137,
					0.1485715964481761497309522733620825737886e139,
					0.1352001527678402962551665687594951421476e141,
					0.1243841405464130725547532432587355307758e143,
					0.1156772507081641574759205162306240436215e145,
					0.1087366156656743080273652852567866010042e147,
					0.103299784882390592625997020993947270954e149,
					0.9916779348709496892095714015418938011582e150,
					0.9619275968248211985332842594956369871234e152,
					0.942689044888324774562618574305724247381e154,
					0.9332621544394415268169923885626670049072e156,
					0.9332621544394415268169923885626670049072e158,
					0.9425947759838359420851623124482936749562e160,
					0.9614466715035126609268655586972595484554e162,
					0.990290071648618040754671525458177334909e164,
					0.1029901674514562762384858386476504428305e167,
					0.1081396758240290900504101305800329649721e169,
					0.1146280563734708354534347384148349428704e171,
					0.1226520203196137939351751701038733888713e173,
					0.132464181945182897449989183712183259981e175,
					0.1443859583202493582204882102462797533793e177,
					0.1588245541522742940425370312709077287172e179,
					0.1762952551090244663872161047107075788761e181,
					0.1974506857221074023536820372759924883413e183,
					0.2231192748659813646596607021218715118256e185,
					0.2543559733472187557120132004189335234812e187,
					0.2925093693493015690688151804817735520034e189,
					0.339310868445189820119825609358857320324e191,
					0.396993716080872089540195962949863064779e193,
					0.4684525849754290656574312362808384164393e195,
					0.5574585761207605881323431711741977155627e197,
					0.6689502913449127057588118054090372586753e199,
					0.8094298525273443739681622845449350829971e201,
					0.9875044200833601362411579871448208012564e203,
					0.1214630436702532967576624324188129585545e206,
					0.1506141741511140879795014161993280686076e208,
					0.1882677176888926099743767702491600857595e210,
					0.237217324288004688567714730513941708057e212,
					0.3012660018457659544809977077527059692324e214,
					0.3856204823625804217356770659234636406175e216,
					0.4974504222477287440390234150412680963966e218,
					0.6466855489220473672507304395536485253155e220,
					0.8471580690878820510984568758152795681634e222,
					0.1118248651196004307449963076076169029976e225,
					0.1487270706090685728908450891181304809868e227,
					0.1992942746161518876737324194182948445223e229,
					0.269047270731805048359538766214698040105e231,
					0.3659042881952548657689727220519893345429e233,
					0.5012888748274991661034926292112253883237e235,
					0.6917786472619488492228198283114910358867e237,
					0.9615723196941089004197195613529725398826e239,
					0.1346201247571752460587607385894161555836e242,
					0.1898143759076170969428526414110767793728e244,
					0.2695364137888162776588507508037290267094e246,
					0.3854370717180072770521565736493325081944e248,
					0.5550293832739304789551054660550388118e250,
					0.80479260574719919448490292577980627711e252,
					0.1174997204390910823947958271638517164581e255,
					0.1727245890454638911203498659308620231933e257,
					0.2556323917872865588581178015776757943262e259,
					0.380892263763056972698595524350736933546e261,
					0.571338395644585459047893286526105400319e263,
					0.8627209774233240431623188626544191544816e265,
					0.1311335885683452545606724671234717114812e268,
					0.2006343905095682394778288746989117185662e270,
					0.308976961384735088795856467036324046592e272,
					0.4789142901463393876335775239063022722176e274,
					0.7471062926282894447083809372938315446595e276,
					0.1172956879426414428192158071551315525115e279,
					0.1853271869493734796543609753051078529682e281,
					0.2946702272495038326504339507351214862195e283,
					0.4714723635992061322406943211761943779512e285,
					0.7590705053947218729075178570936729485014e287,
					0.1229694218739449434110178928491750176572e290,
					0.2004401576545302577599591653441552787813e292,
					0.3287218585534296227263330311644146572013e294,
					0.5423910666131588774984495014212841843822e296,
					0.9003691705778437366474261723593317460744e298,
					0.1503616514864999040201201707840084015944e301,
					0.2526075744973198387538018869171341146786e303,
					0.4269068009004705274939251888899566538069e305,
					0.7257415615307998967396728211129263114717e307
				];
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Evaluate the factorial function.
				*
				* @module @stdlib/math-base-special-factorial
				*
				* @example
				* var factorial = require( '@stdlib/math-base-special-factorial' );
				*
				* var v = factorial( 3.0 );
				* // returns 6.0
				*
				* v = factorial( -1.5 );
				* // returns ~-3.545
				*
				* v = factorial( -0.5 );
				* // returns ~1.772
				*
				* v = factorial( 0.5 );
				* // returns ~0.886
				*
				* v = factorial( -10.0 );
				* // returns NaN
				*
				* v = factorial( 171.0 );
				* // returns Infinity
				*
				* v = factorial( NaN );
				* // returns NaN
				*/

				// MODULES //

				var factorial = require( './factorial.js' );


				// EXPORTS //

				module.exports = factorial;
			}
		}
	},
	"@stdlib/math-base-special-floor": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Round a double-precision floating-point number toward negative infinity.
				*
				* @module @stdlib/math-base-special-floor
				*
				* @example
				* var floor = require( '@stdlib/math-base-special-floor' );
				*
				* var v = floor( -4.2 );
				* // returns -5.0
				*
				* v = floor( 9.99999 );
				* // returns 9.0
				*
				* v = floor( 0.0 );
				* // returns 0.0
				*
				* v = floor( NaN );
				* // returns NaN
				*/

				// MODULES //

				var floor = require( './main.js' );


				// EXPORTS //

				module.exports = floor;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// TODO: implementation (?)

				/**
				* Rounds a double-precision floating-point number toward negative infinity.
				*
				* @param {number} x - input value
				* @returns {number} rounded value
				*
				* @example
				* var v = floor( -4.2 );
				* // returns -5.0
				*
				* @example
				* var v = floor( 9.99999 );
				* // returns 9.0
				*
				* @example
				* var v = floor( 0.0 );
				* // returns 0.0
				*
				* @example
				* var v = floor( NaN );
				* // returns NaN
				*/
				var floor = Math.floor; // eslint-disable-line stdlib/no-builtin-math


				// EXPORTS //

				module.exports = floor;
			}
		}
	},
	"@stdlib/math-base-special-gamma": {
		":mainpath:": "./lib",
		"lib": {
			"gamma.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
				*
				* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
				*
				* Stephen L. Moshier
				* moshier@na-net.ornl.gov
				* ```
				*/

				'use strict';

				// MODULES //

				var isnan = require( '@stdlib/math-base-assert-is-nan' );
				var isInteger = require( '@stdlib/math-base-assert-is-integer' );
				var isNegativeZero = require( '@stdlib/math-base-assert-is-negative-zero' );
				var abs = require( '@stdlib/math-base-special-abs' );
				var floor = require( '@stdlib/math-base-special-floor' );
				var sin = require( '@stdlib/math-base-special-sin' );
				var PINF = require( '@stdlib/constants-float64-pinf' );
				var NINF = require( '@stdlib/constants-float64-ninf' );
				var PI = require( '@stdlib/constants-float64-pi' );
				var stirlingApprox = require( './stirling_approximation.js' );
				var smallApprox = require( './small_approximation.js' );
				var rateval = require( './rational_pq.js' );


				// MAIN //

				/**
				* Evaluates the gamma function.
				*
				* ## Method
				*
				* 1.  Arguments \\(|x| \leq 34\\) are reduced by recurrence and the function approximated by a rational function of degree \\(6/7\\) in the interval \\((2,3)\\).
				* 2.  Large negative arguments are made positive using a reflection formula.
				* 3.  Large arguments are handled by Stirling's formula.
				*
				*
				* ## Notes
				*
				* -   Relative error:
				*
				*     | arithmetic | domain    | # trials | peak    | rms     |
				*     |:----------:|:---------:|:--------:|:-------:|:-------:|
				*     | DEC        | -34,34    | 10000    | 1.3e-16 | 2.5e-17 |
				*     | IEEE       | -170,-33  | 20000    | 2.3e-15 | 3.3e-16 |
				*     | IEEE       | -33, 33   | 20000    | 9.4e-16 | 2.2e-16 |
				*     | IEEE       | 33, 171.6 | 20000    | 2.3e-15 | 3.2e-16 |
				*
				* -   Error for arguments outside the test range will be larger owing to error amplification by the exponential function.
				*
				*
				* @param {number} x - input value
				* @returns {number} function value
				*
				* @example
				* var v = gamma( 4.0 );
				* // returns 6.0
				*
				* @example
				* var v = gamma( -1.5 );
				* // returns ~2.363
				*
				* @example
				* var v = gamma( -0.5 );
				* // returns ~-3.545
				*
				* @example
				* var v = gamma( 0.5 );
				* // returns ~1.772
				*
				* @example
				* var v = gamma( 0.0 );
				* // returns Infinity
				*
				* @example
				* var v = gamma( -0.0 );
				* // returns -Infinity
				*
				* @example
				* var v = gamma( NaN );
				* // returns NaN
				*/
				function gamma( x ) {
					var sign;
					var q;
					var p;
					var z;
					if (
						(isInteger( x ) && x < 0) ||
						x === NINF ||
						isnan( x )
					) {
						return NaN;
					}
					if ( x === 0.0 ) {
						if ( isNegativeZero( x ) ) {
							return NINF;
						}
						return PINF;
					}
					if ( x > 171.61447887182298 ) {
						return PINF;
					}
					if ( x < -170.5674972726612 ) {
						return 0.0;
					}
					q = abs( x );
					if ( q > 33.0 ) {
						if ( x >= 0.0 ) {
							return stirlingApprox( x );
						}
						p = floor( q );

						// Check whether `x` is even...
						if ( (p&1) === 0 ) {
							sign = -1.0;
						} else {
							sign = 1.0;
						}
						z = q - p;
						if ( z > 0.5 ) {
							p += 1.0;
							z = q - p;
						}
						z = q * sin( PI * z );
						return sign * PI / ( abs(z)*stirlingApprox(q) );
					}
					// Reduce `x`...
					z = 1.0;
					while ( x >= 3.0 ) {
						x -= 1.0;
						z *= x;
					}
					while ( x < 0.0 ) {
						if ( x > -1.0e-9 ) {
							return smallApprox( x, z );
						}
						z /= x;
						x += 1.0;
					}
					while ( x < 2.0 ) {
						if ( x < 1.0e-9 ) {
							return smallApprox( x, z );
						}
						z /= x;
						x += 1.0;
					}
					if ( x === 2.0 ) {
						return z;
					}
					x -= 2.0;
					return z * rateval( x );
				}


				// EXPORTS //

				module.exports = gamma;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Evaluate the gamma function.
				*
				* @module @stdlib/math-base-special-gamma
				*
				* @example
				* var gamma = require( '@stdlib/math-base-special-gamma' );
				*
				* var v = gamma( 4.0 );
				* // returns 6.0
				*
				* v = gamma( -1.5 );
				* // returns ~2.363
				*
				* v = gamma( -0.5 );
				* // returns ~-3.545
				*
				* v = gamma( 0.5 );
				* // returns ~1.772
				*
				* v = gamma( 0.0 );
				* // returns Infinity
				*
				* v = gamma( -0.0 );
				* // returns -Infinity
				*
				* v = gamma( NaN );
				* // returns NaN
				*/

				// MODULES //

				var gamma = require( './gamma.js' );


				// EXPORTS //

				module.exports = gamma;
			},
			"polyval_s.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 0.08333333333334822;
					}
					return 0.08333333333334822 + (x * (0.0034722222160545866 + (x * (-0.0026813261780578124 + (x * (-0.00022954996161337813 + (x * 0.0007873113957930937))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"rational_pq.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
				*
				* ## Notes
				*
				* -   Coefficients should be sorted in ascending degree.
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the rational function
				* @returns {number} evaluated rational function
				*/
				function evalrational( x ) {
					var ax;
					var s1;
					var s2;
					if ( x === 0.0 ) {
						return 1.0;
					}
					if ( x < 0.0 ) {
						ax = -x;
					} else {
						ax = x;
					}
					if ( ax <= 1.0 ) {
						s1 = 1.0 + (x * (0.4942148268014971 + (x * (0.20744822764843598 + (x * (0.04763678004571372 + (x * (0.010421379756176158 + (x * (0.0011913514700658638 + (x * (0.00016011952247675185 + (x * 0.0))))))))))))); // eslint-disable-line max-len
						s2 = 1.0 + (x * (0.0714304917030273 + (x * (-0.23459179571824335 + (x * (0.035823639860549865 + (x * (0.011813978522206043 + (x * (-0.004456419138517973 + (x * (0.0005396055804933034 + (x * -0.000023158187332412014))))))))))))); // eslint-disable-line max-len
					} else {
						x = 1.0 / x;
						s1 = 0.0 + (x * (0.00016011952247675185 + (x * (0.0011913514700658638 + (x * (0.010421379756176158 + (x * (0.04763678004571372 + (x * (0.20744822764843598 + (x * (0.4942148268014971 + (x * 1.0))))))))))))); // eslint-disable-line max-len
						s2 = -0.000023158187332412014 + (x * (0.0005396055804933034 + (x * (-0.004456419138517973 + (x * (0.011813978522206043 + (x * (0.035823639860549865 + (x * (-0.23459179571824335 + (x * (0.0714304917030273 + (x * 1.0))))))))))))); // eslint-disable-line max-len
					}
					return s1 / s2;
				}


				// EXPORTS //

				module.exports = evalrational;
			},
			"small_approximation.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C code, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
				*
				* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
				*
				* Stephen L. Moshier
				* moshier@na-net.ornl.gov
				* ```
				*/

				'use strict';

				// MODULES //

				var EULER = require( '@stdlib/constants-float64-eulergamma' );


				// MAIN //

				/**
				* Evaluates the gamma function using a small-value approximation.
				*
				* @private
				* @param {number} x - input value
				* @param {number} z - scale factor
				* @returns {number} function value
				*/
				function gamma( x, z ) {
					return z / ( (1.0+( EULER*x )) * x );
				}


				// EXPORTS //

				module.exports = gamma;
			},
			"stirling_approximation.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C code, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright 1984, 1987, 1989, 1992, 2000 by Stephen L. Moshier
				*
				* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
				*
				* Stephen L. Moshier
				* moshier@na-net.ornl.gov
				* ```
				*/

				'use strict';

				// MODULES //

				var SQRT_TWO_PI = require( '@stdlib/constants-float64-sqrt-two-pi' );
				var pow = require( '@stdlib/math-base-special-pow' );
				var exp = require( '@stdlib/math-base-special-exp' );
				var polyval = require( './polyval_s.js' );


				// VARIABLES //

				var MAX_STIRLING = 143.01608;


				// MAIN //

				/**
				* Evaluates the gamma function using Stirling's formula. The polynomial is valid for \\(33 \leq x \leq 172\\).
				*
				* @private
				* @param {number} x - input value
				* @returns {number} function value
				*/
				function gamma( x ) {
					var w;
					var y;
					var v;

					w = 1.0 / x;
					w = 1.0 + ( w * polyval( w ) );
					y = exp( x );

					// Check `x` to avoid `pow()` overflow...
					if ( x > MAX_STIRLING ) {
						v = pow( x, ( 0.5*x ) - 0.25 );
						y = v * (v/y);
					} else {
						y = pow( x, x-0.5 ) / y;
					}
					return SQRT_TWO_PI * y * w;
				}


				// EXPORTS //

				module.exports = gamma;
			}
		}
	},
	"@stdlib/math-base-special-gamma-delta-ratio": {
		":mainpath:": "./lib",
		"lib": {
			"gamma_delta_ratio.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* Copyright John Maddock 2006-7, 2013-14.
				* Copyright Paul A. Bristow 2007, 2013-14.
				* Copyright Nikhar Agrawal 2013-14.
				* Copyright Christopher Kormanyos 2013-14.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var abs = require( '@stdlib/math-base-special-abs' );
				var floor = require( '@stdlib/math-base-special-floor' );
				var gamma = require( '@stdlib/math-base-special-gamma' );
				var factorial = require( '@stdlib/math-base-special-factorial' );
				var gammaDeltaRatioLanczos = require( './gamma_delta_ratio_lanczos.js' );


				// VARIABLES //

				var MAX_FACTORIAL = 170; // TODO: consider moving to pkg


				// MAIN //

				/**
				* Computes the ratio of two gamma functions.
				*
				* ## Notes
				*
				* -   Specifically, the function evaluates
				*
				*     ```tex
				*     \frac{ \Gamma( z ) }{ \Gamma( z + \delta ) }
				*     ```
				*
				* @param {number} z - first gamma parameter
				* @param {number} delta - difference
				* @returns {number} gamma ratio
				*
				* @example
				* var y = gammaDeltaRatio( 2.0, 3.0 );
				* // returns ~0.042
				*
				* @example
				* var y = gammaDeltaRatio( 4.0, 0.5 );
				* // returns ~0.516
				*
				* @example
				* var y = gammaDeltaRatio( 100.0, 0.0 );
				* // returns 1.0
				*/
				function gammaDeltaRatio( z, delta ) {
					var result;
					var idelta;
					var iz;

					if ( z <= 0.0 || z + delta <= 0.0 ) {
						// This isn't very sophisticated, or accurate, but it does work:
						return gamma( z ) / gamma( z + delta );
					}
					idelta = floor( delta );
					if ( idelta === delta ) {
						iz = floor( z );
						if ( iz === z ) {
							// As both `z` and `delta` are integers, see if we can use a table lookup:
							if ( z <= MAX_FACTORIAL && ( z + delta <= MAX_FACTORIAL ) ) {
								return factorial( iz - 1.0 ) / factorial( idelta + iz - 1.0 );
							}
						}
						if ( abs(delta) < 20.0 ) {
							// As `delta` is a small integer, we can use a finite product:
							if ( delta === 0.0 ) {
								return 1.0;
							}
							if ( delta < 0.0 ) {
								z -= 1.0;
								result = z;
								delta += 1.0;
								while ( delta !== 0.0 ) {
									z -= 1.0;
									result *= z;
									delta += 1.0;
								}
								return result;
							}
							result = 1.0 / z;
							delta -= 1.0;
							while ( delta !== 0.0 ) {
								z += 1.0;
								result /= z;
								delta -= 1.0;
							}
							return result;
						}
					}
					return gammaDeltaRatioLanczos( z, delta );
				}


				// EXPORTS //

				module.exports = gammaDeltaRatio;
			},
			"gamma_delta_ratio_lanczos.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* Copyright John Maddock 2006-7, 2013-14.
				* Copyright Paul A. Bristow 2007, 2013-14.
				* Copyright Nikhar Agrawal 2013-14.
				* Copyright Christopher Kormanyos 2013-14.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var lanczosSum = require( '@stdlib/math-base-special-gamma-lanczos-sum' );
				var gamma = require( '@stdlib/math-base-special-gamma' );
				var log1p = require( '@stdlib/math-base-special-log1p' );
				var abs = require( '@stdlib/math-base-special-abs' );
				var exp = require( '@stdlib/math-base-special-exp' );
				var pow = require( '@stdlib/math-base-special-pow' );
				var EPSILON = require( '@stdlib/constants-float64-eps' );
				var E = require( '@stdlib/constants-float64-e' );
				var G = require( '@stdlib/constants-float64-gamma-lanczos-g' );


				// VARIABLES //

				var MAX_FACTORIAL = 170; // TODO: consider moving to pkg
				var FACTORIAL_169 = 4.269068009004705e+304;


				// MAIN //

				/**
				* Calculates the ratio of two gamma functions via Lanczos approximation.
				*
				* ## Notes
				*
				* -   When \\( z < \epsilon \\), we get spurious numeric overflow unless we're very careful. This can occur either inside `lanczosSum(z)` or in the final combination of terms. To avoid this, split the product up into 2 (or 3) parts:
				*
				*     ```tex
				*     \begin{align*}
				*     G(z) / G(L) &= 1 / (z \cdot G(L)) ; z < \eps, L = z + \delta = \delta \\
				*     z * G(L) &= z * G(lim) \cdot (G(L)/G(lim)) ; lim = \text{largest factorial}
				*     \end{align*}
				*     ```
				*
				* @private
				* @param {number} z - first gamma parameter
				* @param {number} delta - difference
				* @returns {number} gamma ratio
				*/
				function gammaDeltaRatioLanczos( z, delta ) {
					var result;
					var ratio;
					var zgh;

					if ( z < EPSILON ) {
						if ( delta > MAX_FACTORIAL ) {
							ratio = gammaDeltaRatioLanczos( delta, MAX_FACTORIAL-delta );
							ratio *= z;
							ratio *= FACTORIAL_169;
							return 1.0 / ratio;
						}
						return 1.0 / ( z * gamma( z+delta ) );
					}
					zgh = z + G - 0.5;
					if ( z + delta === z ) {
						if ( abs(delta) < 10.0 ) {
							result = exp( ( 0.5-z ) * log1p( delta/zgh ) );
						} else {
							result = 1.0;
						}
					} else {
						if ( abs(delta) < 10.0 ) {
							result = exp( ( 0.5-z ) * log1p( delta/zgh ));
						} else {
							result = pow( zgh / (zgh+delta), z-0.5 );
						}
						// Split up the calculation to avoid spurious overflow:
						result *= lanczosSum( z ) / lanczosSum( z + delta );
					}
					result *= pow( E / ( zgh+delta ), delta );
					return result;
				}


				// EXPORTS //

				module.exports = gammaDeltaRatioLanczos;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Calculate the ratio of two gamma functions.
				*
				* @module @stdlib/math-base-special-gamma-delta-ratio
				*
				* @example
				* var gammaDeltaRatio = require( '@stdlib/math-base-special-gamma-delta-ratio' );
				*
				* var y = gammaDeltaRatio( 2.0, 3.0 );
				* // returns ~0.042
				*
				* y = gammaDeltaRatio( 4.0, 0.5 );
				* // returns 2.0
				*
				* y = gammaDeltaRatio( 100.0, 0.0 );
				* // returns 1.0
				*/

				// MODULES //

				var gammaDeltaRatio = require( './gamma_delta_ratio.js' );


				// EXPORTS //

				module.exports = gammaDeltaRatio;
			}
		}
	},
	"@stdlib/math-base-special-gamma-lanczos-sum": {
		":mainpath:": "./lib",
		"lib": {
			"gamma_lanczos_sum.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/lanczos.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* Copyright John Maddock 2006.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MAIN //

				/**
				* Calculates the Lanczos sum approximation.
				*
				* @name gammaLanczosSum
				* @type {Function}
				* @param {number} x - input value
				* @returns {number} Lanczos sum approximation
				*
				* @example
				* var v = gammaLanczosSum( 4.0 );
				* // returns ~950.366
				*
				* @example
				* var v = gammaLanczosSum( -1.5 );
				* // returns ~1373366.245
				*
				* @example
				* var v = gammaLanczosSum( -0.5 );
				* // returns ~-699841.735
				*
				* @example
				* var v = gammaLanczosSum( 0.5 );
				* // returns ~96074.186
				*
				* @example
				* var v = gammaLanczosSum( 0.0 );
				* // returns Infinity
				*
				* @example
				* var v = gammaLanczosSum( NaN );
				* // returns NaN
				*/
				var gammaLanczosSum = require( './rational_pq.js' );


				// EXPORTS //

				module.exports = gammaLanczosSum;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Calculate the Lanczos sum for the approximation of the gamma function.
				*
				* @module @stdlib/math-base-special-gamma-lanczos-sum
				*
				* @example
				* var gammaLanczosSum = require( '@stdlib/math-base-special-gamma-lanczos-sum' );
				*
				* var v = gammaLanczosSum( 4.0 );
				* // returns ~950.366
				*
				* v = gammaLanczosSum( -1.5 );
				* // returns ~1373366.245
				*
				* v = gammaLanczosSum( -0.5 );
				* // returns ~-699841.735
				*
				* v = gammaLanczosSum( 0.5 );
				* // returns ~96074.186
				*
				* v = gammaLanczosSum( 0.0 );
				* // returns Infinity
				*
				* v = gammaLanczosSum( NaN );
				* // returns NaN
				*/

				// MODULES //

				var gammaLanczosSum = require( './gamma_lanczos_sum.js' );


				// EXPORTS //

				module.exports = gammaLanczosSum;
			},
			"rational_pq.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
				*
				* ## Notes
				*
				* -   Coefficients should be sorted in ascending degree.
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the rational function
				* @returns {number} evaluated rational function
				*/
				function evalrational( x ) {
					var ax;
					var s1;
					var s2;
					if ( x === 0.0 ) {
						return Infinity;
					}
					if ( x < 0.0 ) {
						ax = -x;
					} else {
						ax = x;
					}
					if ( ax <= 1.0 ) {
						s1 = 38474670393.31777 + (x * (36857665043.51951 + (x * (15889202453.72942 + (x * (4059208354.298835 + (x * (680547661.1834733 + (x * (78239755.00312005 + (x * (6246580.776401795 + (x * (341986.3488721347 + (x * (12287.194511824551 + (x * (261.61404416416684 + (x * 2.5066282746310007))))))))))))))))))); // eslint-disable-line max-len
						s2 = 0.0 + (x * (362880.0 + (x * (1026576.0 + (x * (1172700.0 + (x * (723680.0 + (x * (269325.0 + (x * (63273.0 + (x * (9450.0 + (x * (870.0 + (x * (45.0 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
					} else {
						x = 1.0 / x;
						s1 = 2.5066282746310007 + (x * (261.61404416416684 + (x * (12287.194511824551 + (x * (341986.3488721347 + (x * (6246580.776401795 + (x * (78239755.00312005 + (x * (680547661.1834733 + (x * (4059208354.298835 + (x * (15889202453.72942 + (x * (36857665043.51951 + (x * 38474670393.31777))))))))))))))))))); // eslint-disable-line max-len
						s2 = 1.0 + (x * (45.0 + (x * (870.0 + (x * (9450.0 + (x * (63273.0 + (x * (269325.0 + (x * (723680.0 + (x * (1172700.0 + (x * (1026576.0 + (x * (362880.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
					}
					return s1 / s2;
				}


				// EXPORTS //

				module.exports = evalrational;
			}
		}
	},
	"@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled": {
		":mainpath:": "./lib",
		"lib": {
			"gamma_lanczos_sum_expg_scaled.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/lanczos.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* Copyright John Maddock 2006.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MAIN //

				/**
				* Calculates the Lanczos sum for the approximation of the gamma function (scaled by `exp(-g)`, where `g = 10.900511`.
				*
				* @name gammaLanczosSumExpGScaled
				* @type {Function}
				* @param {number} x - input value
				* @returns {number} Lanczos sum approximation
				*
				* @example
				* var v = gammaLanczosSumExpGScaled( 4.0 );
				* // returns ~0.018
				*
				* @example
				* var v = gammaLanczosSumExpGScaled( -1.5 );
				* // returns ~25.337
				*
				* @example
				* var v = gammaLanczosSumExpGScaled( -0.5 );
				* // returns ~-12.911
				*
				* @example
				* var v = gammaLanczosSumExpGScaled( 0.5 );
				* // returns ~1.772
				*
				* @example
				* var v = gammaLanczosSumExpGScaled( 0.0 );
				* // returns Infinity
				*
				* @example
				* var v = gammaLanczosSumExpGScaled( NaN );
				* // returns NaN
				*/
				var gammaLanczosSumExpGScaled = require( './rational_pq.js' );


				// EXPORTS //

				module.exports = gammaLanczosSumExpGScaled;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Calculate the Lanczos sum for the approximation of the gamma function (scaled by `exp(-g)`, where `g = 10.900511`.
				*
				* @module @stdlib/math-base-special-gamma-lanczos-sum-expg-scaled
				*
				* @example
				* var gammaLanczosSumExpGScaled = require( '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled' );
				*
				* var v = gammaLanczosSumExpGScaled( 4.0 );
				* // returns ~0.018
				*
				* v = gammaLanczosSumExpGScaled( -1.5 );
				* // returns ~25.337
				*
				* v = gammaLanczosSumExpGScaled( -0.5 );
				* // returns ~-12.911
				*
				* v = gammaLanczosSumExpGScaled( 0.5 );
				* // returns ~1.772
				*
				* v = gammaLanczosSumExpGScaled( 0.0 );
				* // returns Infinity
				*
				* v = gammaLanczosSumExpGScaled( NaN );
				* // returns NaN
				*/

				// MODULES //

				var gammaLanczosSumExpGScaled = require( './gamma_lanczos_sum_expg_scaled.js' );


				// EXPORTS //

				module.exports = gammaLanczosSumExpGScaled;
			},
			"rational_pq.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
				*
				* ## Notes
				*
				* -   Coefficients should be sorted in ascending degree.
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the rational function
				* @returns {number} evaluated rational function
				*/
				function evalrational( x ) {
					var ax;
					var s1;
					var s2;
					if ( x === 0.0 ) {
						return Infinity;
					}
					if ( x < 0.0 ) {
						ax = -x;
					} else {
						ax = x;
					}
					if ( ax <= 1.0 ) {
						s1 = 709811.662581658 + (x * (679979.8474157227 + (x * (293136.7857211597 + (x * (74887.54032914672 + (x * (12555.290582413863 + (x * (1443.4299244417066 + (x * (115.24194596137347 + (x * (6.309239205732627 + (x * (0.22668404630224365 + (x * (0.004826466289237662 + (x * 0.00004624429436045379))))))))))))))))))); // eslint-disable-line max-len
						s2 = 0.0 + (x * (362880.0 + (x * (1026576.0 + (x * (1172700.0 + (x * (723680.0 + (x * (269325.0 + (x * (63273.0 + (x * (9450.0 + (x * (870.0 + (x * (45.0 + (x * 1.0))))))))))))))))))); // eslint-disable-line max-len
					} else {
						x = 1.0 / x;
						s1 = 0.00004624429436045379 + (x * (0.004826466289237662 + (x * (0.22668404630224365 + (x * (6.309239205732627 + (x * (115.24194596137347 + (x * (1443.4299244417066 + (x * (12555.290582413863 + (x * (74887.54032914672 + (x * (293136.7857211597 + (x * (679979.8474157227 + (x * 709811.662581658))))))))))))))))))); // eslint-disable-line max-len
						s2 = 1.0 + (x * (45.0 + (x * (870.0 + (x * (9450.0 + (x * (63273.0 + (x * (269325.0 + (x * (723680.0 + (x * (1172700.0 + (x * (1026576.0 + (x * (362880.0 + (x * 0.0))))))))))))))))))); // eslint-disable-line max-len
					}
					return s1 / s2;
				}


				// EXPORTS //

				module.exports = evalrational;
			}
		}
	},
	"@stdlib/math-base-special-gamma1pm1": {
		":mainpath:": "./lib",
		"lib": {
			"gamma1pm1.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006-7, 2013-14.
				* (C) Copyright Paul A. Bristow 2007, 2013-14.
				* (C) Copyright Nikhar Agrawal 2013-14.
				* (C) Copyright Christopher Kormanyos 2013-14.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var gamma = require( '@stdlib/math-base-special-gamma' );
				var expm1 = require( '@stdlib/math-base-special-expm1' );
				var log1p = require( '@stdlib/math-base-special-log1p' );
				var isnan = require( '@stdlib/math-base-assert-is-nan' );
				var lgammaSmallImp = require( './lgamma_small_imp.js' );


				// MAIN //

				/**
				* Computes `gamma(x+1) - 1`.
				*
				* @param {number} x - input value
				* @returns {number} function value
				*
				* @example
				* var v = gammap1m1( 0.2 );
				* // returns ~-0.082
				*
				* @example
				* var v = gammap1m1( -9.2 );
				* // returns ~-1.0
				*
				* @example
				* var v = gammap1m1( 0.0 );
				* // returns 0.0
				*
				* @example
				* var v = gammap1m1( -3.0 );
				* // returns NaN
				*
				* @example
				* var v = gammap1m1( NaN );
				* // returns NaN
				*/
				function gammap1m1( x ) {
					if ( isnan( x ) ) {
						return NaN;
					}
					if ( x < 0.0 ) {
						if ( x < -0.5 ) {
							// Best method is simply to subtract 1 from gamma:
							return gamma( 1.0+x ) - 1.0;
						}
						// Use expm1 on the logarithm of gamma:
						return expm1( -log1p( x ) + lgammaSmallImp( x+2.0, x+1.0, x ) );
					}
					if ( x < 2.0 ) {
						// Use expm1 on the logarithm of gamma:
						return expm1( lgammaSmallImp( x+1.0, x, x-1.0 ) );
					}
					// Best method is simply to subtract 1 from gamma:
					return gamma( 1.0+x ) - 1.0;
				}


				// EXPORTS //

				module.exports = gammap1m1;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Compute `gamma(x+1) - 1` without cancellation errors.
				*
				* @module @stdlib/math-base-special-gamma1pm1
				*
				* @example
				* var gamma1pm1 = require( '@stdlib/math-base-special-gamma1pm1' );
				*
				* var v = gamma1pm1( 0.2 );
				* // returns ~-0.082
				*
				* v = gamma1pm1( -5.3 );
				* // returns ~-1.102
				*
				* v = gamma1pm1( 0.0 );
				* // returns 0.0
				*
				* v = gamma1pm1( NaN );
				* // returns NaN
				*/

				// MODULES //

				var gamma1pm1 = require( './gamma1pm1.js' );


				// EXPORTS //

				module.exports = gamma1pm1;
			},
			"lgamma_small_imp.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/detail/lgamma_small.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006-7, 2013-14.
				* (C) Copyright Paul A. Bristow 2007, 2013-14.
				* (C) Copyright Nikhar Agrawal 2013-14.
				* (C) Copyright Christopher Kormanyos 2013-14.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var ln = require( '@stdlib/math-base-special-ln' );
				var EPS = require( '@stdlib/constants-float64-eps' );
				var rateval1 = require( './rational_p1q1.js' );
				var rateval2 = require( './rational_p2q2.js' );
				var rateval3 = require( './rational_p3q3.js' );


				// VARIABLES //

				var Y1 = 0.158963680267333984375;
				var Y2 = 0.52815341949462890625;
				var Y3 = 0.452017307281494140625;


				// MAIN //

				/**
				* Evaluates the natural logarithm of the gamma function for small arguments.
				*
				* ## Method
				*
				* 1.  For \\( z > 2 \\), begin by performing argument reduction until \\( z \\) is in \\(\[2,3)\\). Use the following form:
				*
				*     ```tex
				*     \operatorname{gammaln}(z) = (z-2)(z+1)(Y + R(z-2))
				*     ```
				*
				*     where \\( R(z-2) \\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\( Y \\), then any rounding error in the computation will get wiped out.
				*
				* 2.  If \\( z < 1 \\), use recurrence to shift to \\( z \\) in the interval \\(\[1,2\]\\). Then, use one of two approximations: one for \\( z \\) in \\(\[1,1.5\]\\) and one for \\( z \\) in \\(\[1.5,2\]\\):
				*
				*     -   For \(( z \\) in \\(\[1,1.5\]\\), use
				*
				*         ```tex
				*         \operatorname{gammaln}(z) = (z-1)(z-2)(Y + R(z-1))
				*         ```
				*
				*         where \\( R(z-1) \\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\( Y \\), then any rounding error in the computation will get wiped out.
				*
				*     -   For \\( z \\) in \\(\[1.5,2\]\\), use
				*
				*         ```tex
				*         \operatorname{gammaln}(z) = (2-z)(1-z)(Y + R(2-z))
				*         ```
				*
				*         where \\( R(2-z) \\) is a rational approximation optimized for low absolute error. As long as the absolute error is small compared to the constant \\( Y \\), then any rounding error in the computation will get wiped out.
				*
				*
				* ## Notes
				*
				* -   Relative error:
				*
				*     | function | peak         | maximum deviation |
				*     |:--------:|:------------:|:-----------------:|
				*     | R(Z-2)   | 4.231e-18    | 5.900e-24         |
				*     | R(Z-1)   | 1.230011e-17 | 3.139e-021        |
				*     | R(2-Z)   | 1.797565e-17 | 2.151e-021        |
				*
				*
				* @private
				* @param {number} z - input value
				* @param {number} zm1 - `z` minus one
				* @param {number} zm2 - `z` minus two
				* @returns {number} function value
				*/
				function lgammaSmallImp( z, zm1, zm2 ) {
					var prefix;
					var result;
					var r;
					var R;

					if ( z < EPS ) {
						return -ln( z );
					}
					if ( zm1 === 0.0 || zm2 === 0.0 ) {
						return 0.0;
					}
					result = 0.0;
					if ( z > 2.0 ) {
						if ( z >= 3.0 ) {
							do {
								z -= 1.0;
								zm2 -= 1.0;
								result += ln(z);
							} while ( z >= 3.0 );
							zm2 = z - 2.0;
						}
						r = zm2 * ( z+1.0 );
						R = rateval1( zm2 );
						result += ( r*Y1 ) + ( r*R );
						return result;
					}
					if ( z < 1.0 ) {
						result += -ln(z);
						zm2 = zm1;
						zm1 = z;
						z += 1.0;
					}
					if ( z <= 1.5 ) {
						r = rateval2( zm1 );
						prefix = zm1 * zm2;
						result += ( prefix*Y2 ) + ( prefix*r );
						return result;
					}
					// Case: 1.5 < z <= 2
					r = zm2 * zm1;
					R = rateval3( -zm2 );
					result += ( r*Y3 ) + ( r*R );
					return result;
				}


				// EXPORTS //

				module.exports = lgammaSmallImp;
			},
			"rational_p1q1.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
				*
				* ## Notes
				*
				* -   Coefficients should be sorted in ascending degree.
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the rational function
				* @returns {number} evaluated rational function
				*/
				function evalrational( x ) {
					var ax;
					var s1;
					var s2;
					if ( x === 0.0 ) {
						return -0.01803556856784494;
					}
					if ( x < 0.0 ) {
						ax = -x;
					} else {
						ax = x;
					}
					if ( ax <= 1.0 ) {
						s1 = -0.01803556856784494 + (x * (0.02512664961998968 + (x * (0.049410315156753225 + (x * (0.0172491608709614 + (x * (-0.0002594535632054381 + (x * (-0.0005410098692152044 + (x * (-0.00003245886498259485 + (x * 0.0))))))))))))); // eslint-disable-line max-len
						s2 = 1.0 + (x * (1.962029871977952 + (x * (1.4801966942423133 + (x * (0.5413914320717209 + (x * (0.09885042511280101 + (x * (0.008213096746488934 + (x * (0.00022493629192211576 + (x * -2.2335276320861708e-7))))))))))))); // eslint-disable-line max-len
					} else {
						x = 1.0 / x;
						s1 = 0.0 + (x * (-0.00003245886498259485 + (x * (-0.0005410098692152044 + (x * (-0.0002594535632054381 + (x * (0.0172491608709614 + (x * (0.049410315156753225 + (x * (0.02512664961998968 + (x * -0.01803556856784494))))))))))))); // eslint-disable-line max-len
						s2 = -2.2335276320861708e-7 + (x * (0.00022493629192211576 + (x * (0.008213096746488934 + (x * (0.09885042511280101 + (x * (0.5413914320717209 + (x * (1.4801966942423133 + (x * (1.962029871977952 + (x * 1.0))))))))))))); // eslint-disable-line max-len
					}
					return s1 / s2;
				}


				// EXPORTS //

				module.exports = evalrational;
			},
			"rational_p2q2.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
				*
				* ## Notes
				*
				* -   Coefficients should be sorted in ascending degree.
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the rational function
				* @returns {number} evaluated rational function
				*/
				function evalrational( x ) {
					var ax;
					var s1;
					var s2;
					if ( x === 0.0 ) {
						return 0.04906224540690395;
					}
					if ( x < 0.0 ) {
						ax = -x;
					} else {
						ax = x;
					}
					if ( ax <= 1.0 ) {
						s1 = 0.04906224540690395 + (x * (-0.09691175301595212 + (x * (-0.4149833583594954 + (x * (-0.4065671242119384 + (x * (-0.1584135863906922 + (x * (-0.024014982064857155 + (x * -0.0010034668769627955))))))))))); // eslint-disable-line max-len
						s2 = 1.0 + (x * (3.0234982984646304 + (x * (3.4873958536072385 + (x * (1.9141558827442668 + (x * (0.5071377386143635 + (x * (0.05770397226904519 + (x * 0.001957681026011072))))))))))); // eslint-disable-line max-len
					} else {
						x = 1.0 / x;
						s1 = -0.0010034668769627955 + (x * (-0.024014982064857155 + (x * (-0.1584135863906922 + (x * (-0.4065671242119384 + (x * (-0.4149833583594954 + (x * (-0.09691175301595212 + (x * 0.04906224540690395))))))))))); // eslint-disable-line max-len
						s2 = 0.001957681026011072 + (x * (0.05770397226904519 + (x * (0.5071377386143635 + (x * (1.9141558827442668 + (x * (3.4873958536072385 + (x * (3.0234982984646304 + (x * 1.0))))))))))); // eslint-disable-line max-len
					}
					return s1 / s2;
				}


				// EXPORTS //

				module.exports = evalrational;
			},
			"rational_p3q3.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).
				*
				* ## Notes
				*
				* -   Coefficients should be sorted in ascending degree.
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the rational function
				* @returns {number} evaluated rational function
				*/
				function evalrational( x ) {
					var ax;
					var s1;
					var s2;
					if ( x === 0.0 ) {
						return -0.029232972183027003;
					}
					if ( x < 0.0 ) {
						ax = -x;
					} else {
						ax = x;
					}
					if ( ax <= 1.0 ) {
						s1 = -0.029232972183027003 + (x * (0.14421626775719232 + (x * (-0.14244039073863127 + (x * (0.05428096940550536 + (x * (-0.008505359768683364 + (x * (0.0004311713426792973 + (x * 0.0))))))))))); // eslint-disable-line max-len
						s2 = 1.0 + (x * (-1.5016935605448505 + (x * (0.846973248876495 + (x * (-0.22009515181499575 + (x * (0.02558279715597587 + (x * (-0.0010066679553914337 + (x * -8.271935218912905e-7))))))))))); // eslint-disable-line max-len
					} else {
						x = 1.0 / x;
						s1 = 0.0 + (x * (0.0004311713426792973 + (x * (-0.008505359768683364 + (x * (0.05428096940550536 + (x * (-0.14244039073863127 + (x * (0.14421626775719232 + (x * -0.029232972183027003))))))))))); // eslint-disable-line max-len
						s2 = -8.271935218912905e-7 + (x * (-0.0010066679553914337 + (x * (0.02558279715597587 + (x * (-0.22009515181499575 + (x * (0.846973248876495 + (x * (-1.5016935605448505 + (x * 1.0))))))))))); // eslint-disable-line max-len
					}
					return s1 / s2;
				}


				// EXPORTS //

				module.exports = evalrational;
			}
		}
	},
	"@stdlib/math-base-special-gammainc": {
		":mainpath:": "./lib",
		"lib": {
			"finite_gamma_q.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006.
				* (C) Copyright Paul A. Bristow 2007.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var exp = require( '@stdlib/math-base-special-exp' );


				// MAIN //

				/**
				* Calculates normalized Q when a is an integer.
				*
				* @private
				* @param {integer} a - function parameter
				* @param {number} x - function parameter
				* @returns {number} upper gamma fraction
				*/
				function finiteGammaQ( a, x ) {
					var term;
					var sum;
					var e;
					var n;

					e = exp( -x );
					sum = e;
					if ( sum !== 0.0 ) {
						term = sum;
						for ( n = 1; n < a; ++n ) {
							term /= n;
							term *= x;
							sum += term;
						}
					}
					return sum;
				}


				// EXPORTS //

				module.exports = finiteGammaQ;
			},
			"finite_half_gamma_q.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006.
				* (C) Copyright Paul A. Bristow 2007.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var erfc = require( '@stdlib/math-base-special-erfc' );
				var sqrt = require( '@stdlib/math-base-special-sqrt' );
				var exp = require( '@stdlib/math-base-special-exp' );
				var PI = require( '@stdlib/constants-float64-pi' );


				// MAIN //

				/**
				* Calculates normalized Q when a is a half-integer.
				*
				* @private
				* @param {number} a - function parameter
				* @param {number} x - function parameter
				* @returns {number} upper gamma fraction
				*/
				function finiteHalfGammaQ( a, x ) {
					var half;
					var term;
					var sum;
					var e;
					var n;

					e = erfc( sqrt(x) );
					if ( e !== 0 && a > 1.0 ) {
						term = exp( -x ) / sqrt( PI * x );
						term *= x;
						half = 0.5;
						term /= half;
						sum = term;
						for ( n = 2; n < a; ++n ) {
							term /= n - half;
							term *= x;
							sum += term;
						}
						e += sum;
					}
					return e;
				}


				// EXPORTS //

				module.exports = finiteHalfGammaQ;
			},
			"full_igamma_prefix.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006.
				* (C) Copyright Paul A. Bristow 2007.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var exp = require( '@stdlib/math-base-special-exp' );
				var pow = require( '@stdlib/math-base-special-pow' );
				var ln = require( '@stdlib/math-base-special-ln' );
				var MAX_LN = require( '@stdlib/constants-float64-max-ln' );
				var MIN_LN = require( '@stdlib/constants-float64-min-ln' );


				// MAIN //

				/**
				* Calculates the power term prefix `(z^a)(e^-z)` used in the non-normalized incomplete gammas.
				*
				* @private
				* @param {number} a - function parameter
				* @param {number} z - function parameter
				* @returns {number} power term prefix
				*/
				function fullIGammaPrefix( a, z ) {
					var prefix;
					var alz;

					alz = a * ln( z );
					if ( z >= 1.0 ) {
						if ( ( alz < MAX_LN ) && ( -z > MIN_LN ) ) {
							prefix = pow( z, a ) * exp( -z );
						}
						else if ( a >= 1.0 ) {
							prefix = pow( z / exp(z/a), a );
						}
						else {
							prefix = exp( alz - z );
						}
					}
					else {
						/* eslint-disable no-lonely-if */
						if ( alz > MIN_LN ) {
							prefix = pow( z, a ) * exp( -z );
						}
						else if ( z/a < MAX_LN ) {
							prefix = pow( z / exp(z/a), a );
						} else {
							prefix = exp( alz - z );
						}
					}
					return prefix;
				}


				// EXPORTS //

				module.exports = fullIGammaPrefix;
			},
			"gammainc.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006-7, 2013-14.
				* (C) Copyright Paul A. Bristow 2007, 2013-14.
				* (C) Copyright Nikhar Agrawal 2013-14.
				* (C) Christopher Kormanyos 2013-14.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var gammaln = require( '@stdlib/math-base-special-gammaln' );
				var floor = require( '@stdlib/math-base-special-floor' );
				var gamma = require( '@stdlib/math-base-special-gamma' );
				var abs = require( '@stdlib/math-base-special-abs' );
				var exp = require( '@stdlib/math-base-special-exp' );
				var pow = require( '@stdlib/math-base-special-pow' );
				var ln = require( '@stdlib/math-base-special-ln' );
				var SQRT_EPSILON = require( '@stdlib/constants-float64-sqrt-eps' );
				var FLOAT64_MAX = require( '@stdlib/constants-float64-max' );
				var SQRT_TWO_PI = require( '@stdlib/constants-float64-sqrt-two-pi' );
				var MAX_LN = require( '@stdlib/constants-float64-max-ln' );
				var PINF = require( '@stdlib/constants-float64-pinf' );
				var finiteGammaQ = require( './finite_gamma_q.js' );
				var finiteHalfGammaQ = require( './finite_half_gamma_q.js' );
				var fullIGammaPrefix = require( './full_igamma_prefix.js' );
				var igammaTemmeLarge = require( './igamma_temme_large.js' );
				var lowerGammaSeries = require( './lower_gamma_series.js' );
				var regularisedGammaPrefix = require( './regularised_gamma_prefix.js' );
				var tgammaSmallUpperPart = require( './tgamma_small_upper_part.js' );
				var upperGammaFraction = require( './upper_gamma_fraction.js' );


				// VARIABLES //

				var MAX_FACTORIAL = 170; // TODO: consider extracting as a constant


				// MAIN //

				/**
				* Computes the regularized incomplete gamma function. The upper tail is calculated via the modified Lentz's method for computing continued fractions, the lower tail using a power expansion.
				*
				*
				* ## Notes
				*
				* -   When `a >= MAX_FACTORIAL` and computing the non-normalized incomplete gamma, result is rather hard to compute unless we use logs. There are really two options a) if `x` is a long way from `a` in value then we can reliably use methods 2 and 4 below in logarithmic form and go straight to the result. Otherwise we let the regularized gamma take the strain (the result is unlikely to underflow in the central region anyway) and combine with `lgamma` in the hopes that we get a finite result.
				*
				* @param {NonNegativeNumber} x - function parameter
				* @param {PositiveNumber} a - function parameter
				* @param {boolean} [regularized=true] - boolean indicating if the function should evaluate the regularized or non-regularized incomplete gamma functions
				* @param {boolean} [upper=false] - boolean indicating if the function should return the upper tail of the incomplete gamma function
				* @returns {number} function value
				*/
				function gammainc( x, a, regularized, upper ) {
					var optimisedInvert;
					var normalized;
					var evalMethod;
					var initValue;
					var isHalfInt;
					var useTemme;
					var isSmallA;
					var invert;
					var result;
					var isInt;
					var sigma;
					var gam;
					var res;
					var fa;
					var g;

					if ( x < 0.0 || a <= 0.0 ) {
						return NaN;
					}
					normalized = ( regularized === void 0 ) ? true : regularized;
					invert = upper;
					result = 0.0;
					if ( a >= MAX_FACTORIAL && !normalized ) {
						if ( invert && ( a * 4.0 < x ) ) {
							// This is method 4 below, done in logs:
							result = ( a * ln(x) ) - x;
							result += ln( upperGammaFraction( a, x ) );
						}
						else if ( !invert && ( a > 4.0 * x ) ) {
							// This is method 2 below, done in logs:
							result = ( a * ln(x) ) - x;
							initValue = 0;
							result += ln( lowerGammaSeries( a, x, initValue ) / a );
						}
						else {
							result = gammainc( a, x, true, invert );
							if ( result === 0.0 ) {
								if ( invert ) {
									// Try http://functions.wolfram.com/06.06.06.0039.01
									result = 1.0 + ( 1.0 / (12.0*a) ) + ( 1.0 / (288.0*a*a) );
									result = ln( result ) - a + ( ( a-0.5 ) * ln(a) );
									result += ln( SQRT_TWO_PI );
								} else {
									// This is method 2 below, done in logs, we're really outside the range of this method, but since the result is almost certainly infinite, we should probably be OK:
									result = ( a * ln( x ) ) - x;
									initValue = 0.0;
									result += ln( lowerGammaSeries( a, x, initValue ) / a);
								}
							}
							else {
								result = ln( result ) + gammaln( a );
							}
						}
						if ( result > MAX_LN ) {
							return PINF;
						}
						return exp( result );
					}
					isSmallA = ( a < 30 ) && ( a <= x + 1.0 ) && ( x < MAX_LN );
					if ( isSmallA ) {
						fa = floor( a );
						isInt = ( fa === a );
						isHalfInt = ( isInt ) ? false : ( abs( fa - a ) === 0.5 );
					} else {
						isInt = isHalfInt = false;
					}
					if ( isInt && x > 0.6 ) {
						// Calculate Q via finite sum:
						invert = !invert;
						evalMethod = 0;
					}
					else if ( isHalfInt && x > 0.2 ) {
						// Calculate Q via finite sum for half integer a:
						invert = !invert;
						evalMethod = 1;
					}
					else if ( x < SQRT_EPSILON && a > 1.0 ) {
						evalMethod = 6;
					}
					else if ( x < 0.5 ) {
						// Changeover criterion chosen to give a changeover at Q ~ 0.33:
						if ( -0.4 / ln( x ) < a ) {
							evalMethod = 2;
						} else {
							evalMethod = 3;
						}
					}
					else if ( x < 1.1 ) {
						// Changeover here occurs when P ~ 0.75 or Q ~ 0.25:
						if ( x * 0.75 < a ) {
							evalMethod = 2;
						} else {
							evalMethod = 3;
						}
					}
					else {
						// Begin by testing whether we're in the "bad" zone where the result will be near 0.5 and the usual series and continued fractions are slow to converge:
						useTemme = false;
						if ( normalized && a > 20 ) {
							sigma = abs( (x-a)/a );
							if ( a > 200 ) {
								// Limit chosen so that we use Temme's expansion only if the result would be larger than about 10^-6. Below that the regular series and continued fractions converge OK, and if we use Temme's method we get increasing errors from the dominant erfc term as it's (inexact) argument increases in magnitude.
								if ( 20 / a > sigma * sigma ) {
									useTemme = true;
								}
							} else if ( sigma < 0.4 ) {
								useTemme = true;
							}
						}
						if ( useTemme ) {
							evalMethod = 5;
						}
						// Regular case where the result will not be too close to 0.5: Changeover occurs at P ~ Q ~ 0.5. Note that series computation of P is about x2 faster than continued fraction calculation of Q, so try and use the CF only when really necessary, especially for small x.
						else if ( x - ( 1.0 / (3.0 * x) ) < a ) {
							evalMethod = 2;
						} else {
							evalMethod = 4;
							invert = !invert;
						}
					}

					/* eslint-disable default-case */
					switch ( evalMethod ) {
					case 0:
						result = finiteGammaQ( a, x );
						if (normalized === false ) {
							result *= gamma( a );
						}
						break;
					case 1:
						result = finiteHalfGammaQ( a, x );
						if ( normalized === false ) {
							result *= gamma( a );
						}
						break;
					case 2:
						// Compute P:
						result = ( normalized ) ?
							regularisedGammaPrefix( a, x ) :
							fullIGammaPrefix( a, x );
						if ( result !== 0.0 ) {
							initValue = 0.0;
							optimisedInvert = false;
							if ( invert ) {
								initValue = ( normalized ) ? 1.0 : gamma(a);
								if (
									normalized ||
									result >= 1.0 ||
									FLOAT64_MAX * result > initValue
								) {
									initValue /= result;
									if (
										normalized ||
										a < 1.0 ||
										( FLOAT64_MAX / a > initValue )
									) {
										initValue *= -a;
										optimisedInvert = true;
									}
									else {
										initValue = 0.0;
									}
								}
								else {
									initValue = 0.0;
								}
							}
						}
						result *= lowerGammaSeries( a, x, initValue ) / a;
						if ( optimisedInvert ) {
							invert = false;
							result = -result;
						}
						break;
					case 3:
						// Compute Q:
						invert = !invert;
						res = tgammaSmallUpperPart( a, x, invert );
						result = res[ 0 ];
						g = res[ 1 ];
						invert = false;
						if ( normalized ) {
							result /= g;
						}
						break;
					case 4:
						// Compute Q:
						result = ( normalized ) ?
							regularisedGammaPrefix( a, x ) :
							fullIGammaPrefix( a, x );
						if ( result !== 0 ) {
							result *= upperGammaFraction( a, x );
						}
						break;
					case 5:
						result = igammaTemmeLarge( a, x );
						if ( x >= a ) {
							invert = !invert;
						}
						break;
					case 6:
						// Since x is so small that P is necessarily very small too, use http://functions.wolfram.com/GammaBetaErf/GammaRegularized/06/01/05/01/01/
						result = ( normalized ) ?
							pow(x, a) / gamma( a + 1.0 ) :
							pow( x, a ) / a;
						result *= 1.0 - ( a * x / ( a + 1.0 ) );
						break;
					}
					if ( normalized && result > 1.0 ) {
						result = 1.0;
					}
					if ( invert ) {
						gam = ( normalized ) ? 1.0 : gamma( a );
						result = gam - result;
					}
					return result;
				}


				// EXPORTS //

				module.exports = gammainc;
			},
			"igamma_temme_large.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006.
				* (C) Copyright Paul A. Bristow 2007.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var evalpoly = require( '@stdlib/math-base-tools-evalpoly' );
				var erfc = require( '@stdlib/math-base-special-erfc' );
				var sqrt = require( '@stdlib/math-base-special-sqrt' );
				var exp = require( '@stdlib/math-base-special-exp' );
				var ln = require( '@stdlib/math-base-special-ln' );
				var TWO_PI = require( '@stdlib/constants-float64-two-pi' );
				var polyvalC0 = require( './polyval_c0.js' );
				var polyvalC1 = require( './polyval_c1.js' );
				var polyvalC2 = require( './polyval_c2.js' );
				var polyvalC3 = require( './polyval_c3.js' );
				var polyvalC4 = require( './polyval_c4.js' );
				var polyvalC5 = require( './polyval_c5.js' );
				var polyvalC6 = require( './polyval_c6.js' );
				var polyvalC7 = require( './polyval_c7.js' );
				var polyvalC8 = require( './polyval_c8.js' );


				// VARIABLES //

				// Pre-allocate workspace array:
				var workspace = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ]; // WARNING: not thread safe


				// MAIN //

				/**
				* Asymptotic expansions of the incomplete gamma functions when `a` is large and `x ~ a` (IEEE double precision or 10^-17).
				*
				* @private
				* @param {number} a - function parameter
				* @param {number} x - function parameter
				* @returns {number} value of asymptotic expansion
				*/
				function igammaTemmeLarge( a, x ) {
					var result;
					var sigma;
					var phi;
					var y;
					var z;

					sigma = ( x-a ) / a;
					phi = -ln( 1.0 + sigma ) + sigma;
					y = a * phi;
					z = sqrt( 2.0 * phi );
					if ( x < a ) {
						z = -z;
					}
					workspace[ 0 ] = polyvalC0( z );
					workspace[ 1 ] = polyvalC1( z );
					workspace[ 2 ] = polyvalC2( z );
					workspace[ 3 ] = polyvalC3( z );
					workspace[ 4 ] = polyvalC4( z );
					workspace[ 5 ] = polyvalC5( z );
					workspace[ 6 ] = polyvalC6( z );
					workspace[ 7 ] = polyvalC7( z );
					workspace[ 8 ] = polyvalC8( z );
					workspace[ 9 ] = -0.00059676129019274625;
					result = evalpoly( workspace, 1.0/a );
					result *= exp( -y ) / sqrt( TWO_PI * a );
					if ( x < a ) {
						result = -result;
					}
					result += erfc( sqrt(y) ) / 2.0;
					return result;
				}


				// EXPORTS //

				module.exports = igammaTemmeLarge;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Evaluate the incomplete gamma function.
				*
				* @module @stdlib/math-base-special-gammainc
				*
				* @example
				* var gammainc = require( '@stdlib/math-base-special-gammainc' );
				*
				* var v = gammainc( 6.0, 2.0 );
				* // returns ~0.9826
				*
				* v = gammainc( 1.0, 2.0, true, true );
				* // returns ~0.7358
				*
				* v = gammainc( 7.0, 5.0 );
				* // returns ~0.8270
				*
				* v = gammainc( 7.0, 5.0, false );
				* // returns ~19.8482
				*
				* v = gammainc( NaN, 2.0 );
				* // returns NaN
				*
				* v = gammainc( 6.0, NaN );
				* // returns NaN
				*/

				// MODULES //

				var gammainc = require( './gammainc.js' );


				// EXPORTS //

				module.exports = gammainc;
			},
			"lower_gamma_series.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006.
				* (C) Copyright Paul A. Bristow 2007.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var sumSeries = require( '@stdlib/math-base-tools-sum-series' );
				var lowerIncompleteGammaSeries = require( './lower_incomplete_gamma_series.js' );


				// MAIN //

				/**
				* Sums elements of the series expansion of the lower incomplete gamma function.
				*
				* ## Method
				*
				* -   Multiply result by `((z^a) * (e^-z) / a)` to get the full lower incomplete integral.
				* -   Divide by `tgamma(a)` to get the normalized value.
				*
				* @private
				* @param {number} a - function parameter
				* @param {number} z - function parameter
				* @param {number} initialValue - initial value of the resulting sum
				* @returns {number} sum of terms of lower gamma series
				*/
				function lowerGammaSeries( a, z, initialValue ) {
					var result;
					var s;

					initialValue = initialValue || 0.0;
					s = lowerIncompleteGammaSeries( a, z );
					result = sumSeries( s, {
						'initialValue': initialValue
					});
					return result;
				}


				// EXPORTS //

				module.exports = lowerGammaSeries;
			},
			"lower_incomplete_gamma_series.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006.
				* (C) Copyright Paul A. Bristow 2007.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MAIN //

				/**
				* Creates a function to evaluate a series expansion of the incomplete gamma function.
				*
				* @private
				* @param {number} a1 - function parameter
				* @param {number} z1 - function parameter
				* @returns {Function} series function
				*/
				function lowerIncompleteGammaSeries( a1, z1 ) {
					var result = 1.0;
					var a = a1;
					var z = z1;
					return next;

					/**
					* Calculate the next term of the series.
					*
					* @private
					* @returns {number} series expansion term
					*/
					function next() {
						var r = result;
						a += 1.0;
						result *= z/a;
						return r;
					}
				}


				// EXPORTS //

				module.exports = lowerIncompleteGammaSeries;
			},
			"polyval_c0.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return -0.3333333333333333;
					}
					return -0.3333333333333333 + (x * (0.08333333333333333 + (x * (-0.014814814814814815 + (x * (0.0011574074074074073 + (x * (0.0003527336860670194 + (x * (-0.0001787551440329218 + (x * (0.00003919263178522438 + (x * (-0.0000021854485106799924 + (x * (-0.00000185406221071516 + (x * (8.296711340953087e-7 + (x * (-1.7665952736826078e-7 + (x * (6.707853543401498e-9 + (x * (1.0261809784240309e-8 + (x * (-4.382036018453353e-9 + (x * 9.14769958223679e-10))))))))))))))))))))))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_c1.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return -0.001851851851851852;
					}
					return -0.001851851851851852 + (x * (-0.003472222222222222 + (x * (0.0026455026455026454 + (x * (-0.0009902263374485596 + (x * (0.00020576131687242798 + (x * (-4.018775720164609e-7 + (x * (-0.000018098550334489977 + (x * (0.00000764916091608111 + (x * (-0.0000016120900894563446 + (x * (4.647127802807434e-9 + (x * (1.378633446915721e-7 + (x * (-5.752545603517705e-8 + (x * 1.1951628599778148e-8))))))))))))))))))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_c2.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 0.004133597883597883;
					}
					return 0.004133597883597883 + (x * (-0.0026813271604938273 + (x * (0.0007716049382716049 + (x * (0.0000020093878600823047 + (x * (-0.00010736653226365161 + (x * (0.000052923448829120125 + (x * (-0.000012760635188618728 + (x * (3.423578734096138e-8 + (x * (0.0000013721957309062932 + (x * (-6.298992138380055e-7 + (x * 1.4280614206064242e-7))))))))))))))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_c3.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 0.0006494341563786008;
					}
					return 0.0006494341563786008 + (x * (0.00022947209362139917 + (x * (-0.0004691894943952557 + (x * (0.00026772063206283885 + (x * (-0.00007561801671883977 + (x * (-2.396505113867297e-7 + (x * (0.000011082654115347302 + (x * (-0.0000056749528269915965 + (x * 0.0000014230900732435883))))))))))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_c4.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return -0.0008618882909167117;
					}
					return -0.0008618882909167117 + (x * (0.0007840392217200666 + (x * (-0.0002990724803031902 + (x * (-0.0000014638452578843418 + (x * (0.00006641498215465122 + (x * (-0.00003968365047179435 + (x * 0.000011375726970678419))))))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_c5.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return -0.00033679855336635813;
					}
					return -0.00033679855336635813 + (x * (-0.00006972813758365858 + (x * (0.0002772753244959392 + (x * (-0.00019932570516188847 + (x * (0.00006797780477937208 + (x * (1.419062920643967e-7 + (x * (-0.000013594048189768693 + (x * (0.000008018470256334202 + (x * -0.000002291481176508095))))))))))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_c6.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 0.0005313079364639922;
					}
					return 0.0005313079364639922 + (x * (-0.0005921664373536939 + (x * (0.0002708782096718045 + (x * (7.902353232660328e-7 + (x * (-0.00008153969367561969 + (x * (0.0000561168275310625 + (x * -0.000018329116582843375))))))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_c7.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 0.00034436760689237765;
					}
					return 0.00034436760689237765 + (x * (0.00005171790908260592 + (x * (-0.00033493161081142234 + (x * (0.0002812695154763237 + (x * -0.00010976582244684731))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_c8.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return -0.0006526239185953094;
					}
					return -0.0006526239185953094 + (x * (0.0008394987206720873 + (x * -0.000438297098541721))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"regularised_gamma_prefix.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* Copyright John Maddock 2006-7, 2013-14.
				* Copyright Paul A. Bristow 2007, 2013-14.
				* Copyright Nikhar Agrawal 2013-14.
				* Copyright Christopher Kormanyos 2013-14.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var lanczosSumExpGScaled = require( '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled' );
				var gammaln = require( '@stdlib/math-base-special-gammaln' );
				var gamma = require( '@stdlib/math-base-special-gamma' );
				var log1p = require( '@stdlib/math-base-special-log1p' );
				var sqrt = require( '@stdlib/math-base-special-sqrt' );
				var abs = require( '@stdlib/math-base-special-abs' );
				var exp = require( '@stdlib/math-base-special-exp' );
				var pow = require( '@stdlib/math-base-special-pow' );
				var max = require( '@stdlib/math-base-special-max' );
				var min = require( '@stdlib/math-base-special-min' );
				var ln = require( '@stdlib/math-base-special-ln' );
				var MAX_LN = require( '@stdlib/constants-float64-max-ln' );
				var MIN_LN = require( '@stdlib/constants-float64-min-ln' );
				var G = require( '@stdlib/constants-float64-gamma-lanczos-g' );
				var E = require( '@stdlib/constants-float64-e' );


				// MAIN //

				/**
				* Computes `(z^a)*(e^-z) / gamma(a)`.
				*
				* @private
				* @param {number} a - input value
				* @param {number} z - input value
				* @returns {number} function value
				*/
				function regularisedGammaPrefix( a, z ) {
					var prefix;
					var amza;
					var agh;
					var alz;
					var amz;
					var sq;
					var d;

					agh = a + G - 0.5;
					d = ( (z - a) - G + 0.5 ) / agh;
					if ( a < 1.0 ) {
						// Treat a < 1 as a special case because our Lanczos approximations are optimized against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:
						if ( z <= MIN_LN ) {
							// Use logs, so should be free of cancellation errors:
							return exp( ( a * ln(z) ) - z - gammaln( a ) );
						}
						// No danger of overflow as gamma(a) < 1/a for small a, so direct calculation:
						return pow( z, a ) * exp( -z ) / gamma( a );
					}
					if ( abs(d*d*a) <= 100.0 && a > 150.0 ) {
						// Special case for large a and a ~ z:
						prefix = ( a * ( log1p( d ) - d ) ) + ( z * ( 0.5-G ) / agh );
						prefix = exp( prefix );
					}
					else {
						// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:
						alz = a * ln(z / agh);
						amz = a - z;
						if (
							min(alz, amz) <= MIN_LN ||
							max(alz, amz) >= MAX_LN
						) {
							amza = amz / a;
							if (
								min(alz, amz)/2.0 > MIN_LN &&
								max(alz, amz)/2.0 < MAX_LN
							) {
								// Compute square root of the result and then square it:
								sq = pow( z / agh, a / 2.0 ) * exp( amz / 2.0 );
								prefix = sq * sq;
							}
							else if (
								min(alz, amz)/4.0 > MIN_LN &&
								max(alz, amz)/4.0 < MAX_LN &&
								z > a
							) {
								// Compute the 4th root of the result then square it twice:
								sq = pow( z / agh, a / 4.0 ) * exp( amz / 4.0 );
								prefix = sq * sq;
								prefix *= prefix;
							}
							else if (
								amza > MIN_LN &&
								amza < MAX_LN
							) {
								prefix = pow( (z * exp(amza)) / agh, a );
							}
							else {
								prefix = exp( alz + amz );
							}
						}
						else
						{
							prefix = pow( z / agh, a ) * exp( amz );
						}
					}
					prefix *= sqrt( agh / E ) / lanczosSumExpGScaled( a );
					return prefix;
				}


				// EXPORTS //

				module.exports = regularisedGammaPrefix;
			},
			"small_gamma2_series.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006.
				* (C) Copyright Paul A. Bristow 2007.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				/**
				* Series representation for upper fraction when `z` is small.
				*
				* @private
				* @param {number} a - function parameter
				* @param {number} x - function parameter
				* @returns {Function} series function
				*/
				function smallGamma2Series( a, x ) {
					var result;
					var apn;
					var n;
					var r;

					result = -x;
					x = -x;
					apn = a + 1.0;
					n = 1;
					return next;

					/**
					* Calculate the next term of the series.
					*
					* @private
					* @returns {number} series expansion term
					*/
					function next() {
						r = result / apn;
						result *= x;
						n += 1;
						result /= n;
						apn += 1.0;
						return r;
					}
				}


				// EXPORTS //

				module.exports = smallGamma2Series;
			},
			"tgamma_small_upper_part.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006.
				* (C) Copyright Paul A. Bristow 2007.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var powm1 = require( '@stdlib/math-base-special-powm1' );
				var sumSeries = require( '@stdlib/math-base-tools-sum-series' );
				var gamma1pm1 = require( '@stdlib/math-base-special-gamma1pm1' );
				var smallGamma2Series = require( './small_gamma2_series.js' );


				// MAIN //

				/**
				* Compute the full upper fraction (Q) when `a` is very small.
				*
				* @private
				* @param {number} a - function parameter
				* @param {number} x - function parameter
				* @param {boolean} invert - boolean indicating if the upper tail of the incomplete gamma function should be evaluated
				* @returns {Array} full upper fraction (Q) and pgam
				*/
				function tgammaSmallUpperPart( a, x, invert ) {
					var initialValue;
					var result;
					var pgam;
					var p;
					var s;

					result = gamma1pm1( a );
					pgam = ( result + 1.0 ) / a;
					p = powm1( x, a );
					result -= p;
					result /= a;
					s = smallGamma2Series( a, x );
					p += 1.0;
					initialValue = ( invert ) ? pgam : 0.0;
					result = -p * sumSeries( s, {
						'initialValue': (initialValue - result) / p
					});
					if ( invert ) {
						result = -result;
					}
					return [ result, pgam ];
				}


				// EXPORTS //

				module.exports = tgammaSmallUpperPart;
			},
			"upper_gamma_fraction.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006.
				* (C) Copyright Paul A. Bristow 2007.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var continuedFraction = require( '@stdlib/math-base-tools-continued-fraction' );
				var upperIncompleteGammaFract = require( './upper_incomplete_gamma_fract.js' );


				// MAIN //

				/**
				* Evaluate the lower incomplete gamma integral via a series expansion and divide by `gamma(z)` to normalize.
				*
				* @private
				* @param {number} a - function parameter
				* @param {number} z - function parameter
				* @returns {number} function value
				*/
				function upperGammaFraction( a, z ) {
					var f = upperIncompleteGammaFract( a, z );
					return 1.0 / ( z - a + 1.0 + continuedFraction( f ) );
				}


				// EXPORTS //

				module.exports = upperGammaFraction;
			},
			"upper_incomplete_gamma_fract.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006.
				* (C) Copyright Paul A. Bristow 2007.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MAIN //

				/**
				* Creates a function to evaluate a series expansion of the upper incomplete gamma fraction.
				*
				* @private
				* @param {number} a1 - function parameter
				* @param {number} z1 - function parameter
				* @returns {Function} series function
				*/
				function upperIncompleteGammaFract( a1, z1 ) {
					var z = z1 - a1 + 1.0;
					var a = a1;
					var k = 0;
					return next;

					/**
					* Calculate the next term of the series.
					*
					* @private
					* @returns {Array} series expansion terms
					*/
					function next() {
						k += 1;
						z += 2.0;
						return [
							k * (a - k),
							z
						];
					}
				}


				// EXPORTS //

				module.exports = upperIncompleteGammaFract;
			}
		}
	},
	"@stdlib/math-base-special-gammaln": {
		":mainpath:": "./lib",
		"lib": {
			"gammaln.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_lgamma_r.c}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
				*
				* Developed at SunPro, a Sun Microsystems, Inc. business.
				* Permission to use, copy, modify, and distribute this
				* software is freely granted, provided that this notice
				* is preserved.
				* ```
				*/

				'use strict';

				// MODULES //

				var isnan = require( '@stdlib/math-base-assert-is-nan' );
				var isInfinite = require( '@stdlib/math-base-assert-is-infinite' );
				var abs = require( '@stdlib/math-base-special-abs' );
				var ln = require( '@stdlib/math-base-special-ln' );
				var trunc = require( '@stdlib/math-base-special-trunc' );
				var sinpi = require( '@stdlib/math-base-special-sinpi' );
				var PI = require( '@stdlib/constants-float64-pi' );
				var PINF = require( '@stdlib/constants-float64-pinf' );
				var polyvalA1 = require( './polyval_a1.js' );
				var polyvalA2 = require( './polyval_a2.js' );
				var polyvalR = require( './polyval_r.js' );
				var polyvalS = require( './polyval_s.js' );
				var polyvalT1 = require( './polyval_t1.js' );
				var polyvalT2 = require( './polyval_t2.js' );
				var polyvalT3 = require( './polyval_t3.js' );
				var polyvalU = require( './polyval_u.js' );
				var polyvalV = require( './polyval_v.js' );
				var polyvalW = require( './polyval_w.js' );


				// VARIABLES //

				var A1C = 7.72156649015328655494e-02; // 0x3FB3C467E37DB0C8
				var A2C = 3.22467033424113591611e-01; // 0x3FD4A34CC4A60FAD
				var RC = 1.0;
				var SC = -7.72156649015328655494e-02; // 0xBFB3C467E37DB0C8
				var T1C = 4.83836122723810047042e-01; // 0x3FDEF72BC8EE38A2
				var T2C = -1.47587722994593911752e-01; // 0xBFC2E4278DC6C509
				var T3C = 6.46249402391333854778e-02; // 0x3FB08B4294D5419B
				var UC = -7.72156649015328655494e-02; // 0xBFB3C467E37DB0C8
				var VC = 1.0;
				var WC = 4.18938533204672725052e-01; // 0x3FDACFE390C97D69
				var YMIN = 1.461632144968362245;
				var TWO52 = 4503599627370496; // 2**52
				var TWO58 = 288230376151711744; // 2**58
				var TINY = 8.470329472543003e-22;
				var TC = 1.46163214496836224576e+00; // 0x3FF762D86356BE3F
				var TF = -1.21486290535849611461e-01; // 0xBFBF19B9BCC38A42
				var TT = -3.63867699703950536541e-18; // 0xBC50C7CAA48A971F => TT = -(tail of TF)


				// MAIN //

				/**
				* Evaluates the natural logarithm of the gamma function.
				*
				* ## Method
				*
				* 1.  Argument reduction for \\(0 < x \leq 8\\). Since \\(\Gamma(1+s) = s \Gamma(s)\\), for \\(x \in \[0,8]\\), we may reduce \\(x\\) to a number in \\(\[1.5,2.5]\\) by
				*
				*     ```tex
				*     \operatorname{lgamma}(1+s) = \ln(s) + \operatorname{lgamma}(s)
				*     ```
				*
				*     For example,
				*
				*     ```tex
				*     \begin{align*}
				*     \operatorname{lgamma}(7.3) &= \ln(6.3) + \operatorname{lgamma}(6.3) \\
				*     &= \ln(6.3 \cdot 5.3) + \operatorname{lgamma}(5.3) \\
				*     &= \ln(6.3 \cdot 5.3 \cdot 4.3 \cdot 3.3 \cdot2.3) + \operatorname{lgamma}(2.3)
				*     \end{align*}
				*     ```
				*
				* 2.  Compute a polynomial approximation of \\(\mathrm{lgamma}\\) around its minimum (\\(\mathrm{ymin} = 1.461632144968362245\\)) to maintain monotonicity. On the interval \\(\[\mathrm{ymin} - 0.23, \mathrm{ymin} + 0.27]\\) (i.e., \\(\[1.23164,1.73163]\\)), we let \\(z = x - \mathrm{ymin}\\) and use
				*
				*     ```tex
				*     \operatorname{lgamma}(x) = -1.214862905358496078218 + z^2 \cdot \operatorname{poly}(z)
				*     ```
				*
				*     where \\(\operatorname{poly}(z)\\) is a \\(14\\) degree polynomial.
				*
				* 3.  Compute a rational approximation in the primary interval \\(\[2,3]\\). Let \\( s = x - 2.0 \\). We can thus use the approximation
				*
				*     ```tex
				*     \operatorname{lgamma}(x) = \frac{s}{2} + s\frac{\operatorname{P}(s)}{\operatorname{Q}(s)}
				*     ```
				*
				*     with accuracy
				*
				*     ```tex
				*     \biggl|\frac{\mathrm{P}}{\mathrm{Q}} - \biggr(\operatorname{lgamma}(x)-\frac{s}{2}\biggl)\biggl| < 2^{-61.71}
				*     ```
				*
				*     The algorithms are based on the observation
				*
				*     ```tex
				*     \operatorname{lgamma}(2+s) = s(1 - \gamma) + \frac{\zeta(2) - 1}{2} s^2 - \frac{\zeta(3) - 1}{3} s^3 + \ldots
				*     ```
				*
				*     where \\(\zeta\\) is the zeta function and \\(\gamma = 0.5772156649...\\) is the Euler-Mascheroni constant, which is very close to \\(0.5\\).
				*
				* 4.  For \\(x \geq 8\\),
				*
				*     ```tex
				*     \operatorname{lgamma}(x) \approx \biggl(x-\frac{1}{2}\biggr) \ln(x) - x + \frac{\ln(2\pi)}{2} + \frac{1}{12x} - \frac{1}{360x^3} + \ldots
				*     ```
				*
				*     which can be expressed
				*
				*     ```tex
				*     \operatorname{lgamma}(x) \approx \biggl(x-\frac{1}{2}\biggr)(\ln(x)-1)-\frac{\ln(2\pi)-1}{2} + \ldots
				*     ```
				*
				*     Let \\(z = \frac{1}{x}\\). We can then use the approximation
				*
				*     ```tex
				*     f(z) = \operatorname{lgamma}(x) - \biggl(x-\frac{1}{2}\biggr)(\ln(x)-1)
				*     ```
				*
				*     by
				*
				*     ```tex
				*     w = w_0 + w_1 z + w_2 z^3 + w_3 z^5 + \ldots + w_6 z^{11}
				*     ```
				*
				*     where
				*
				*     ```tex
				*     |w - f(z)| < 2^{-58.74}
				*     ```
				*
				* 5.  For negative \\(x\\), since
				*
				*     ```tex
				*     -x \Gamma(-x) \Gamma(x) = \frac{\pi}{\sin(\pi x)}
				*     ```
				*
				*     where \\(\Gamma\\) is the gamma function, we have
				*
				*     ```tex
				*     \Gamma(x) = \frac{\pi}{\sin(\pi x)(-x)\Gamma(-x)}
				*     ```
				*
				*     Since \\(\Gamma(-x)\\) is positive,
				*
				*     ```tex
				*     \operatorname{sign}(\Gamma(x)) = \operatorname{sign}(\sin(\pi x))
				*     ```
				*
				*     for \\(x < 0\\). Hence, for \\(x < 0\\),
				*
				*     ```tex
				*     \mathrm{signgam} = \operatorname{sign}(\sin(\pi x))
				*     ```
				*
				*     and
				*
				*     ```tex
				*     \begin{align*}
				*     \operatorname{lgamma}(x) &= \ln(|\Gamma(x)|) \\
				*     &= \ln\biggl(\frac{\pi}{|x \sin(\pi x)|}\biggr) - \operatorname{lgamma}(-x)
				*     \end{align*}
				*     ```
				*
				*     <!-- <note> -->
				*
				*     Note that one should avoid computing \\(\pi (-x)\\) directly in the computation of \\(\sin(\pi (-x))\\).
				*
				*     <!-- </note> -->
				*
				*
				* ## Special Cases
				*
				* ```tex
				* \begin{align*}
				* \operatorname{lgamma}(2+s) &\approx s (1-\gamma) & \mathrm{for\ tiny\ s} \\
				* \operatorname{lgamma}(x) &\approx -\ln(x) & \mathrm{for\ tiny\ x} \\
				* \operatorname{lgamma}(1) &= 0 & \\
				* \operatorname{lgamma}(2) &= 0 & \\
				* \operatorname{lgamma}(0) &= \infty & \\
				* \operatorname{lgamma}(\infty) &= \infty & \\
				* \operatorname{lgamma}(-\mathrm{integer}) &= \pm \infty
				* \end{align*}
				* ```
				*
				*
				* @param {number} x - input value
				* @returns {number} function value
				*
				* @example
				* var v = gammaln( 1.0 );
				* // returns 0.0
				*
				* @example
				* var v = gammaln( 2.0 );
				* // returns 0.0
				*
				* @example
				* var v = gammaln( 4.0 );
				* // returns ~1.792
				*
				* @example
				* var v = gammaln( -0.5 );
				* // returns ~1.266
				*
				* @example
				* var v = gammaln( 0.5 );
				* // returns ~0.572
				*
				* @example
				* var v = gammaln( 0.0 );
				* // returns Infinity
				*
				* @example
				* var v = gammaln( NaN );
				* // returns NaN
				*/
				function gammaln( x ) {
					var isNegative;
					var nadj;
					var flg;
					var p3;
					var p2;
					var p1;
					var p;
					var q;
					var t;
					var w;
					var y;
					var z;
					var r;

					// Special cases: NaN, +-infinity
					if ( isnan( x ) || isInfinite( x ) ) {
						return x;
					}
					// Special case: 0
					if ( x === 0.0 ) {
						return PINF;
					}
					if ( x < 0.0 ) {
						isNegative = true;
						x = -x;
					} else {
						isNegative = false;
					}
					// If |x| < 2**-70, return -ln(|x|)
					if ( x < TINY ) {
						return -ln( x );
					}
					if ( isNegative ) {
						// If |x| >= 2**52, must be -integer
						if ( x >= TWO52 ) {
							return PINF;
						}
						t = sinpi( x );
						if ( t === 0.0 ) {
							return PINF;
						}
						nadj = ln( PI / abs( t*x ) );
					}
					// If x equals 1 or 2, return 0
					if ( x === 1.0 || x === 2.0 ) {
						return 0.0;
					}
					// If x < 2, use lgamma(x) = lgamma(x+1) - log(x)
					if ( x < 2.0 ) {
						if ( x <= 0.9 ) {
							r = -ln( x );

							// 0.7316 <= x <=  0.9
							if ( x >= ( YMIN - 1.0 + 0.27 ) ) {
								y = 1.0 - x;
								flg = 0;
							}
							// 0.2316 <= x < 0.7316
							else if ( x >= (YMIN - 1.0 - 0.27) ) {
								y = x - (TC - 1.0);
								flg = 1;
							}
							// 0 < x < 0.2316
							else {
								y = x;
								flg = 2;
							}
						} else {
							r = 0.0;

							// 1.7316 <= x < 2
							if ( x >= (YMIN + 0.27) ) {
								y = 2.0 - x;
								flg = 0;
							}
							// 1.2316 <= x < 1.7316
							else if ( x >= (YMIN - 0.27) ) {
								y = x - TC;
								flg = 1;
							}
							// 0.9 < x < 1.2316
							else {
								y = x - 1.0;
								flg = 2;
							}
						}
						switch ( flg ) { // eslint-disable-line default-case
						case 0:
							z = y * y;
							p1 = A1C + (z*polyvalA1( z ));
							p2 = z * (A2C + (z*polyvalA2( z )));
							p = (y*p1) + p2;
							r += ( p - (0.5*y) );
							break;
						case 1:
							z = y * y;
							w = z * y;
							p1 = T1C + (w*polyvalT1( w ));
							p2 = T2C + (w*polyvalT2( w ));
							p3 = T3C + (w*polyvalT3( w ));
							p = (z*p1) - (TT - (w*(p2+(y*p3))));
							r += ( TF + p );
							break;
						case 2:
							p1 = y * (UC + (y*polyvalU( y )));
							p2 = VC + (y*polyvalV( y ));
							r += (-0.5*y) + (p1/p2);
							break;
						}
					}
					// 2 <= x < 8
					else if ( x < 8.0 ) {
						flg = trunc( x );
						y = x - flg;
						p = y * (SC + (y*polyvalS( y )));
						q = RC + (y*polyvalR( y ));
						r = (0.5*y) + (p/q);
						z = 1.0; // gammaln(1+s) = ln(s) + gammaln(s)
						switch ( flg ) { // eslint-disable-line default-case
						case 7:
							z *= y + 6.0;

							/* falls through */
						case 6:
							z *= y + 5.0;

							/* falls through */
						case 5:
							z *= y + 4.0;

							/* falls through */
						case 4:
							z *= y + 3.0;

							/* falls through */
						case 3:
							z *= y + 2.0;
							r += ln( z );
						}
					}
					// 8 <= x < 2**58
					else if ( x < TWO58 ) {
						t = ln( x );
						z = 1.0 / x;
						y = z * z;
						w = WC + (z*polyvalW( y ));
						r = ((x-0.5)*(t-1.0)) + w;
					}
					// 2**58 <= x <= Inf
					else {
						r = x * ( ln(x)-1.0 );
					}
					if ( isNegative ) {
						r = nadj - r;
					}
					return r;
				}


				// EXPORTS //

				module.exports = gammaln;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Evaluate the natural logarithm of the gamma function.
				*
				* @module @stdlib/math-base-special-gammaln
				*
				* @example
				* var gammaln = require( '@stdlib/math-base-special-gammaln' );
				*
				* var v = gammaln( 1.0 );
				* // returns 0.0
				*
				* v = gammaln( 2.0 );
				* // returns 0.0
				*
				* v = gammaln( 4.0 );
				* // returns ~1.792
				*
				* v = gammaln( -0.5 );
				* // returns ~1.266
				*
				* v = gammaln( 0.5 );
				* // returns ~0.572
				*
				* v = gammaln( 0.0 );
				* // returns Infinity
				*
				* v = gammaln( NaN );
				* // returns NaN
				*/

				// MODULES //

				var gammaln = require( './gammaln.js' );


				// EXPORTS //

				module.exports = gammaln;
			},
			"polyval_a1.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 0.06735230105312927;
					}
					return 0.06735230105312927 + (x * (0.007385550860814029 + (x * (0.0011927076318336207 + (x * (0.00022086279071390839 + (x * 0.000025214456545125733))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_a2.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 0.020580808432516733;
					}
					return 0.020580808432516733 + (x * (0.0028905138367341563 + (x * (0.0005100697921535113 + (x * (0.00010801156724758394 + (x * 0.000044864094961891516))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_r.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 1.3920053346762105;
					}
					return 1.3920053346762105 + (x * (0.7219355475671381 + (x * (0.17193386563280308 + (x * (0.01864591917156529 + (x * (0.0007779424963818936 + (x * 0.000007326684307446256))))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_s.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 0.21498241596060885;
					}
					return 0.21498241596060885 + (x * (0.325778796408931 + (x * (0.14635047265246445 + (x * (0.02664227030336386 + (x * (0.0018402845140733772 + (x * 0.00003194753265841009))))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_t1.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return -0.032788541075985965;
					}
					return -0.032788541075985965 + (x * (0.006100538702462913 + (x * (-0.0014034646998923284 + (x * 0.00031563207090362595))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_t2.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 0.01797067508118204;
					}
					return 0.01797067508118204 + (x * (-0.0036845201678113826 + (x * (0.000881081882437654 + (x * -0.00031275416837512086))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_t3.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return -0.010314224129834144;
					}
					return -0.010314224129834144 + (x * (0.0022596478090061247 + (x * (-0.0005385953053567405 + (x * 0.0003355291926355191))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_u.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 0.6328270640250934;
					}
					return 0.6328270640250934 + (x * (1.4549225013723477 + (x * (0.9777175279633727 + (x * (0.22896372806469245 + (x * 0.013381091853678766))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_v.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 2.4559779371304113;
					}
					return 2.4559779371304113 + (x * (2.128489763798934 + (x * (0.7692851504566728 + (x * (0.10422264559336913 + (x * 0.003217092422824239))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_w.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 0.08333333333333297;
					}
					return 0.08333333333333297 + (x * (-0.0027777777772877554 + (x * (0.0007936505586430196 + (x * (-0.00059518755745034 + (x * (0.0008363399189962821 + (x * -0.0016309293409657527))))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			}
		}
	},
	"@stdlib/math-base-special-kernel-betainc": {
		":mainpath:": "./lib",
		"lib": {
			"assign.js": function (exports, module, require) {
				/* eslint-disable max-statements, max-lines */

				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006.
				* (C) Copyright Paul A. Bristow 2007.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var isnan = require( '@stdlib/math-base-assert-is-nan' );
				var expm1 = require( '@stdlib/math-base-special-expm1' );
				var floor = require( '@stdlib/math-base-special-floor' );
				var log1p = require( '@stdlib/math-base-special-log1p' );
				var asin = require( '@stdlib/math-base-special-asin' );
				var beta = require( '@stdlib/math-base-special-beta' );
				var sqrt = require( '@stdlib/math-base-special-sqrt' );
				var exp = require( '@stdlib/math-base-special-exp' );
				var pow = require( '@stdlib/math-base-special-pow' );
				var max = require( '@stdlib/math-base-special-max' );
				var min = require( '@stdlib/math-base-special-min' );
				var MAX_FLOAT64 = require( '@stdlib/constants-float64-max' );
				var MIN_FLOAT64 = require( '@stdlib/constants-float64-smallest-normal' );
				var MAX_INT32 = require( '@stdlib/constants-int32-max' );
				var HALF_PI = require( '@stdlib/constants-float64-half-pi' );
				var PI = require( '@stdlib/constants-float64-pi' );
				var betaSmallBLargeASeries = require( './beta_small_b_large_a_series.js' );
				var risingFactorialRatio = require( './rising_factorial_ratio.js' );
				var ibetaPowerTerms = require( './ibeta_power_terms.js' );
				var ibetaFraction2 = require( './ibeta_fraction2.js');
				var binomialCCDF = require( './binomial_ccdf.js' );
				var ibetaAStep = require( './ibeta_a_step.js' );
				var ibetaSeries = require( './ibeta_series.js' );


				// VARIABLES //

				var ONE_OVER_PI = 1.0 / PI;


				// MAIN //

				/**
				* Evaluates the incomplete beta function and its first derivative and assigns results to a provided output array.
				*
				* ## Notes
				*
				* -   This function divides up the input range and selects the right implementation method for each domain.
				*
				* @param {Probability} x - function input
				* @param {NonNegativeNumber} a - function parameter
				* @param {NonNegativeNumber} b - function parameter
				* @param {boolean} regularized - boolean indicating if the function should evaluate the regularized boolean beta function
				* @param {boolean} upper - boolean indicating if the function should return the upper tail of the incomplete beta function instead
				* @param {(Array|TypedArray|Object)} out - output array
				* @param {integer} stride - output array stride
				* @param {NonNegativeInteger} offset - output array index offset
				* @returns {(Array|TypedArray|Object)} function value and first derivative
				*
				* @example
				* var out = ibetaImp( 0.5, 2.0, 2.0, false, false, [ 0.0, 0.0 ], 1, 0 );
				* // returns [ ~0.083, ~1.5 ]
				*
				* @example
				* var out = ibetaImp( 0.2, 1.0, 2.0, false, true, [ 0.0, 0.0 ], 1, 0 );
				* // returns [ 0.32, 1.6 ]
				*
				* @example
				* var out = ibetaImp( 0.2, 1.0, 2.0, true, true, [ 0.0, 0.0 ], 1, 0 );
				* // returns [ 0.64, 1.6 ]
				*/
				function ibetaImp( x, a, b, regularized, upper, out, stride, offset ) {
					var lambda;
					var prefix;
					var fract;
					var bbar;
					var div;
					var tmp;
					var i0;
					var i1;
					var k;
					var n;
					var p;
					var y;

					y = 1.0 - x;
					i0 = offset;
					i1 = offset + stride;

					// Derivative not set...
					out[ i1 ] = -1;
					if ( isnan( x ) || x < 0.0 || x > 1.0 ) {
						out[ i0 ] = NaN;
						out[ i1 ] = NaN;
						return out;
					}
					if ( regularized ) {
						if ( a < 0.0 || b < 0.0 ) {
							out[ i0 ] = NaN;
							out[ i1 ] = NaN;
							return out;
						}
						// Extend to a few very special cases...
						if ( a === 0.0 ) {
							if ( b === 0.0 ) {
								out[ i0 ] = NaN;
								out[ i1 ] = NaN;
								return out;
							}
							if ( b > 0.0 ) {
								out[ i0 ] = ( upper ) ? 0.0 : 1.0;
								return out;
							}
						} else if ( b === 0.0 ) {
							if ( a > 0.0 ) {
								out[ i0 ] = ( upper ) ? 1.0 : 0.0;
								return out;
							}
						}
					} else if ( a <= 0.0 || b <= 0.0 ) {
						out[ i0 ] = NaN;
						out[ i1 ] = NaN;
						return out;
					}
					if ( x === 0.0 ) {
						if ( a === 1.0 ) {
							out[ i1 ] = 1.0;
						} else {
							out[ i1 ] = ( a < 1.0 ) ? MAX_FLOAT64 / 2.0 : MIN_FLOAT64 * 2.0;
						}
						if ( upper ) {
							out[ i0 ] = ( regularized ) ? 1.0 : beta( a, b );
							return out;
						}
						out[ i0 ] = 0.0;
						return out;
					}
					if ( x === 1.0 ) {
						if ( b === 1.0 ) {
							out[ i1 ] = 1.0;
						} else {
							out[ i1 ] = ( b < 1.0 ) ? MAX_FLOAT64 / 2.0 : MIN_FLOAT64 * 2.0;
						}
						if ( upper ) {
							out[ i0 ] = 0.0;
						} else {
							out[ i0 ] = ( regularized ) ? 1.0 : beta( a, b );
						}
						return out;
					}
					if ( a === 0.5 && b === 0.5 ) {
						out[ i1 ] = ONE_OVER_PI * sqrt( y * x );

						// We have an arcsine distribution:
						p = ( upper ) ? asin( sqrt(y) ) : asin( sqrt(x) );
						p /= HALF_PI;
						if ( !regularized ) {
							p *= PI;
						}
						out[ i0 ] = p;
						return out;
					}
					if ( a === 1.0 ) {
						tmp = b;
						b = a;
						a = tmp;

						tmp = y;
						y = x;
						x = tmp;

						upper = !upper;
					}
					if ( b === 1.0 ) {
						// Special case see: http://functions.wolfram.com/GammaBetaErf/BetaRegularized/03/01/01/
						if ( a === 1.0 ) {
							out[ i0 ] = ( upper ) ? y : x;
							out[ i1 ] = 1.0;
							return out;
						}
						out[ i1 ] = a * pow( x, a - 1.0 );
						if ( y < 0.5 ) {
							p = ( upper ) ? -expm1( a * log1p(-y) ) : exp( a * log1p(-y) );
						} else {
							p = ( upper ) ? -( pow( x, a ) - 1.0 ) : pow( x, a );
						}
						if ( !regularized ) {
							p /= a;
						}
						out[ i0 ] = p;
						return out;
					}
					if ( min( a, b ) <= 1.0 ) {
						if ( x > 0.5 ) {
							tmp = b;
							b = a;
							a = tmp;

							tmp = y;
							y = x;
							x = tmp;

							upper = !upper;
						}
						if ( max( a, b ) <= 1.0 ) {
							// Both a,b < 1:
							if ( (a >= min( 0.2, b ) ) || ( pow(x, a) <= 0.9 ) ) {
								if ( upper ) {
									fract = -( ( regularized ) ? 1.0 : beta( a, b ) );
									upper = false;
									fract = -ibetaSeries( a, b, x, fract, regularized, out, y );
								} else {
									fract = ibetaSeries( a, b, x, 0, regularized, out, y );
								}
							} else {
								tmp = b;
								b = a;
								a = tmp;

								tmp = y;
								y = x;
								x = tmp;

								upper = !upper;
								if ( y >= 0.3 ) {
									if ( upper ) {
										fract = -( ( regularized ) ? 1.0 : beta( a, b ) );
										upper = false;
										fract = -ibetaSeries( a, b, x, fract, regularized, out, y ); // eslint-disable-line max-len
									} else {
										fract = ibetaSeries( a, b, x, 0, regularized, out, y );
									}
								} else {
									// Sidestep on a, and then use the series representation:
									if ( regularized ) {
										prefix = 1;
									} else {
										prefix = risingFactorialRatio( a + b, a, 20 );
									}
									fract = ibetaAStep( a, b, x, y, 20, regularized, out );
									if ( upper ) {
										fract -= ( ( regularized ) ? 1 : beta( a, b ) );
										upper = false;
										fract = -betaSmallBLargeASeries( a + 20.0, b, x, y, fract, prefix, regularized ); // eslint-disable-line max-len
									} else {
										fract = betaSmallBLargeASeries( a + 20.0, b, x, y, fract, prefix, regularized ); // eslint-disable-line max-len
									}
								}
							}
						} else if ( b <= 1.0 || ( x < 0.1 && ( pow( b * x, a ) <= 0.7 ) ) ) {
							if ( upper ) {
								fract = -( ( regularized ) ? 1 : beta( a, b ) );
								upper = false;
								fract = -ibetaSeries( a, b, x, fract, regularized, out, y );
							} else {
								fract = ibetaSeries( a, b, x, 0.0, regularized, out, y );
							}
						} else {
							tmp = b;
							b = a;
							a = tmp;

							tmp = y;
							y = x;
							x = tmp;
							upper = !upper;

							if ( y >= 0.3 ) {
								if (upper) {
									fract = -(( regularized ) ? 1.0 : beta( a, b ));
									upper = false;
									fract = -ibetaSeries( a, b, x, fract, regularized, out, y );
								} else {
									fract = ibetaSeries( a, b, x, 0.0, regularized, out, y );
								}
							}
							else if ( a >= 15.0 ) {
								if ( upper ) {
									fract = -(( regularized ) ? 1.0 : beta( a, b ));
									upper = false;
									fract = -betaSmallBLargeASeries( a, b, x, y, fract, 1.0, regularized ); // eslint-disable-line max-len
								} else {
									fract = betaSmallBLargeASeries( a, b, x, y, 0.0, 1.0, regularized ); // eslint-disable-line max-len
								}
							}
							else {
								if ( regularized ) {
									prefix = 1;
								} else {
									// Sidestep to improve errors:
									prefix = risingFactorialRatio( a + b, a, 20.0 );
								}
								fract = ibetaAStep( a, b, x, y, 20.0, regularized, out );
								if ( upper ) {
									fract -= ( ( regularized ) ? 1.0 : beta( a, b ) );
									upper = false;
									fract = -betaSmallBLargeASeries( a + 20.0, b, x, y, fract, prefix, regularized ); // eslint-disable-line max-len
								} else {
									fract = betaSmallBLargeASeries( a + 20.0, b, x, y, fract, prefix, regularized ); // eslint-disable-line max-len
								}
							}
						}
					} else {
						// Both a,b >= 1:
						if ( a < b ) {
							lambda = a - ( (a + b) * x );
						} else {
							lambda = ( (a + b) * y ) - b;
						}
						if ( lambda < 0.0 ) {
							tmp = b;
							b = a;
							a = tmp;

							tmp = y;
							y = x;
							x = tmp;
							upper = !upper;
						}
						if ( b < 40.0 ) {
							if (
								floor(a) === a &&
								floor(b) === b &&
								a < MAX_INT32 - 100
							) {
								// Relate to the binomial distribution and use a finite sum:
								k = a - 1.0;
								n = b + k;
								fract = binomialCCDF( n, k, x, y );
								if ( !regularized ) {
									fract *= beta( a, b );
								}
							}
							else if ( b * x <= 0.7 ) {
								if ( upper ) {
									fract = -( ( regularized ) ? 1.0 : beta( a, b ) );
									upper = false;
									fract = -ibetaSeries( a, b, x, fract, regularized, out, y );
								} else {
									fract = ibetaSeries( a, b, x, 0.0, regularized, out, y );
								}
							}
							else if ( a > 15.0 ) {
								// Sidestep so we can use the series representation:
								n = floor( b );
								if ( n === b ) {
									n -= 1;
								}
								bbar = b - n;
								if ( regularized ) {
									prefix = 1;
								} else {
									prefix = risingFactorialRatio( a + bbar, bbar, n );
								}
								fract = ibetaAStep( bbar, a, y, x, n, regularized );
								fract = betaSmallBLargeASeries( a, bbar, x, y, fract, 1.0, regularized ); // eslint-disable-line max-len
								fract /= prefix;
							}
							else if ( regularized ) {
								n = floor( b );
								bbar = b - n;
								if ( bbar <= 0 ) {
									n -= 1;
									bbar += 1;
								}
								fract = ibetaAStep( bbar, a, y, x, n, regularized );
								fract += ibetaAStep( a, bbar, x, y, 20.0, regularized );
								if ( upper ) {
									fract -= 1;
								}
								fract = betaSmallBLargeASeries( a + 20.0, bbar, x, y, fract, 1, regularized ); // eslint-disable-line max-len
								if ( upper ) {
									fract = -fract;
									upper = false;
								}
							}
							else {
								fract = ibetaFraction2( a, b, x, y, regularized, out );
							}
						} else {
							fract = ibetaFraction2( a, b, x, y, regularized, out );
						}
					}
					if ( out[ i1 ] < 0.0 ) {
						out[ i1 ] = ibetaPowerTerms( a, b, x, y, true );
					}
					div = y * x;
					if ( out[ i1 ] !== 0.0 ) {
						if ( ( MAX_FLOAT64 * div < out[ i1 ] ) ) {
							// Overflow, return an arbitrarily large value:
							out[ i1 ] = MAX_FLOAT64 / 2.0;
						} else {
							out[ i1 ] /= div;
						}
					}
					out[ i0 ] = ( upper ) ? ( ( regularized ) ? 1.0 : beta( a, b ) ) - fract : fract; // eslint-disable-line max-len
					return out;
				}


				// EXPORTS //

				module.exports = ibetaImp;
			},
			"beta_small_b_large_a_series.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var gammaDeltaRatio = require( '@stdlib/math-base-special-gamma-delta-ratio' );
				var factorial = require( '@stdlib/math-base-special-factorial' );
				var gammainc = require( '@stdlib/math-base-special-gammainc' );
				var log1p = require( '@stdlib/math-base-special-log1p' );
				var abs = require( '@stdlib/math-base-special-abs' );
				var pow = require( '@stdlib/math-base-special-pow' );
				var ln = require( '@stdlib/math-base-special-ln' );
				var MIN_VALUE = require( '@stdlib/constants-float64-smallest-normal' );
				var EPSILON = require( '@stdlib/constants-float64-eps' );
				var fullIGammaPrefix = require( './full_igamma_prefix.js' );
				var regularizedGammaPrefix = require( './regularized_gamma_prefix.js' );


				// VARIABLES //

				var p = new Array( 30 );


				// MAIN //

				/**
				* This is DiDonato and Morris's BGRAT routine, see Eq's 9 through 9.6.
				*
				* @private
				* @param {NonNegativeNumber} a - function parameter
				* @param {NonNegativeNumber} b - function parameter
				* @param {Probability} x - function parameter
				* @param {Probability} y - probability equal to `1-x`
				* @param {NonNegativeInteger} s0 - initial value
				* @param {number} mult - initial value
				* @param {boolean} normalized - boolean indicating whether to evaluate the regularized or non-regularized incomplete beta function
				* @returns {number} function value
				*/
				function betaSmallBLargeASeries( a, b, x, y, s0, mult, normalized ) {
					var prefix;
					var tmp1;
					var tnp1;
					var sum;
					var b2n;
					var bm1;
					var lx2;
					var lxp;
					var mbn;
					var lx;
					var t4;
					var h;
					var j;
					var m;
					var n;
					var r;
					var t;
					var u;

					// Some values we'll need later, these are Eq 9.1:
					bm1 = b - 1.0;
					t = a + ( bm1 / 2.0 );
					if ( y < 0.35 ) {
						lx = log1p( -y );
					} else {
						lx = ln( x );
					}
					u = -t * lx;

					// And from from 9.2:
					h = regularizedGammaPrefix( b, u );
					if ( h <= MIN_VALUE ) {
						return s0;
					}
					if ( normalized ) {
						prefix = h / gammaDeltaRatio( a, b );
						prefix /= pow( t, b );
					} else {
						prefix = fullIGammaPrefix( b, u ) / pow( t, b );
					}
					prefix *= mult;

					// We need the quantity Pn. Unfortunately, this is computed recursively and requires a full history of all the previous values. No choice but to declare a big table and hope it's big enough...
					p[ 0 ] = 1;  // see 9.3.

					// Now an initial value for J, see 9.6: gammainc( u, b, regularized, upper )
					j = gammainc( u, b, true, true );
					j /= h;

					// Now we can start to pull things together and evaluate the sum in Eq 9:
					sum = s0 + ( prefix * j ); // Value at N = 0

					// Some variables we'll need...
					tnp1 = 1.0; // 2*N+1
					lx2 = lx / 2.0;
					lx2 *= lx2;
					lxp = 1.0;
					t4 = 4.0 * t * t;
					b2n = b;
					for ( n = 1; n < p.length; ++n ) {
						// Begin by evaluating the next Pn from Eq 9.4:
						tnp1 += 2.0;
						p[ n ] = 0.0;
						mbn = b - n;
						tmp1 = 3;
						for ( m = 1; m < n; ++m ) {
							mbn = ( m * b ) - n;
							p[ n ] += mbn * p[ n-m ] / factorial( tmp1 );
							tmp1 += 2;
						}
						p[ n ] /= n;
						p[ n ] += bm1 / factorial( tnp1 );

						// Now we want Jn from Jn-1 using Eq 9.6:
						j = ( ( b2n * ( b2n+1.0 ) * j ) + ( ( u+b2n+1.0 ) * lxp ) ) / t4;
						lxp *= lx2;
						b2n += 2.0;

						// Pull it together with Eq 9:
						r = prefix * p[ n ] * j;
						sum += r;
						if ( r > 1.0 ) {
							if ( abs( r ) < abs( EPSILON * sum ) ) {
								break;
							}
						} else if ( abs( r / EPSILON ) < abs( sum ) ) {
							break;
						}
					}
					return sum;
				}


				// EXPORTS //

				module.exports = betaSmallBLargeASeries;
			},
			"binomial_ccdf.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var binomcoef = require( '@stdlib/math-base-special-binomcoef' );
				var floor = require( '@stdlib/math-base-special-floor' );
				var pow = require( '@stdlib/math-base-special-pow' );
				var MIN_VALUE = require( '@stdlib/constants-float64-smallest-normal' );


				// MAIN //

				/**
				* For integer arguments we can relate the incomplete beta to the complement of the binomial distribution cdf and use this finite sum.
				*
				* @private
				* @param {NonNegativeInteger} n - number of trials
				* @param {NonNegativeInteger} k - function input
				* @param {Probability} x - function input
				* @param {Probability} y - probability equal to `1-x`
				* @returns {number} sum
				*/
				function binomialCCDF( n, k, x, y ) {
					var startTerm;
					var result;
					var start;
					var term;
					var i;

					result = pow( x, n );
					if ( result > MIN_VALUE ) {
						term = result;
						for ( i = floor( n - 1 ); i > k; i-- ) {
							term *= ((i + 1) * y) / ((n - i) * x);
							result += term;
						}
					} else {
						// First term underflows so we need to start at the mode of the distribution and work outwards:
						start = floor( n * x );
						if ( start <= k + 1 ) {
							start = floor( k + 2 );
						}
						result = pow( x, start ) * pow( y, n - start );
						result *= binomcoef( floor(n), floor(start) );
						if ( result === 0.0 ) {
							// OK, starting slightly above the mode didn't work, we'll have to sum the terms the old fashioned way:
							for ( i = start - 1; i > k; i-- ) {
								result += pow( x, i ) * pow( y, n - i );
								result *= binomcoef( floor(n), floor(i) );
							}
						} else {
							term = result;
							startTerm = result;
							for ( i = start - 1; i > k; i-- ) {
								term *= ((i + 1) * y) / ((n - i) * x);
								result += term;
							}
							term = startTerm;
							for ( i = start + 1; i <= n; i++ ) {
								term *= (n - i + 1) * x / (i * y);
								result += term;
							}
						}
					}
					return result;
				}


				// EXPORTS //

				module.exports = binomialCCDF;
			},
			"full_igamma_prefix.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006.
				* (C) Copyright Paul A. Bristow 2007.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var exp = require( '@stdlib/math-base-special-exp' );
				var pow = require( '@stdlib/math-base-special-pow' );
				var ln = require( '@stdlib/math-base-special-ln' );
				var MAX_LN = require( '@stdlib/constants-float64-max-ln' );
				var MIN_LN = require( '@stdlib/constants-float64-min-ln' );


				// MAIN //

				/**
				* Calculates the power term prefix `(z^a)(e^-z)` used in the non-normalized incomplete gammas.
				*
				* @private
				* @param {number} a - function parameter
				* @param {number} z - function parameter
				* @returns {number} power term prefix
				*/
				function fullIGammaPrefix( a, z ) {
					var prefix;
					var alz;

					alz = a * ln( z );
					if ( z >= 1.0 ) {
						if ( ( alz < MAX_LN ) && ( -z > MIN_LN ) ) {
							prefix = pow( z, a ) * exp( -z );
						}
						else if ( a >= 1.0 ) {
							prefix = pow( z / exp(z/a), a );
						}
						else {
							prefix = exp( alz - z );
						}
					}
					else if ( alz > MIN_LN ) {
						prefix = pow( z, a ) * exp( -z );
					}
					else if ( z/a < MAX_LN ) {
						prefix = pow( z / exp(z/a), a );
					}
					else {
						prefix = exp( alz - z );
					}
					return prefix;
				}


				// EXPORTS //

				module.exports = fullIGammaPrefix;
			},
			"ibeta_a_step.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var ibetaPowerTerms = require( './ibeta_power_terms.js' );


				// MAIN //

				/**
				* Computes the difference between `ibeta(a,b,x)` and `ibeta(a+k,b,x)`.
				*
				* @private
				* @param {NonNegativeNumber} a - function parameter
				* @param {NonNegativeNumber} b - function parameter
				* @param {Probability} x - function parameter
				* @param {Probability} y - probability equal to `1-x`
				* @param {NonNegativeInteger} k - function input
				* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
				* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element
				* @returns {number} difference between ibeta(a,b,x) and ibeta(a+k,b,x)
				*/
				function ibetaAStep( a, b, x, y, k, normalized, out ) {
					var prefix;
					var term;
					var sum;
					var i;

					prefix = ibetaPowerTerms( a, b, x, y, normalized );
					if ( out ) {
						out[ 1 ] = prefix;
					}
					prefix /= a;
					if ( prefix === 0.0 ) {
						return prefix;
					}
					sum = 1.0;
					term = 1.0;

					// Series summation from 0 to k-1:
					for ( i = 0; i < k-1; ++i ) {
						term *= (a+b+i) * x / (a+i+1.0);
						sum += term;
					}
					prefix *= sum;
					return prefix;
				}


				// EXPORTS //

				module.exports = ibetaAStep;
			},
			"ibeta_fraction2.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_61_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var continuedFraction = require( '@stdlib/math-base-tools-continued-fraction' );
				var ibetaPowerTerms = require( './ibeta_power_terms.js' );


				// VARIABLES //

				var OPTS = {
					'keep': true,
					'maxIter': 1000
				};


				// FUNCTIONS //

				/**
				* Continued fraction for the incomplete beta.
				*
				* @private
				* @param {NonNegativeNumber} a - function parameter
				* @param {NonNegativeNumber} b - function parameter
				* @param {Probability} x - function parameter
				* @param {Probability} y - probability equal to `1-x`
				* @returns {Function} series function
				*/
				function ibetaFraction2t( a, b, x, y ) {
					var m = 0;
					return next;

					/**
					* Calculate the numerator and denominator of the next term of the series.
					*
					* @private
					* @returns {Array} series expansion terms
					*/
					function next() {
						var denom;
						var aN;
						var bN;

						aN = (a + m - 1) * (a + b + m - 1) * m * (b - m) * x * x;
						denom = a + ( 2.0*m ) - 1.0;
						aN /= denom * denom;
						bN = m;
						bN += (m * (b - m) * x) / ( a + ( 2.0*m ) - 1.0 );
						bN += ( (a+m) * ( (a*y) - (b*x) + 1.0 + ( m*(2.0-x) ) ) ) / ( a + (2.0*m) + 1.0 ); // eslint-disable-line max-len
						m += 1;
						return [ aN, bN ];
					}
				}


				// MAIN //

				/**
				* Evaluates the incomplete beta via the continued fraction representation.
				*
				* @private
				* @param {NonNegativeNumber} a - function parameter
				* @param {NonNegativeNumber} b - function parameter
				* @param {Probability} x - function parameter
				* @param {Probability} y - probability equal to `1-x`
				* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
				* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element
				* @returns {number} incomplete beta value
				*/
				function ibetaFraction2( a, b, x, y, normalized, out ) {
					var result;
					var fract;
					var f;

					result = ibetaPowerTerms( a, b, x, y, normalized );
					if ( out ) {
						out[ 1 ] = result;
					}
					if ( result === 0.0 ) {
						return result;
					}
					f = ibetaFraction2t( a, b, x, y );
					fract = continuedFraction( f, OPTS );
					return result / fract;
				}


				// EXPORTS //

				module.exports = ibetaFraction2;
			},
			"ibeta_power_terms.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var lanczosSumExpGScaled = require( '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled' );
				var maxabs = require( '@stdlib/math-base-special-maxabs' );
				var minabs = require( '@stdlib/math-base-special-minabs' );
				var expm1 = require( '@stdlib/math-base-special-expm1' );
				var log1p = require( '@stdlib/math-base-special-log1p' );
				var sqrt = require( '@stdlib/math-base-special-sqrt' );
				var abs = require( '@stdlib/math-base-special-abs' );
				var exp = require( '@stdlib/math-base-special-exp' );
				var pow = require( '@stdlib/math-base-special-pow' );
				var min = require( '@stdlib/math-base-special-min' );
				var ln = require( '@stdlib/math-base-special-ln' );
				var MAX_LN = require( '@stdlib/constants-float64-max-ln' );
				var MIN_LN = require( '@stdlib/constants-float64-min-ln' );
				var G = require( '@stdlib/constants-float64-gamma-lanczos-g' );
				var E = require( '@stdlib/constants-float64-e' );


				// MAIN //

				/**
				* Computes the leading power terms in the incomplete beta function.
				*
				* When normalized,
				*
				* ```tex
				* \frac{ x^a y^b }{ \operatorname{Beta}(a,b) }
				* ```
				*
				* and otherwise
				*
				* ```tex
				* x^a y^b
				* ```
				*
				* ## Notes
				*
				* -   Almost all of the error in the incomplete beta comes from this function, particularly when \\( a \\) and \\( b \\) are large. Computing large powers are _hard_ though, and using logarithms just leads to horrendous cancellation errors.
				*
				* -   For \\( l1 * l2 > 0 \\) or \\( \operatorname{min}( a, b ) < 1 \\), the two power terms both go in the same direction (toward zero or toward infinity). In this case if either term overflows or underflows, then the product of the two must do so also. Alternatively, if one exponent is less than one, then we can't productively use it to eliminate overflow or underflow from the other term.  Problems with spurious overflow/underflow can't be ruled out. In this case, but it is _very_ unlikely since one of the power terms will evaluate to a number close to 1.
				*
				* -   If \\( \max( \abs(l1), \abs(l2) ) < 0.5 \\), both exponents are near one and both the exponents are greater than one, and, further, these two power terms tend in opposite directions (one toward zero, the other toward infinity), so we have to combine the terms to avoid any risk of overflow or underflow. We do this by moving one power term inside the other, we have:
				*
				*     ```tex
				*     (1 + l_1)^a \cdot (1 + l_2)^b \\
				*     = ((1 + l_1) \cdot (1 + l_2)^(b/a))^a \\
				*     = (1 + l_1 + l_3 + l_1*l_3)^a
				*     ```
				*
				*     and
				*
				*     ```tex
				*     l_3 = (1 + l_2)^(b/a) - 1 \\
				*     = \exp((b/a) * \ln(1 + l_2)) - 1
				*     ```
				*
				*     The tricky bit is deciding which term to move inside. By preference, we move the larger term inside, so that the size of the largest exponent is reduced.  However, that can only be done as long as l3 (see above) is also small.
				*
				* @private
				* @param {NonNegativeNumber} a - function parameter
				* @param {NonNegativeNumber} b - function parameter
				* @param {Probability} x - function parameter
				* @param {Probability} y - probability equal to `1-x`
				* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
				* @returns {number} power terms
				*/
				function ibetaPowerTerms( a, b, x, y, normalized ) {
					var result;
					var smallA;
					var ratio;
					var agh;
					var bgh;
					var cgh;
					var l1;
					var l2;
					var l3;
					var p1;
					var b1;
					var b2;
					var c;
					var l;

					if ( !normalized ) {
						// Can we do better here?
						return pow( x, a ) * pow( y, b );
					}
					c = a + b;

					// Combine power terms with Lanczos approximation:
					agh = a + G - 0.5;
					bgh = b + G - 0.5;
					cgh = c + G - 0.5;
					result = lanczosSumExpGScaled( c );
					result /= lanczosSumExpGScaled( a ) * lanczosSumExpGScaled( b );

					// Combine with the leftover terms from the Lanczos approximation:
					result *= sqrt( bgh / E );
					result *= sqrt( agh / cgh );

					// `l1` and `l2` are the base of the exponents minus one:
					l1 = ( ( x * b ) - ( y * agh ) ) / agh;
					l2 = ( ( y * a ) - ( x * bgh ) ) / bgh;
					if ( minabs( l1, l2 ) < 0.2 ) {
						// When the base of the exponent is very near 1 we get really gross errors unless extra care is taken:
						if ( l1 * l2 > 0 || min( a, b ) < 1 ) {
							if ( abs(l1) < 0.1 ) {
								result *= exp( a * log1p( l1 ) );
							} else {
								result *= pow( ( x*cgh ) / agh, a );
							}
							if ( abs(l2) < 0.1 ) {
								result *= exp( b * log1p( l2 ) );
							} else {
								result *= pow((y * cgh) / bgh, b);
							}
						}
						else if ( maxabs( l1, l2 ) < 0.5 ) {
							smallA = a < b;
							ratio = b / a;
							if (
								(smallA && (ratio * l2 < 0.1)) ||
								(!smallA && (l1 / ratio > 0.1))
							) {
								l3 = expm1( ratio * log1p( l2 ) );
								l3 = l1 + l3 + ( l3 * l1 );
								l3 = a * log1p( l3 );
								result *= exp( l3 );
							}
							else {
								l3 = expm1( log1p( l1 ) / ratio );
								l3 = l2 + l3 + ( l3 * l2 );
								l3 = b * log1p( l3 );
								result *= exp( l3 );
							}
						}
						else if ( abs(l1) < abs(l2) ) {
							// First base near 1 only:
							l = ( a * log1p( l1 ) ) + ( b * ln( ( y*cgh ) / bgh ) );
							if ( l <= MIN_LN || l >= MAX_LN ) {
								l += ln(result);
								if ( l >= MAX_LN ) {
									return NaN;
								}
								result = exp( l );
							} else {
								result *= exp( l );
							}
						}
						else {
							// Second base near 1 only:
							l = ( b * log1p( l2 ) ) + ( a * ln( (x*cgh) / agh ) );
							if ( l <= MIN_LN || l >= MAX_LN ) {
								l += ln(result);
								if ( l >= MAX_LN ) {
									return NaN;
								}
								result = exp( l );
							} else {
								result *= exp( l );
							}
						}
					}
					else {
						// General case:
						b1 = (x * cgh) / agh;
						b2 = (y * cgh) / bgh;
						l1 = a * ln(b1);
						l2 = b * ln(b2);
						if (
							l1 >= MAX_LN ||
							l1 <= MIN_LN ||
							l2 >= MAX_LN ||
							l2 <= MIN_LN
						) {
							// Oops, under/overflow, sidestep if we can:
							if ( a < b ) {
								p1 = pow( b2, b / a );
								l3 = a * ( ln(b1) + ln(p1) );
								if ( l3 < MAX_LN && l3 > MIN_LN ) {
									result *= pow( p1 * b1, a );
								} else {
									l2 += l1 + ln(result);
									if ( l2 >= MAX_LN ) {
										return NaN;
									}
									result = exp( l2 );
								}
							}
							else {
								p1 = pow( b1, a / b );
								l3 = ( ln(p1) + ln(b2) ) * b;
								if ( l3 < MAX_LN && l3 > MIN_LN ) {
									result *= pow( p1 * b2, b );
								} else {
									l2 += l1 + ln( result );
									if (l2 >= MAX_LN) {
										return NaN;
									}
									result = exp( l2 );
								}
							}
						}
						else {
							// Finally the normal case:
							result *= pow( b1, a ) * pow( b2, b );
						}
					}
					return result;
				}


				// EXPORTS //

				module.exports = ibetaPowerTerms;
			},
			"ibeta_series.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var lanczosSumExpGScaled = require( '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled' );
				var sumSeries = require( '@stdlib/math-base-tools-sum-series' );
				var log1p = require( '@stdlib/math-base-special-log1p' );
				var sqrt = require( '@stdlib/math-base-special-sqrt' );
				var exp = require( '@stdlib/math-base-special-exp' );
				var pow = require( '@stdlib/math-base-special-pow' );
				var ln = require( '@stdlib/math-base-special-ln' );
				var MIN_VALUE = require( '@stdlib/constants-float64-smallest-normal' );
				var MAX_LN = require( '@stdlib/constants-float64-max-ln' );
				var MIN_LN = require( '@stdlib/constants-float64-min-ln' );
				var G = require( '@stdlib/constants-float64-gamma-lanczos-g' );
				var E = require( '@stdlib/constants-float64-e' );


				// VARIABLES //

				var opts = {
					'maxTerms': 100
				};


				// FUNCTIONS //

				/**
				* Series approximation to the incomplete beta.
				*
				* @private
				* @param {NonNegativeNumber} a - function parameter
				* @param {NonNegativeNumber} b - function parameter
				* @param {Probability} x - function parameter
				* @param {number} result - initial result value
				* @returns {Function} series function
				*/
				function ibetaSeriesT( a, b, x, result ) {
					var poch = 1.0 - b;
					var n = 1;
					return next;

					/**
					* Calculate the next term of the series.
					*
					* @private
					* @returns {number} series expansion term
					*/
					function next() {
						var r = result / a;
						a += 1.0;
						result *= poch * x / n;
						n += 1;
						poch += 1.0;
						return r;
					}
				}


				// MAIN //

				/**
				* Incomplete beta series.
				*
				* @private
				* @param {NonNegativeNumber} a - function parameter
				* @param {NonNegativeNumber} b - function parameter
				* @param {Probability} x - function parameter
				* @param {NonNegativeInteger} s0 - initial value
				* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function
				* @param {(Array|TypedArray|Object)} out - output array holding the derivative as the second element
				* @param {Probability} y - probability equal to `1-x`
				* @returns {number} function value
				*/
				function ibetaSeries( a, b, x, s0, normalized, out, y ) {
					var result;
					var agh;
					var bgh;
					var cgh;
					var l1;
					var l2;
					var c;
					var s;

					if ( normalized ) {
						c = a + b;

						// Incomplete beta power term, combined with the Lanczos approximation:
						agh = a + G - 0.5;
						bgh = b + G - 0.5;
						cgh = c + G - 0.5;
						result = lanczosSumExpGScaled( c ) / ( lanczosSumExpGScaled( a ) * lanczosSumExpGScaled( b ) ); // eslint-disable-line max-len

						l1 = ln( cgh / bgh ) * ( b - 0.5 );
						l2 = ln( x * cgh / agh ) * a;

						// Check for over/underflow in the power terms:
						if (
							l1 > MIN_LN &&
							l1 < MAX_LN &&
							l2 > MIN_LN &&
							l2 < MAX_LN
						) {
							if ( a * b < bgh * 10.0 ) {
								result *= exp( ( b-0.5 ) * log1p( a / bgh ) );
							} else {
								result *= pow( cgh / bgh, b - 0.5 );
							}
							result *= pow( x * cgh / agh, a );
							result *= sqrt( agh / E );

							if ( out ) {
								out[ 1 ] = result * pow( y, b );
							}
						}
						else {
							// We need logs, and this *will* cancel:
							result = ln( result ) + l1 + l2 + ( ( ln( agh ) - 1.0 ) / 2.0 );
							if ( out ) {
								out[ 1 ] = exp( result + ( b * ln( y ) ) );
							}
							result = exp( result );
						}
					}
					else {
						// Non-normalized, just compute the power:
						result = pow( x, a );
					}
					if ( result < MIN_VALUE ) {
						return s0; // Safeguard: series can't cope with denorms.
					}
					s = ibetaSeriesT( a, b, x, result );
					opts.initialValue = s0;
					return sumSeries( s, opts );
				}


				// EXPORTS //

				module.exports = ibetaSeries;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Evaluate the incomplete beta function and its first derivative.
				*
				* @module @stdlib/math-base-special-kernel-betainc
				*
				* @example
				* var kernelBetainc = require( '@stdlib/math-base-special-kernel-betainc' );
				*
				* var out = kernelBetainc( 0.5, 2.0, 2.0, false, false );
				* // returns [ ~0.083, ~1.5 ]
				*
				* out = kernelBetainc( 0.2, 1.0, 2.0, true, false );
				* // returns [ 0.36, 1.6 ]
				*
				* @example
				* var kernelBetainc = require( '@stdlib/math-base-special-kernel-betainc' );
				*
				* var arr = [ 0.0, 0.0 ];
				* var out = kernelBetainc.assign( 0.2, 1.0, 2.0, true, true, arr, 1, 0 );
				* // returns [ 0.64, 1.6 ]
				*
				* var bool = ( arr === out );
				* // returns true
				*/

				// MODULES //

				var setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );
				var main = require( './main.js' );
				var assign = require( './assign.js' );


				// MAIN //

				setReadOnly( main, 'assign', assign );


				// EXPORTS //

				module.exports = main;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var compute = require( './assign.js' );


				// MAIN //

				/**
				* Evaluates the incomplete beta function and its first derivative.
				*
				* @param {Probability} x - function input
				* @param {NonNegativeNumber} a - function parameter
				* @param {NonNegativeNumber} b - function parameter
				* @param {boolean} regularized - boolean indicating if the function should evaluate the regularized boolean beta function
				* @param {boolean} upper - boolean indicating if the function should return the upper tail of the incomplete beta function instead
				* @returns {Array} function value and first derivative
				*
				* @example
				* var out = kernelBetainc( 0.5, 2.0, 2.0, false, false );
				* // returns [ ~0.083, ~1.5 ]
				*
				* @example
				* var out = kernelBetainc( 0.2, 1.0, 2.0, true, false );
				* // returns [ 0.36, 1.6 ]
				*/
				function kernelBetainc( x, a, b, regularized, upper ) {
					return compute( x, a, b, regularized, upper, [ 0.0, 0.0 ], 1, 0 );
				}


				// EXPORTS //

				module.exports = kernelBetainc;
			},
			"regularized_gamma_prefix.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/gamma.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* Copyright John Maddock 2006-7, 2013-14.
				* Copyright Paul A. Bristow 2007, 2013-14.
				* Copyright Nikhar Agrawal 2013-14.
				* Copyright Christopher Kormanyos 2013-14.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var lanczosSumExpGScaled = require( '@stdlib/math-base-special-gamma-lanczos-sum-expg-scaled' );
				var gammaln = require( '@stdlib/math-base-special-gammaln' );
				var gamma = require( '@stdlib/math-base-special-gamma' );
				var log1p = require( '@stdlib/math-base-special-log1p' );
				var sqrt = require( '@stdlib/math-base-special-sqrt' );
				var abs = require( '@stdlib/math-base-special-abs' );
				var exp = require( '@stdlib/math-base-special-exp' );
				var pow = require( '@stdlib/math-base-special-pow' );
				var max = require( '@stdlib/math-base-special-max' );
				var min = require( '@stdlib/math-base-special-min' );
				var ln = require( '@stdlib/math-base-special-ln' );
				var MAX_LN = require( '@stdlib/constants-float64-max-ln' );
				var MIN_LN = require( '@stdlib/constants-float64-min-ln' );
				var G = require( '@stdlib/constants-float64-gamma-lanczos-g' );
				var E = require( '@stdlib/constants-float64-e' );


				// MAIN //

				/**
				* Computes `(z^a)*(e^-z) / gamma(a)`.
				*
				* @private
				* @param {number} a - input value
				* @param {number} z - input value
				* @returns {number} function value
				*/
				function regularizedGammaPrefix( a, z ) {
					var prefix;
					var amza;
					var agh;
					var alz;
					var amz;
					var sq;
					var d;

					agh = a + G - 0.5;
					d = ( (z - a) - G + 0.5 ) / agh;
					if ( a < 1.0 ) {
						// Treat a < 1 as a special case because our Lanczos approximations are optimized against the factorials with a > 1, and for high precision types very small values of `a` can give rather erroneous results for gamma:
						if ( z <= MIN_LN ) {
							// Use logs, so should be free of cancellation errors:
							return exp( ( a * ln(z) ) - z - gammaln( a ) );
						}
						// No danger of overflow as gamma(a) < 1/a for small a, so direct calculation:
						return pow( z, a ) * exp( -z ) / gamma( a );
					}
					if ( abs(d*d*a) <= 100.0 && a > 150.0 ) {
						// Special case for large a and a ~ z:
						prefix = ( a * ( log1p( d ) - d ) ) + ( z * ( 0.5-G ) / agh );
						prefix = exp( prefix );
					}
					else {
						// General case. Direct computation is most accurate, but use various fallbacks for different parts of the problem domain:
						alz = a * ln(z / agh);
						amz = a - z;
						if (
							min(alz, amz) <= MIN_LN ||
							max(alz, amz) >= MAX_LN
						) {
							amza = amz / a;
							if (
								min(alz, amz)/2.0 > MIN_LN &&
								max(alz, amz)/2.0 < MAX_LN
							) {
								// Compute square root of the result and then square it:
								sq = pow( z/agh, a/2.0 ) * exp( amz/2.0 );
								prefix = sq * sq;
							}
							else if (
								min(alz, amz)/4.0 > MIN_LN &&
								max(alz, amz)/4.0 < MAX_LN &&
								z > a
							) {
								// Compute the 4th root of the result then square it twice:
								sq = pow( z/agh, a/4.0 ) * exp( amz/4.0 );
								prefix = sq * sq;
								prefix *= prefix;
							}
							else if (
								amza > MIN_LN &&
								amza < MAX_LN
							) {
								prefix = pow( (z * exp(amza)) / agh, a );
							}
							else {
								prefix = exp( alz + amz );
							}
						}
						else
						{
							prefix = pow( z/agh, a ) * exp( amz );
						}
					}
					prefix *= sqrt( agh/E ) / lanczosSumExpGScaled( a );
					return prefix;
				}


				// EXPORTS //

				module.exports = regularizedGammaPrefix;
			},
			"rising_factorial_ratio.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_37_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MAIN //

				/**
				* Computes the delta in `beta(a,b,x) = prefix + delta * beta(a+k,b,x)`.
				*
				* ## Notes
				*
				* Specifically, the function calculates
				*
				* ```tex
				* \frac{ (a)(a+1)(a+2)...(a+k-1) }{ (b)(b+1)(b+2)...(b+k-1) }
				* ```
				*
				* The function should only called with small `k`; for large `k`, it is grossly inefficient.
				*
				* @private
				* @param {number} a - input value
				* @param {number} b - input value
				* @param {NonNegativeInteger} k - input value
				* @returns {number} ratio value
				*/
				function risingFactorialRatio( a, b, k ) {
					var result;
					var i;
					if ( k === 0 ) {
						return 1.0;
					}
					result = 1.0;
					for ( i = 0; i < k; i++ ) {
						result *= ( a + i ) / ( b + i );
					}
					return result;
				}


				// EXPORTS //

				module.exports = risingFactorialRatio;
			}
		}
	},
	"@stdlib/math-base-special-kernel-cos": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Compute the cosine of a number on `[-π/4, π/4]`.
				*
				* @module @stdlib/math-base-special-kernel-cos
				*
				* @example
				* var kernelCos = require( '@stdlib/math-base-special-kernel-cos' );
				*
				* var v = kernelCos( 0.0, 0.0 );
				* // returns ~1.0
				*
				* v = kernelCos( 3.141592653589793/6.0, 0.0 );
				* // returns ~0.866
				*
				* v = kernelCos( 0.785, -1.144e-17 );
				* // returns ~0.707
				*
				* v = kernelCos( NaN, 0.0 );
				* // returns NaN
				*/

				// MODULES //

				var kernelCos = require( './kernel_cos.js' );


				// EXPORTS //

				module.exports = kernelCos;
			},
			"kernel_cos.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_cos.c}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
				*
				* Developed at SunPro, a Sun Microsystems, Inc. business.
				* Permission to use, copy, modify, and distribute this
				* software is freely granted, provided that this notice
				* is preserved.
				* ```
				*/

				'use strict';

				// MODULES //

				var polyval13 = require( './polyval_c13.js' );
				var polyval46 = require( './polyval_c46.js' );


				// MAIN //

				/**
				* Computes the cosine on \\( \[-\pi/4, \pi/4] \\), where \\( \pi/4 \approx 0.785398164 \\).
				*
				* ## Method
				*
				* -   Since \\( \cos(-x) = \cos(x) \\), we need only to consider positive \\(x\\).
				*
				* -   If \\( x < 2^{-27} \\), return \\(1\\) which is inexact if \\( x \ne 0 \\).
				*
				* -   \\( cos(x) \\) is approximated by a polynomial of degree \\(14\\) on \\( \[0,\pi/4] \\).
				*
				*     ```tex
				*     \cos(x) \approx 1 - \frac{x \cdot x}{2} + C_1 \cdot x^4 + \ldots + C_6 \cdot x^{14}
				*     ```
				*
				*     where the Remez error is
				*
				*     ```tex
				*     \left| \cos(x) - \left( 1 - \frac{x^2}{2} + C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{15} \right) \right| \le 2^{-58}
				*     ```
				*
				* -   Let \\( C_1x^4 + C_2x^6 + C_3x^8 + C_4x^{10} + C_5x^{12} + C_6x^{14} \\), then
				*
				*     ```tex
				*     \cos(x) \approx 1 - \frac{x \cdot x}{2} + r
				*     ```
				*
				*     Since
				*
				*     ```tex
				*     \cos(x+y) \approx \cos(x) - \sin(x) \cdot y \approx \cos(x) - x \cdot y
				*     ```
				*
				*     a correction term is necessary in \\( \cos(x) \\). Hence,
				*
				*     ```tex
				*     \cos(x+y) = 1 - \left( \frac{x \cdot x}{2} - (r - x \cdot y) \right)
				*     ```
				*
				*     For better accuracy, rearrange to
				*
				*     ```tex
				*     \cos(x+y) \approx w + \left( t + ( r - x \cdot y ) \right)
				*     ```
				*
				*     where \\( w = 1 - \frac{x \cdot x}{2} \\) and \\( t \\) is a tiny correction term (\\( 1 - \frac{x \cdot x}{2} = w + t \\) exactly in infinite precision). The exactness of \\(w + t\\) in infinite precision depends on \\(w\\) and \\(t\\) having the same precision as \\(x\\).
				*
				*
				* @param {number} x - input value (in radians, assumed to be bounded by ~pi/4 in magnitude)
				* @param {number} y - tail of `x`
				* @returns {number} cosine
				*
				* @example
				* var v = kernelCos( 0.0, 0.0 );
				* // returns ~1.0
				*
				* @example
				* var v = kernelCos( 3.141592653589793/6.0, 0.0 );
				* // returns ~0.866
				*
				* @example
				* var v = kernelCos( 0.785, -1.144e-17 );
				* // returns ~0.707
				*
				* @example
				* var v = kernelCos( NaN, 0.0 );
				* // returns NaN
				*/
				function kernelCos( x, y ) {
					var hz;
					var r;
					var w;
					var z;

					z = x * x;
					w = z * z;
					r = z * polyval13( z );
					r += w * w * polyval46( z );
					hz = 0.5 * z;
					w = 1.0 - hz;
					return w + ( ((1.0-w) - hz) + ((z*r) - (x*y)) );
				}


				// EXPORTS //

				module.exports = kernelCos;
			},
			"polyval_c13.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 0.0416666666666666;
					}
					return 0.0416666666666666 + (x * (-0.001388888888887411 + (x * 0.00002480158728947673))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_c46.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return -2.7557314351390663e-7;
					}
					return -2.7557314351390663e-7 + (x * (2.087572321298175e-9 + (x * -1.1359647557788195e-11))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			}
		}
	},
	"@stdlib/math-base-special-kernel-sin": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Compute the sine of a number on `[-π/4, π/4]`.
				*
				* @module @stdlib/math-base-special-kernel-sin
				*
				* @example
				* var kernelSin = require( '@stdlib/math-base-special-kernel-sin' );
				*
				* var v = kernelSin( 0.0, 0.0 );
				* // returns ~0.0
				*
				* v = kernelSin( 3.141592653589793/6.0, 0.0 );
				* // returns ~0.5
				*
				* v = kernelSin( 0.619, 9.279e-18 );
				* // returns ~0.581
				*
				* v = kernelSin( NaN, 0.0 );
				* // returns NaN
				*
				* v = kernelSin( 3.0, NaN );
				* // returns NaN
				*
				* v = kernelSin( NaN, NaN );
				* // returns NaN
				*/

				// MODULES //

				var kernelSin = require( './kernel_sin.js' );


				// EXPORTS //

				module.exports = kernelSin;
			},
			"kernel_sin.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_sin.c}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
				*
				* Developed at SunPro, a Sun Microsystems, Inc. business.
				* Permission to use, copy, modify, and distribute this
				* software is freely granted, provided that this notice
				* is preserved.
				* ```
				*/

				'use strict';

				// VARIABLES //

				var S1 = -1.66666666666666324348e-01; // 0xBFC55555, 0x55555549
				var S2 = 8.33333333332248946124e-03;  // 0x3F811111, 0x1110F8A6
				var S3 = -1.98412698298579493134e-04; // 0xBF2A01A0, 0x19C161D5
				var S4 = 2.75573137070700676789e-06;  // 0x3EC71DE3, 0x57B1FE7D
				var S5 = -2.50507602534068634195e-08; // 0xBE5AE5E6, 0x8A2B9CEB
				var S6 = 1.58969099521155010221e-10;  // 0x3DE5D93A, 0x5ACFD57C


				// MAIN //

				/**
				* Computes the sine on \\( \approx \[-\pi/4, \pi/4] \\) (except on \\(-0\\)), where \\( \pi/4 \approx 0.7854 \\).
				*
				* ## Method
				*
				* -   Since \\( \sin(-x) = -\sin(x) \\), we need only to consider positive \\(x\\).
				*
				* -   Callers must return \\( \sin(-0) = -0 \\) without calling here since our odd polynomial is not evaluated in a way that preserves \\(-0\\). Callers may do the optimization \\( \sin(x) \approx x \\) for tiny \\(x\\).
				*
				* -   \\( \sin(x) \\) is approximated by a polynomial of degree \\(13\\) on \\( \left\[0,\tfrac{pi}{4}\right] \\)
				*
				*     ```tex
				*     \sin(x) \approx x + S_1 \cdot x^3 + \ldots + S_6 \cdot x^{13}
				*     ```
				*
				*     where
				*
				*     ```tex
				*     \left| \frac{\sin(x)}{x} \left( 1 + S_1 \cdot x + S_2 \cdot x + S_3 \cdot x + S_4 \cdot x + S_5 \cdot x + S_6 \cdot x \right) \right| \le 2^{-58}
				*     ```
				*
				* -   We have
				*
				*     ```tex
				*     \sin(x+y) = \sin(x) + \sin'(x') \cdot y \approx \sin(x) + (1-x*x/2) \cdot y
				*     ```
				*
				*     For better accuracy, let
				*
				*     ```tex
				*     r = x^3 * \left( S_2 + x^2 \cdot \left( S_3 + x^2 * \left( S_4 + x^2 \cdot ( S_5+x^2 \cdot S_6 ) \right) \right) \right)
				*     ```
				*
				*     then
				*
				*     ```tex
				*     \sin(x) = x + \left( S_1 \cdot x + ( x \cdot (r-y/2) + y ) \right)
				*     ```
				*
				*
				* @param {number} x - input value (in radians, assumed to be bounded by `~pi/4` in magnitude)
				* @param {number} y - tail of `x`
				* @returns {number} sine
				*
				* @example
				* var v = kernelSin( 0.0, 0.0 );
				* // returns ~0.0
				*
				* @example
				* var v = kernelSin( 3.141592653589793/6.0, 0.0 );
				* // returns ~0.5
				*
				* @example
				* var v = kernelSin( 0.619, 9.279e-18 );
				* // returns ~0.58
				*
				* @example
				* var v = kernelSin( NaN, 0.0 );
				* // returns NaN
				*
				* @example
				* var v = kernelSin( 3.0, NaN );
				* // returns NaN
				*
				* @example
				* var v = kernelSin( NaN, NaN );
				* // returns NaN
				*/
				function kernelSin( x, y ) {
					var r;
					var v;
					var w;
					var z;

					z = x * x;
					w = z * z;
					r = S2 + (z * (S3 + (z*S4))) + (z * w * (S5 + (z*S6)));
					v = z * x;
					if ( y === 0.0 ) {
						return x + (v * (S1 + (z*r)));
					}
					return x - (((z*((0.5*y) - (v*r))) - y) - (v*S1));
				}


				// EXPORTS //

				module.exports = kernelSin;
			}
		}
	},
	"@stdlib/math-base-special-ldexp": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Multiply a double-precision floating-point number by an integer power of two.
				*
				* @module @stdlib/math-base-special-ldexp
				*
				* @example
				* var ldexp = require( '@stdlib/math-base-special-ldexp' );
				*
				* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
				* // returns 4.0
				*
				* x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
				* // returns 1.0
				*
				* x = ldexp( 0.0, 20 );
				* // returns 0.0
				*
				* x = ldexp( -0.0, 39 );
				* // returns -0.0
				*
				* x = ldexp( NaN, -101 );
				* // returns NaN
				*
				* x = ldexp( Infinity, 11 );
				* // returns Infinity
				*
				* x = ldexp( -Infinity, -118 );
				* // returns -Infinity
				*/

				// MODULES //

				var main = require( './main.js' );


				// EXPORTS //

				module.exports = main;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// NOTES //

				/*
				* => ldexp: load exponent (see [The Open Group]{@link http://pubs.opengroup.org/onlinepubs/9699919799/functions/ldexp.html} and [cppreference]{@link http://en.cppreference.com/w/c/numeric/math/ldexp}).
				*/


				// MODULES //

				var PINF = require( '@stdlib/constants-float64-pinf' );
				var NINF = require( '@stdlib/constants-float64-ninf' );
				var BIAS = require( '@stdlib/constants-float64-exponent-bias' );
				var MAX_EXPONENT = require( '@stdlib/constants-float64-max-base2-exponent' );
				var MAX_SUBNORMAL_EXPONENT = require( '@stdlib/constants-float64-max-base2-exponent-subnormal' );
				var MIN_SUBNORMAL_EXPONENT = require( '@stdlib/constants-float64-min-base2-exponent-subnormal' );
				var isnan = require( '@stdlib/math-base-assert-is-nan' );
				var isInfinite = require( '@stdlib/math-base-assert-is-infinite' );
				var copysign = require( '@stdlib/math-base-special-copysign' );
				var normalize = require( '@stdlib/number-float64-base-normalize' );
				var floatExp = require( '@stdlib/number-float64-base-exponent' );
				var toWords = require( '@stdlib/number-float64-base-to-words' );
				var fromWords = require( '@stdlib/number-float64-base-from-words' );


				// VARIABLES //

				// 1/(1<<52) = 1/(2**52) = 1/4503599627370496
				var TWO52_INV = 2.220446049250313e-16;

				// Exponent all 0s: 1 00000000000 11111111111111111111 => 2148532223
				var CLEAR_EXP_MASK = 0x800fffff>>>0; // asm type annotation

				// Normalization workspace:
				var FRAC = [ 0.0, 0.0 ]; // WARNING: not thread safe

				// High/low words workspace:
				var WORDS = [ 0, 0 ]; // WARNING: not thread safe


				// MAIN //

				/**
				* Multiplies a double-precision floating-point number by an integer power of two.
				*
				* @param {number} frac - fraction
				* @param {integer} exp - exponent
				* @returns {number} double-precision floating-point number
				*
				* @example
				* var x = ldexp( 0.5, 3 ); // => 0.5 * 2^3 = 0.5 * 8
				* // returns 4.0
				*
				* @example
				* var x = ldexp( 4.0, -2 ); // => 4 * 2^(-2) = 4 * (1/4)
				* // returns 1.0
				*
				* @example
				* var x = ldexp( 0.0, 20 );
				* // returns 0.0
				*
				* @example
				* var x = ldexp( -0.0, 39 );
				* // returns -0.0
				*
				* @example
				* var x = ldexp( NaN, -101 );
				* // returns NaN
				*
				* @example
				* var x = ldexp( Infinity, 11 );
				* // returns Infinity
				*
				* @example
				* var x = ldexp( -Infinity, -118 );
				* // returns -Infinity
				*/
				function ldexp( frac, exp ) {
					var high;
					var m;
					if (
						exp === 0 ||
						frac === 0.0 || // handles +-0
						isnan( frac ) ||
						isInfinite( frac )
					) {
						return frac;
					}
					// Normalize the input fraction:
					normalize( FRAC, frac );
					frac = FRAC[ 0 ];
					exp += FRAC[ 1 ];

					// Extract the exponent from `frac` and add it to `exp`:
					exp += floatExp( frac );

					// Check for underflow/overflow...
					if ( exp < MIN_SUBNORMAL_EXPONENT ) {
						return copysign( 0.0, frac );
					}
					if ( exp > MAX_EXPONENT ) {
						if ( frac < 0.0 ) {
							return NINF;
						}
						return PINF;
					}
					// Check for a subnormal and scale accordingly to retain precision...
					if ( exp <= MAX_SUBNORMAL_EXPONENT ) {
						exp += 52;
						m = TWO52_INV;
					} else {
						m = 1.0;
					}
					// Split the fraction into higher and lower order words:
					toWords( WORDS, frac );
					high = WORDS[ 0 ];

					// Clear the exponent bits within the higher order word:
					high &= CLEAR_EXP_MASK;

					// Set the exponent bits to the new exponent:
					high |= ((exp+BIAS) << 20);

					// Create a new floating-point number:
					return m * fromWords( high, WORDS[ 1 ] );
				}


				// EXPORTS //

				module.exports = ldexp;
			}
		}
	},
	"@stdlib/math-base-special-ln": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Evaluate the natural logarithm.
				*
				* @module @stdlib/math-base-special-ln
				*
				* @example
				* var ln = require( '@stdlib/math-base-special-ln' );
				*
				* var v = ln( 4.0 );
				* // returns ~1.386
				*
				* v = ln( 0.0 );
				* // returns -Infinity
				*
				* v = ln( Infinity );
				* // returns Infinity
				*
				* v = ln( NaN );
				* // returns NaN
				*
				* v = ln( -4.0 );
				* // returns NaN
				*/

				// MODULES //

				var ln = require( './ln.js' );


				// EXPORTS //

				module.exports = ln;
			},
			"ln.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_log.c}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
				*
				* Developed at SunPro, a Sun Microsystems, Inc. business.
				* Permission to use, copy, modify, and distribute this
				* software is freely granted, provided that this notice
				* is preserved.
				* ```
				*/

				'use strict';

				// MODULES //

				var getHighWord = require( '@stdlib/number-float64-base-get-high-word' );
				var setHighWord = require( '@stdlib/number-float64-base-set-high-word' );
				var isnan = require( '@stdlib/math-base-assert-is-nan' );
				var BIAS = require( '@stdlib/constants-float64-exponent-bias' );
				var NINF = require( '@stdlib/constants-float64-ninf' );
				var polyvalP = require( './polyval_p.js' );
				var polyvalQ = require( './polyval_q.js' );


				// VARIABLES //

				var LN2_HI = 6.93147180369123816490e-01; // 3FE62E42 FEE00000
				var LN2_LO = 1.90821492927058770002e-10; // 3DEA39EF 35793C76
				var TWO54 = 1.80143985094819840000e+16;  // 0x43500000, 0x00000000
				var ONE_THIRD = 0.33333333333333333;

				// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
				var HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation

				// 0x7ff00000 = 2146435072 => 0 11111111111 00000000000000000000 => biased exponent: 2047 = 1023+1023 => 2^1023
				var HIGH_MAX_NORMAL_EXP = 0x7ff00000|0; // asm type annotation

				// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
				var HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation

				// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
				var HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation


				// MAIN //

				/**
				* Evaluates the natural logarithm.
				*
				* @param {NonNegativeNumber} x - input value
				* @returns {number} function value
				*
				* @example
				* var v = ln( 4.0 );
				* // returns ~1.386
				*
				* @example
				* var v = ln( 0.0 );
				* // returns -Infinity
				*
				* @example
				* var v = ln( Infinity );
				* // returns Infinity
				*
				* @example
				* var v = ln( NaN );
				* // returns NaN
				*
				* @example
				* var v = ln( -4.0 );
				* // returns NaN
				*/
				function ln( x ) {
					var hfsq;
					var hx;
					var t2;
					var t1;
					var k;
					var R;
					var f;
					var i;
					var j;
					var s;
					var w;
					var z;

					if ( x === 0.0 ) {
						return NINF;
					}
					if ( isnan( x ) || x < 0.0 ) {
						return NaN;
					}
					hx = getHighWord( x );
					k = 0|0; // asm type annotation
					if ( hx < HIGH_MIN_NORMAL_EXP ) {
						// Case: 0 < x < 2**-1022
						k -= 54|0; // asm type annotation

						// Subnormal number, scale up `x`:
						x *= TWO54;
						hx = getHighWord( x );
					}
					if ( hx >= HIGH_MAX_NORMAL_EXP ) {
						return x + x;
					}
					k += ( ( hx>>20 ) - BIAS )|0; // asm type annotation
					hx &= HIGH_SIGNIFICAND_MASK;
					i = ( (hx+0x95f64) & 0x100000 )|0; // asm type annotation

					// Normalize `x` or `x/2`...
					x = setHighWord( x, hx|(i^HIGH_BIASED_EXP_0) );
					k += ( i>>20 )|0; // asm type annotation
					f = x - 1.0;
					if ( (HIGH_SIGNIFICAND_MASK&(2+hx)) < 3 ) {
						// Case: -2**-20 <= f < 2**-20
						if ( f === 0.0 ) {
							if ( k === 0 ) {
								return 0.0;
							}
							return (k * LN2_HI) + (k * LN2_LO);
						}
						R = f * f * ( 0.5 - (ONE_THIRD*f) );
						if ( k === 0 ) {
							return f - R;
						}
						return (k * LN2_HI) - ( (R-(k*LN2_LO)) - f );
					}
					s = f / (2.0 + f);
					z = s * s;
					i = ( hx - 0x6147a )|0; // asm type annotation
					w = z * z;
					j = ( 0x6b851 - hx )|0; // asm type annotation
					t1 = w * polyvalP( w );
					t2 = z * polyvalQ( w );
					i |= j;
					R = t2 + t1;
					if ( i > 0 ) {
						hfsq = 0.5 * f * f;
						if ( k === 0 ) {
							return f - ( hfsq - (s * (hfsq+R)) );
						}
						return (k * LN2_HI) - ( hfsq - ((s*(hfsq+R))+(k*LN2_LO)) - f );
					}
					if ( k === 0 ) {
						return f - (s*(f-R));
					}
					return (k * LN2_HI) - ( ( (s*(f-R)) - (k*LN2_LO) ) - f );
				}


				// EXPORTS //

				module.exports = ln;
			},
			"polyval_p.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 0.3999999999940942;
					}
					return 0.3999999999940942 + (x * (0.22222198432149784 + (x * 0.15313837699209373))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_q.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 0.6666666666666735;
					}
					return 0.6666666666666735 + (x * (0.2857142874366239 + (x * (0.1818357216161805 + (x * 0.14798198605116586))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			}
		}
	},
	"@stdlib/math-base-special-log1p": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Evaluate the natural logarithm of \\(1+x\\).
				*
				* @module @stdlib/math-base-special-log1p
				*
				* @example
				* var log1p = require( '@stdlib/math-base-special-log1p' );
				*
				* var v = log1p( 4.0 );
				* // returns ~1.609
				*
				* v = log1p( -1.0 );
				* // returns -Infinity
				*
				* v = log1p( 0.0 );
				* // returns 0.0
				*
				* v = log1p( -0.0 );
				* // returns -0.0
				*
				* v = log1p( -2.0 );
				* // returns NaN
				*
				* v = log1p( NaN );
				* // returns NaN
				*/

				// MODULES //

				var log1p = require( './log1p.js' );


				// EXPORTS //

				module.exports = log1p;
			},
			"log1p.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The following copyright, license, and long comment were part of the original implementation available as part of [FDLIBM]{@link http://www.netlib.org/fdlibm/s_log1p.c}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
				*
				* Developed at SunPro, a Sun Microsystems, Inc. business.
				* Permission to use, copy, modify, and distribute this
				* software is freely granted, provided that this notice
				* is preserved.
				* ```
				*/

				'use strict';

				// MODULES //

				var isnan = require( '@stdlib/math-base-assert-is-nan' );
				var getHighWord = require( '@stdlib/number-float64-base-get-high-word' );
				var setHighWord = require( '@stdlib/number-float64-base-set-high-word' );
				var PINF = require( '@stdlib/constants-float64-pinf' );
				var NINF = require( '@stdlib/constants-float64-ninf' );
				var FLOAT64_EXPONENT_BIAS = require( '@stdlib/constants-float64-exponent-bias' );
				var polyval = require( './polyval_lp.js' );


				// VARIABLES //

				// High and low words of ln(2):
				var LN2_HI = 6.93147180369123816490e-01; // 0x3fe62e42 0xfee00000
				var LN2_LO = 1.90821492927058770002e-10; // 0x3dea39ef 0x35793c76

				// sqrt(2)-1:
				var SQRT2M1 = 4.142135623730950488017e-01; // 0x3fda8279 0x99fcef34

				// sqrt(2)/2-1:
				var SQRT2HALFM1 = -2.928932188134524755992e-01; // 0xbfd2bec3 0x33018866

				// 2**-29:
				var SMALL = 1.862645149230957e-09; // 0x3e200000 0x00000000

				// 2**-54:
				var TINY = 5.551115123125783e-17;

				// Max integer (unsafe) => 2**53:
				var TWO53 = 9007199254740992;

				// 2/3:
				var TWO_THIRDS = 6.666666666666666666e-01;


				// MAIN //

				/**
				* Evaluates the natural logarithm of \\(1+x\\).
				*
				* ## Method
				*
				* 1.  Argument Reduction: find \\(k\\) and \\(f\\) such that
				*
				*     ```tex
				*     1+x = 2^k (1+f)
				*     ```
				*
				*     where
				*
				*     ```tex
				*     \frac{\sqrt{2}}{2} < 1+f < \sqrt{2}
				*     ```
				*
				*     <!-- <note> -->
				*
				*     If \\(k=0\\), then \\(f=x\\) is exact. However, if \\(k \neq 0\\), then \\(f\\) may not be representable exactly. In that case, a correction term is needed. Let
				*
				*     ```tex
				*     u = \operatorname{round}(1+x)
				*     ```
				*
				*     and
				*
				*     ```tex
				*     c = (1+x) - u
				*     ```
				*
				*     then
				*
				*     ```tex
				*     \ln (1+x) - \ln u \approx \frac{c}{u}
				*     ```
				*
				*     We can thus proceed to compute \\(\ln(u)\\), and add back the correction term \\(c/u\\).
				*
				*     <!-- </note> -->
				*
				*     <!-- <note> -->
				*
				*     When \\(x > 2^{53}\\), one can simply return \\(\ln(x)\\).
				*
				*     <!-- </note> -->
				*
				* 2.  Approximation of \\(\operatorname{log1p}(f)\\). Let
				*
				*     ```tex
				*     s = \frac{f}{2+f}
				*     ```
				*
				*     based on
				*
				*     ```tex
				*     \begin{align*}
				*     \ln 1+f &= \ln (1+s) - \ln (1-s) \\
				*             &= 2s + \frac{2}{3} s^3 + \frac{2}{5} s^5 + ... \\
				*             &= 2s + sR \\
				*     \end{align*}
				*     ```
				*
				*     We use a special Reme algorithm on \\(\[0,0.1716\]\\) to generate a polynomial of degree \\(14\\) to approximate \\(R\\). The maximum error of this polynomial approximation is bounded by \\(2^{-58.45}\\). In other words,
				*
				*     ```tex
				*     R(z) \approx \mathrm{Lp}_1 s^2 + \mathrm{Lp}_2 s^4 + \mathrm{Lp}_3 s^6 + \mathrm{Lp}_4 s^8 + \mathrm{Lp}_5 s^{10} + \mathrm{Lp}_6 s^{12} + \mathrm{Lp}_7 s^{14}
				*     ```
				*
				*     and
				*
				*     ```tex
				*     | \mathrm{Lp}_1 s^2 + \ldots + \mathrm{Lp}_7 s^14 - R(z) | \leq 2^{-58.45}
				*     ```
				*
				*     <!-- <note> -->
				*
				*     The values of \\(Lp1\\) to \\(Lp7\\) may be found in the source.
				*
				*     <!-- </note> -->
				*
				*     Note that
				*
				*     ```tex
				*     \begin{align*}
				*     2s &= f - sf \\
				*        &= f - \frac{f^2}{2} + s \frac{f^2}{2} \\
				*     \end{align*}
				*     ```
				*
				*     In order to guarantee error in \\(\ln\\) below \\(1\ \mathrm{ulp}\\), we compute the log by
				*
				*     ```tex
				*     \operatorname{log1p}(f) = f - \biggl(\frac{f^2}{2} - s\biggl(\frac{f^2}{2}+R\biggr)\biggr)
				*     ```
				*
				* 3.  Finally,
				*
				*     ```tex
				*     \begin{align*}
				*     \operatorname{log1p}(x) &= k \cdot \mathrm{ln2} + \operatorname{log1p}(f) \\
				*     &= k \cdot \mathrm{ln2}_{hi}+\biggl(f-\biggl(\frac{f^2}{2}-\biggl(s\biggl(\frac{f^2}{2}+R\biggr)+k \cdot \mathrm{ln2}_{lo}\biggr)\biggr)\biggr) \\
				*     \end{align*}
				*     ```
				*
				*     Here \\(\mathrm{ln2}\\) is split into two floating point numbers:
				*
				*     ```tex
				*     \mathrm{ln2}_{hi} + \mathrm{ln2}_{lo}
				*     ```
				*
				*     where \\(n \cdot \mathrm{ln2}_{hi}\\) is always exact for \\(|n| < 2000\\).
				*
				*
				* ## Special Cases
				*
				* -   \\(\operatorname{log1p}(x) = \mathrm{NaN}\\) with signal if \\(x < -1\\) (including \\(-\infty\\))
				* -   \\(\operatorname{log1p}(+\infty) = +\infty\\)
				* -   \\(\operatorname{log1p}(-1) = -\infty\\) with signal
				* -   \\(\operatorname{log1p}(\mathrm{NaN})= \mathrm{NaN}\\) with no signal
				*
				*
				* ## Notes
				*
				* -   According to an error analysis, the error is always less than \\(1\\) ulp (unit in the last place).
				*
				* -   The hexadecimal values are the intended ones for the used constants. The decimal values may be used, provided that the compiler will convert from decimal to binary accurately enough to produce the hexadecimal values shown.
				*
				* -   Assuming \\(\ln(x)\\) is accurate, the following algorithm can be used to evaluate \\(\operatorname{log1p}(x)\\) to within a few ULP:
				*
				*     ```javascript
				*     var u = 1.0 + x;
				*     if ( u === 1.0 ) {
				*         return x;
				*     } else {
				*         return ln(u) * (x/(u-1.0));
				*     }
				*     ```
				*
				*     See HP-15C Advanced Functions Handbook, p.193.
				*
				*
				* @param {number} x - input value
				* @returns {number} the natural logarithm of `1+x`
				*
				* @example
				* var v = log1p( 4.0 );
				* // returns ~1.609
				*
				* @example
				* var v = log1p( -1.0 );
				* // returns -Infinity
				*
				* @example
				* var v = log1p( 0.0 );
				* // returns 0.0
				*
				* @example
				* var v = log1p( -0.0 );
				* // returns -0.0
				*
				* @example
				* var v = log1p( -2.0 );
				* // returns NaN
				*
				* @example
				* var v = log1p( NaN );
				* // returns NaN
				*/
				function log1p( x ) {
					var hfsq;
					var hu;
					var y;
					var f;
					var c;
					var s;
					var z;
					var R;
					var u;
					var k;

					if ( x < -1.0 || isnan( x ) ) {
						return NaN;
					}
					if ( x === -1.0 ) {
						return NINF;
					}
					if ( x === PINF ) {
						return x;
					}
					if ( x === 0.0 ) {
						return x; // handle +-0 (IEEE 754-2008 spec)
					}
					// Set y = |x|:
					if ( x < 0.0 ) {
						y = -x;
					} else {
						y = x;
					}
					// Argument reduction...
					k = 1;

					// Check if argument reduction is needed and if we can just return a small value approximation requiring less computation but with equivalent accuracy...
					if ( y < SQRT2M1 ) { // if |x| < sqrt(2)-1 => ~0.41422
						if ( y < SMALL ) { // if |x| < 2**-29
							if ( y < TINY ) { // if |x| < 2**-54
								return x;
							}
							// Use a simple two-term Taylor series...
							return x - ( x*x*0.5 );
						}
						// Check if `f=x` can be represented exactly (no need for correction terms), allowing us to bypass argument reduction...
						if ( x > SQRT2HALFM1 ) { // if x > sqrt(2)/2-1 => ~-0.2929
							// -0.2929 < x < 0.41422
							k = 0;
							f = x; // exact
							hu = 1;
						}
					}
					// Address case where `f` cannot be represented exactly...
					if ( k !== 0 ) {
						if ( y < TWO53 ) {
							u = 1.0 + x;
							hu = getHighWord( u );

							// Bit shift to isolate the exponent and then subtract the bias:
							k = (hu>>20) - FLOAT64_EXPONENT_BIAS;

							// Correction term...
							if ( k > 0 ) { // positive unbiased exponent
								c = 1.0 - (u-x);
							} else { // nonpositive unbiased exponent
								c = x - (u-1.0);
							}
							c /= u;
						} else {
							u = x;
							hu = getHighWord( u );

							// Bit shift to isolate the exponent and then subtract the bias:
							k = (hu>>20) - FLOAT64_EXPONENT_BIAS;

							// Correction term is zero:
							c = 0;
						}
						// Apply a bit mask (0 00000000000 11111111111111111111) to remove the exponent:
						hu &= 0x000fffff; // max value => 1048575

						// Check if u significand is less than sqrt(2) significand => 0x6a09e => 01101010000010011110
						if ( hu < 434334 ) {
							// Normalize u by setting the exponent to 1023 (bias) => 0x3ff00000 => 0 01111111111 00000000000000000000
							u = setHighWord( u, hu|0x3ff00000 );
						} else {
							k += 1;

							// Normalize u/2 by setting the exponent to 1022 (bias-1 => 2**-1 = 1/2) => 0x3fe00000 => 0 01111111110 00000000000000000000
							u = setHighWord( u, hu|0x3fe00000 );

							// Subtract hu significand from next largest hu => 0 00000000001 00000000000000000000 => 0x00100000 => 1048576
							hu = (1048576-hu)>>2;
						}
						f = u - 1.0;
					}
					// Approximation of log1p(f)...
					hfsq = 0.5 * f * f;
					if ( hu === 0 ) { // if |f| < 2**-20
						if ( f === 0.0 ) {
							c += k * LN2_LO;
							return ( k * LN2_HI ) + c;
						}
						R = hfsq * (1.0 - ( TWO_THIRDS*f ) ); // avoid division
						return ( k*LN2_HI ) - ( (R - ( (k*LN2_LO) + c)) - f );
					}
					s = f / (2.0 + f);
					z = s * s;

					R = z * polyval( z );

					if ( k === 0 ) {
						return f - ( hfsq - ( s*(hfsq+R) ) );
					}
					return ( k*LN2_HI ) - ( (hfsq - ( (s*(hfsq+R)) + ((k*LN2_LO) + c))) - f );
				}


				// EXPORTS //

				module.exports = log1p;
			},
			"polyval_lp.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 0.6666666666666735;
					}
					return 0.6666666666666735 + (x * (0.3999999999940942 + (x * (0.2857142874366239 + (x * (0.22222198432149784 + (x * (0.1818357216161805 + (x * (0.15313837699209373 + (x * 0.14798198605116586))))))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			}
		}
	},
	"@stdlib/math-base-special-max": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Return the maximum value.
				*
				* @module @stdlib/math-base-special-max
				*
				* @example
				* var max = require( '@stdlib/math-base-special-max' );
				*
				* var v = max( 3.14, 4.2 );
				* // returns 4.2
				*
				* v = max( 5.9, 3.14, 4.2 );
				* // returns 5.9
				*
				* v = max( 3.14, NaN );
				* // returns NaN
				*
				* v = max( +0.0, -0.0 );
				* // returns +0.0
				*/

				// MODULES //

				var max = require( './max.js' );


				// EXPORTS //

				module.exports = max;
			},
			"max.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var isPositiveZero = require( '@stdlib/math-base-assert-is-positive-zero' );
				var isnan = require( '@stdlib/math-base-assert-is-nan' );
				var NINF = require( '@stdlib/constants-float64-ninf' );
				var PINF = require( '@stdlib/constants-float64-pinf' );


				// MAIN //

				/**
				* Returns the maximum value.
				*
				* @param {number} [x] - first number
				* @param {number} [y] - second number
				* @param {...number} [args] - numbers
				* @returns {number} maximum value
				*
				* @example
				* var v = max( 3.14, 4.2 );
				* // returns 4.2
				*
				* @example
				* var v = max( 5.9, 3.14, 4.2 );
				* // returns 5.9
				*
				* @example
				* var v = max( 3.14, NaN );
				* // returns NaN
				*
				* @example
				* var v = max( +0.0, -0.0 );
				* // returns +0.0
				*/
				function max( x, y ) {
					var len;
					var m;
					var v;
					var i;

					len = arguments.length;
					if ( len === 2 ) {
						if ( isnan( x ) || isnan( y ) ) {
							return NaN;
						}
						if ( x === PINF || y === PINF ) {
							return PINF;
						}
						if ( x === y && x === 0.0 ) {
							if ( isPositiveZero( x ) ) {
								return x;
							}
							return y;
						}
						if ( x > y ) {
							return x;
						}
						return y;
					}
					m = NINF;
					for ( i = 0; i < len; i++ ) {
						v = arguments[ i ];
						if ( isnan( v ) || v === PINF ) {
							return v;
						}
						if ( v > m ) {
							m = v;
						} else if (
							v === m &&
							v === 0.0 &&
							isPositiveZero( v )
						) {
							m = v;
						}
					}
					return m;
				}


				// EXPORTS //

				module.exports = max;
			}
		}
	},
	"@stdlib/math-base-special-maxabs": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Return the maximum absolute value.
				*
				* @module @stdlib/math-base-special-maxabs
				*
				* @example
				* var maxabs = require( '@stdlib/math-base-special-maxabs' );
				*
				* var v = maxabs( 3.14, -4.2 );
				* // returns 4.2
				*
				* v = maxabs( 5.9, 3.14, 4.2 );
				* // returns 5.9
				*
				* v = maxabs( 3.14, NaN );
				* // returns NaN
				*
				* v = maxabs( +0.0, -0.0 );
				* // returns +0.0
				*/

				// MODULES //

				var maxabs = require( './maxabs.js' );


				// EXPORTS //

				module.exports = maxabs;
			},
			"maxabs.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var abs = require( '@stdlib/math-base-special-abs' );
				var max = require( '@stdlib/math-base-special-max' );
				var PINF = require( '@stdlib/constants-float64-pinf' );


				// MAIN //

				/**
				* Returns the maximum absolute value.
				*
				* @param {number} [x] - first number
				* @param {number} [y] - second number
				* @param {...number} [args] - numbers
				* @returns {number} maximum absolute value
				*
				* @example
				* var v = maxabs( 3.14, -4.2 );
				* // returns 4.2
				*
				* @example
				* var v = maxabs( 5.9, 3.14, 4.2 );
				* // returns 5.9
				*
				* @example
				* var v = maxabs( 3.14, NaN );
				* // returns NaN
				*
				* @example
				* var v = maxabs( +0.0, -0.0 );
				* // returns +0.0
				*/
				function maxabs( x, y ) {
					var nargs;
					var args;
					var i;

					nargs = arguments.length;
					if ( nargs === 0 ) {
						return PINF;
					}
					if ( nargs === 2 ) {
						return max( abs( x ), abs( y ) );
					}
					args = [];
					for ( i = 0; i < nargs; i++ ) {
						args.push( abs( arguments[ i ] ) );
					}
					return max.apply( null, args );
				}


				// EXPORTS //

				module.exports = maxabs;
			}
		}
	},
	"@stdlib/math-base-special-min": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Return the minimum value.
				*
				* @module @stdlib/math-base-special-min
				*
				* @example
				* var min = require( '@stdlib/math-base-special-min' );
				*
				* var v = min( 3.14, 4.2 );
				* // returns 3.14
				*
				* v = min( 5.9, 3.14, 4.2 );
				* // returns 3.14
				*
				* v = min( 3.14, NaN );
				* // returns NaN
				*
				* v = min( +0.0, -0.0 );
				* // returns -0.0
				*/

				// MODULES //

				var min = require( './min.js' );


				// EXPORTS //

				module.exports = min;
			},
			"min.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var isNegativeZero = require( '@stdlib/math-base-assert-is-negative-zero' );
				var isnan = require( '@stdlib/math-base-assert-is-nan' );
				var NINF = require( '@stdlib/constants-float64-ninf' );
				var PINF = require( '@stdlib/constants-float64-pinf' );


				// MAIN //

				/**
				* Returns the minimum value.
				*
				* @param {number} [x] - first number
				* @param {number} [y] - second number
				* @param {...number} [args] - numbers
				* @returns {number} minimum value
				*
				* @example
				* var v = min( 3.14, 4.2 );
				* // returns 3.14
				*
				* @example
				* var v = min( 5.9, 3.14, 4.2 );
				* // returns 3.14
				*
				* @example
				* var v = min( 3.14, NaN );
				* // returns NaN
				*
				* @example
				* var v = min( +0.0, -0.0 );
				* // returns -0.0
				*/
				function min( x, y ) {
					var len;
					var m;
					var v;
					var i;

					len = arguments.length;
					if ( len === 2 ) {
						if ( isnan( x ) || isnan( y ) ) {
							return NaN;
						}
						if ( x === NINF || y === NINF ) {
							return NINF;
						}
						if ( x === y && x === 0.0 ) {
							if ( isNegativeZero( x ) ) {
								return x;
							}
							return y;
						}
						if ( x < y ) {
							return x;
						}
						return y;
					}
					m = PINF;
					for ( i = 0; i < len; i++ ) {
						v = arguments[ i ];
						if ( isnan( v ) || v === NINF ) {
							return v;
						}
						if ( v < m ) {
							m = v;
						} else if (
							v === m &&
							v === 0.0 &&
							isNegativeZero( v )
						) {
							m = v;
						}
					}
					return m;
				}


				// EXPORTS //

				module.exports = min;
			}
		}
	},
	"@stdlib/math-base-special-minabs": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Return the minimum absolute value.
				*
				* @module @stdlib/math-base-special-minabs
				*
				* @example
				* var minabs = require( '@stdlib/math-base-special-minabs' );
				*
				* var v = minabs( -3.14, 4.2 );
				* // returns 3.14
				*
				* v = min( 5.9, 3.14, 4.2 );
				* // returns 3.14
				*
				* v = min( 3.14, NaN );
				* // returns NaN
				*
				* v = min( +0.0, -0.0 );
				* // returns +0.0
				*/

				// MODULES //

				var minabs = require( './minabs.js' );


				// EXPORTS //

				module.exports = minabs;
			},
			"minabs.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var abs = require( '@stdlib/math-base-special-abs' );
				var min = require( '@stdlib/math-base-special-min' );
				var PINF = require( '@stdlib/constants-float64-pinf' );


				// MAIN //

				/**
				* Returns the minimum absolute value.
				*
				* @param {number} [x] - first number
				* @param {number} [y] - second number
				* @param {...number} [args] - numbers
				* @returns {number} minimum absolute value
				*
				* @example
				* var v = minabs( -3.14, 4.2 );
				* // returns 3.14
				*
				* @example
				* var v = minabs( 5.9, 3.14, 4.2 );
				* // returns 3.14
				*
				* @example
				* var v = minabs( 3.14, NaN );
				* // returns NaN
				*
				* @example
				* var v = minabs( +0.0, -0.0 );
				* // returns +0.0
				*/
				function minabs( x, y ) {
					var nargs;
					var args;
					var i;

					nargs = arguments.length;
					if ( nargs === 0 ) {
						return PINF;
					}
					if ( nargs === 2 ) {
						return min( abs( x ), abs( y ) );
					}
					args = [];
					for ( i = 0; i < nargs; i++ ) {
						args.push( abs( arguments[ i ] ) );
					}
					return min.apply( null, args );
				}


				// EXPORTS //

				module.exports = minabs;
			}
		}
	},
	"@stdlib/math-base-special-pow": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Evaluate the exponential function.
				*
				* @module @stdlib/math-base-special-pow
				*
				* @example
				* var pow = require( '@stdlib/math-base-special-pow' );
				*
				* var v = pow( 2.0, 3.0 );
				* // returns 8.0
				*
				* v = pow( 4.0, 0.5 );
				* // returns 2.0
				*
				* v = pow( 100.0, 0.0 );
				* // returns 1.0
				*
				* v = pow( 3.141592653589793, 5.0 );
				* // returns ~306.0197
				*
				* v = pow( 3.141592653589793, -0.2 );
				* // returns ~0.7954
				*
				* v = pow( NaN, 3.0 );
				* // returns NaN
				*
				* v = pow( 5.0, NaN );
				* // returns NaN
				*
				* v = pow( NaN, NaN );
				* // returns NaN
				*/

				// MODULES //

				var pow = require( './pow.js' );


				// EXPORTS //

				module.exports = pow;
			},
			"log2ax.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
				*
				* Developed at SunPro, a Sun Microsystems, Inc. business.
				* Permission to use, copy, modify, and distribute this
				* software is freely granted, provided that this notice
				* is preserved.
				* ```
				*/

				'use strict';

				// MODULES //

				var getHighWord = require( '@stdlib/number-float64-base-get-high-word' );
				var setLowWord = require( '@stdlib/number-float64-base-set-low-word' );
				var setHighWord = require( '@stdlib/number-float64-base-set-high-word' );
				var BIAS = require( '@stdlib/constants-float64-exponent-bias' );
				var polyvalL = require( './polyval_l.js' );


				// VARIABLES //

				// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
				var HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation

				// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
				var HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation

				// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
				var HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation

				// 0x20000000 = 536870912 => 0 01000000000 00000000000000000000 => biased exponent: 512 = -511+1023
				var HIGH_BIASED_EXP_NEG_512 = 0x20000000|0; // asm type annotation

				// 0x00080000 = 524288 => 0 00000000000 10000000000000000000
				var HIGH_SIGNIFICAND_HALF = 0x00080000|0; // asm type annotation

				// TODO: consider making an external constant
				var HIGH_NUM_SIGNIFICAND_BITS = 20|0; // asm type annotation

				var TWO53 = 9007199254740992.0;	// 0x43400000, 0x00000000

				// 2/(3*LN2)
				var CP = 9.61796693925975554329e-01; // 0x3FEEC709, 0xDC3A03FD

				// (float)CP
				var CP_HI = 9.61796700954437255859e-01; // 0x3FEEC709, 0xE0000000

				// Low: CP_HI
				var CP_LO = -7.02846165095275826516e-09; // 0xBE3E2FE0, 0x145B01F5

				var BP = [
					1.0,
					1.5
				];
				var DP_HI = [
					0.0,
					5.84962487220764160156e-01 // 0x3FE2B803, 0x40000000
				];
				var DP_LO = [
					0.0,
					1.35003920212974897128e-08 // 0x3E4CFDEB, 0x43CFD006
				];


				// MAIN //

				/**
				* Computes \\(\operatorname{log2}(ax)\\).
				*
				* @private
				* @param {Array} out - output array
				* @param {number} ax - absolute value of `x`
				* @param {number} ahx - high word of `ax`
				* @returns {Array} output array containing a tuple comprised of high and low parts
				*
				* @example
				* var t = log2ax( [ 0.0, 0.0 ], 9.0, 1075970048 ); // => [ t1, t2 ]
				* // returns [ 3.169923782348633, 0.0000012190936795504075 ]
				*/
				function log2ax( out, ax, ahx ) {
					var tmp;
					var ss; // `hs + ls`
					var s2; // `ss` squared
					var hs;
					var ls;
					var ht;
					var lt;
					var bp; // `BP` constant
					var dp; // `DP` constant
					var hp;
					var lp;
					var hz;
					var lz;
					var t1;
					var t2;
					var t;
					var r;
					var u;
					var v;
					var n;
					var j;
					var k;

					n = 0|0; // asm type annotation

					// Check if `x` is subnormal...
					if ( ahx < HIGH_MIN_NORMAL_EXP ) {
						ax *= TWO53;
						n -= 53|0; // asm type annotation
						ahx = getHighWord( ax );
					}
					// Extract the unbiased exponent of `x`:
					n += ((ahx >> HIGH_NUM_SIGNIFICAND_BITS) - BIAS)|0; // asm type annotation

					// Isolate the significand bits of `x`:
					j = (ahx & HIGH_SIGNIFICAND_MASK)|0; // asm type annotation

					// Normalize `ahx` by setting the (biased) exponent to `1023`:
					ahx = (j | HIGH_BIASED_EXP_0)|0; // asm type annotation

					// Determine the interval of `|x|` by comparing significand bits...

					// |x| < sqrt(3/2)
					if ( j <= 0x3988E ) { // 0 00000000000 00111001100010001110
						k = 0;
					}
					// |x| < sqrt(3)
					else if ( j < 0xBB67A ) { // 0 00000000000 10111011011001111010
						k = 1;
					}
					// |x| >= sqrt(3)
					else {
						k = 0;
						n += 1|0; // asm type annotation
						ahx -= HIGH_MIN_NORMAL_EXP;
					}
					// Load the normalized high word into `|x|`:
					ax = setHighWord( ax, ahx );

					// Compute `ss = hs + ls = (x-1)/(x+1)` or `(x-1.5)/(x+1.5)`:
					bp = BP[ k ]; // BP[0] = 1.0, BP[1] = 1.5
					u = ax - bp; // (x-1) || (x-1.5)
					v = 1.0 / (ax + bp); // 1/(x+1) || 1/(x+1.5)
					ss = u * v;
					hs = setLowWord( ss, 0 ); // set all low word (less significant significand) bits to 0s

					// Compute `ht = ax + bp` (via manipulation, i.e., bit flipping, of the high word):
					tmp = ((ahx>>1) | HIGH_BIASED_EXP_NEG_512) + HIGH_SIGNIFICAND_HALF;
					tmp += (k << 18); // `(k<<18)` can be considered the word equivalent of `1.0` or `1.5`
					ht = setHighWord( 0.0, tmp );
					lt = ax - (ht - bp);
					ls = v * ( ( u - (hs*ht) ) - ( hs*lt ) );

					// Compute `log(ax)`...

					s2 = ss * ss;
					r = s2 * s2 * polyvalL( s2 );
					r += ls * (hs + ss);
					s2 = hs * hs;
					ht = 3.0 + s2 + r;
					ht = setLowWord( ht, 0 );
					lt = r - ((ht-3.0) - s2);

					// u+v = ss*(1+...):
					u = hs * ht;
					v = ( ls*ht ) + ( lt*ss );

					// 2/(3LN2) * (ss+...):
					hp = u + v;
					hp = setLowWord( hp, 0 );
					lp = v - (hp - u);
					hz = CP_HI * hp; // CP_HI+CP_LO = 2/(3*LN2)
					lz = ( CP_LO*hp ) + ( lp*CP ) + DP_LO[ k ];

					// log2(ax) = (ss+...)*2/(3*LN2) = n + dp + hz + lz
					dp = DP_HI[ k ];
					t = n;
					t1 = ((hz+lz) + dp) + t; // log2(ax)
					t1 = setLowWord( t1, 0 );
					t2 = lz - (((t1-t) - dp) - hz);

					out[ 0 ] = t1;
					out[ 1 ] = t2;
					return out;
				}


				// EXPORTS //

				module.exports = log2ax;
			},
			"logx.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
				*
				* Developed at SunPro, a Sun Microsystems, Inc. business.
				* Permission to use, copy, modify, and distribute this
				* software is freely granted, provided that this notice
				* is preserved.
				* ```
				*/

				'use strict';

				// MODULES //

				var setLowWord = require( '@stdlib/number-float64-base-set-low-word' );
				var polyvalW = require( './polyval_w.js' );


				// VARIABLES //

				// 1/LN2
				var INV_LN2 = 1.44269504088896338700e+00; // 0x3FF71547, 0x652B82FE

				// High (24 bits): 1/LN2
				var INV_LN2_HI = 1.44269502162933349609e+00; // 0x3FF71547, 0x60000000

				// Low: 1/LN2
				var INV_LN2_LO = 1.92596299112661746887e-08; // 0x3E54AE0B, 0xF85DDF44


				// MAIN //

				/**
				* Computes \\(\operatorname{log}(x)\\) assuming \\(|1-x|\\) is small and using the approximation \\(x - x^2/2 + x^3/3 - x^4/4\\).
				*
				* @private
				* @param {Array} out - output array
				* @param {number} ax - absolute value of `x`
				* @returns {Array} output array containing a tuple comprised of high and low parts
				*
				* @example
				* var t = logx( [ 0.0, 0.0 ], 9.0 ); // => [ t1, t2 ]
				* // returns [ -1265.7236328125, -0.0008163940840404393 ]
				*/
				function logx( out, ax ) {
					var t2;
					var t1;
					var t;
					var w;
					var u;
					var v;

					t = ax - 1.0; // `t` has `20` trailing zeros
					w = t * t * polyvalW( t );
					u = INV_LN2_HI * t; // `INV_LN2_HI` has `21` significant bits
					v = ( t*INV_LN2_LO ) - ( w*INV_LN2 );
					t1 = u + v;
					t1 = setLowWord( t1, 0 );
					t2 = v - (t1 - u);

					out[ 0 ] = t1;
					out[ 1 ] = t2;
					return out;
				}


				// EXPORTS //

				module.exports = logx;
			},
			"polyval_l.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 0.5999999999999946;
					}
					return 0.5999999999999946 + (x * (0.4285714285785502 + (x * (0.33333332981837743 + (x * (0.272728123808534 + (x * (0.23066074577556175 + (x * 0.20697501780033842))))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_p.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 0.16666666666666602;
					}
					return 0.16666666666666602 + (x * (-0.0027777777777015593 + (x * (0.00006613756321437934 + (x * (-0.0000016533902205465252 + (x * 4.1381367970572385e-8))))))); // eslint-disable-line max-len
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"polyval_w.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* This is a generated file. Do not edit directly. */
				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @private
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*/
				function evalpoly( x ) {
					if ( x === 0.0 ) {
						return 0.5;
					}
					return 0.5 + (x * (-0.3333333333333333 + (x * 0.25)));
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"pow.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
				*
				* Developed at SunPro, a Sun Microsystems, Inc. business.
				* Permission to use, copy, modify, and distribute this
				* software is freely granted, provided that this notice
				* is preserved.
				* ```
				*/

				'use strict';

				// MODULES //

				var isnan = require( '@stdlib/math-base-assert-is-nan' );
				var isOdd = require( '@stdlib/math-base-assert-is-odd' );
				var isInfinite = require( '@stdlib/math-base-assert-is-infinite' );
				var isInteger = require( '@stdlib/math-base-assert-is-integer' );
				var sqrt = require( '@stdlib/math-base-special-sqrt' );
				var abs = require( '@stdlib/math-base-special-abs' );
				var toWords = require( '@stdlib/number-float64-base-to-words' );
				var setLowWord = require( '@stdlib/number-float64-base-set-low-word' );
				var uint32ToInt32 = require( '@stdlib/number-uint32-base-to-int32' );
				var NINF = require( '@stdlib/constants-float64-ninf' );
				var PINF = require( '@stdlib/constants-float64-pinf' );
				var xIsZero = require( './x_is_zero.js' );
				var yIsHuge = require( './y_is_huge.js' );
				var yIsInfinite = require( './y_is_infinite.js' );
				var log2ax = require( './log2ax.js' );
				var logx = require( './logx.js' );
				var pow2 = require( './pow2.js' );


				// VARIABLES //

				// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
				var ABS_MASK = 0x7fffffff|0; // asm type annotation

				// 0x3fefffff = 1072693247 => 0 01111111110 11111111111111111111 => biased exponent: 1022 = -1+1023 => 2^-1
				var HIGH_MAX_NEAR_UNITY = 0x3fefffff|0; // asm type annotation

				// 0x41e00000 = 1105199104 => 0 10000011110 00000000000000000000 => biased exponent: 1054 = 31+1023 => 2^31
				var HIGH_BIASED_EXP_31 = 0x41e00000|0; // asm type annotation

				// 0x43f00000 = 1139802112 => 0 10000111111 00000000000000000000 => biased exponent: 1087 = 64+1023 => 2^64
				var HIGH_BIASED_EXP_64 = 0x43f00000|0; // asm type annotation

				// 0x40900000 = 1083179008 => 0 10000001001 00000000000000000000 => biased exponent: 1033 = 10+1023 => 2^10 = 1024
				var HIGH_BIASED_EXP_10 = 0x40900000|0; // asm type annotation

				// 0x3ff00000 = 1072693248 => 0 01111111111 00000000000000000000 => biased exponent: 1023 = 0+1023 => 2^0 = 1
				var HIGH_BIASED_EXP_0 = 0x3ff00000|0; // asm type annotation

				// 0x4090cc00 = 1083231232 => 0 10000001001 00001100110000000000
				var HIGH_1075 = 0x4090cc00|0; // asm type annotation

				// 0xc090cc00 = 3230714880 => 1 10000001001 00001100110000000000
				var HIGH_NEG_1075 = 0xc090cc00>>>0; // asm type annotation

				var HIGH_NUM_NONSIGN_BITS = 31|0; // asm type annotation

				var HUGE = 1.0e300;
				var TINY = 1.0e-300;

				// -(1024-log2(ovfl+.5ulp))
				var OVT = 8.0085662595372944372e-17;

				// High/low words workspace:
				var WORDS = [ 0|0, 0|0 ]; // WARNING: not thread safe

				// Log workspace:
				var LOG_WORKSPACE = [ 0.0, 0.0 ]; // WARNING: not thread safe


				// MAIN //

				/**
				* Evaluates the exponential function.
				*
				* ## Method
				*
				* 1.  Let \\(x = 2^n (1+f)\\).
				*
				* 2.  Compute \\(\operatorname{log2}(x)\\) as
				*
				*     ```tex
				*     \operatorname{log2}(x) = w_1 + w_2
				*     ```
				*
				*     where \\(w_1\\) has \\(53 - 24 = 29\\) bit trailing zeros.
				*
				* 3.  Compute
				*
				*     ```tex
				*     y \cdot \operatorname{log2}(x) = n + y^\prime
				*     ```
				*
				*     by simulating multi-precision arithmetic, where \\(|y^\prime| \leq 0.5\\).
				*
				* 4.  Return
				*
				*     ```tex
				*     x^y = 2^n e^{y^\prime \cdot \mathrm{log2}}
				*     ```
				*
				* ## Special Cases
				*
				* ```tex
				* \begin{align*}
				* x^{\mathrm{NaN}} &= \mathrm{NaN} & \\
				* (\mathrm{NaN})^y &= \mathrm{NaN} & \\
				* 1^y &= 1 & \\
				* x^0 &= 1 & \\
				* x^1 &= x & \\
				* (\pm 0)^\infty &= +0 & \\
				* (\pm 0)^{-\infty} &= +\infty & \\
				* (+0)^y &= +0 & \mathrm{if}\ y > 0 \\
				* (+0)^y &= +\infty & \mathrm{if}\ y < 0 \\
				* (-0)^y &= -\infty & \mathrm{if}\ y\ \mathrm{is\ an\ odd\ integer\ and}\ y < 0 \\
				* (-0)^y &= +\infty & \mathrm{if}\ y\ \mathrm{is\ not\ an\ odd\ integer\ and}\ y < 0 \\
				* (-0)^y &= -0 & \mathrm{if}\ y\ \mathrm{is\ an\ odd\ integer\ and}\ y > 0 \\
				* (-0)^y &= +0 & \mathrm{if}\ y\ \mathrm{is\ not\ an\ odd\ integer\ and}\ y > 0 \\
				* (-1)^{\pm\infty} &= \mathrm{NaN} & \\
				* x^{\infty} &= +\infty & |x| > 1 \\
				* x^{\infty} &= +0 & |x| < 1 \\
				* x^{-\infty} &= +0 & |x| > 1 \\
				* x^{-\infty} &= +\infty & |x| < 1 \\
				* (-\infty)^y &= (-0)^y & \\
				* \infty^y &= +0 & y < 0 \\
				* \infty^y &= +\infty & y > 0 \\
				* x^y &= \mathrm{NaN} & \mathrm{if}\ y\ \mathrm{is\ not\ a\ finite\ integer\ and}\ x < 0
				* \end{align*}
				* ```
				*
				* ## Notes
				*
				* -   \\(\operatorname{pow}(x,y)\\) returns \\(x^y\\) nearly rounded. In particular, \\(\operatorname{pow}(<\mathrm{integer}>,<\mathrm{integer}>)\\) **always** returns the correct integer, provided the value is representable.
				* -   The hexadecimal values shown in the source code are the intended values for used constants. Decimal values may be used, provided the compiler will accurately convert decimal to binary in order to produce the hexadecimal values.
				*
				*
				* @param {number} x - base
				* @param {number} y - exponent
				* @returns {number} function value
				*
				* @example
				* var v = pow( 2.0, 3.0 );
				* // returns 8.0
				*
				* @example
				* var v = pow( 4.0, 0.5 );
				* // returns 2.0
				*
				* @example
				* var v = pow( 100.0, 0.0 );
				* // returns 1.0
				*
				* @example
				* var v = pow( 3.141592653589793, 5.0 );
				* // returns ~306.0197
				*
				* @example
				* var v = pow( 3.141592653589793, -0.2 );
				* // returns ~0.7954
				*
				* @example
				* var v = pow( NaN, 3.0 );
				* // returns NaN
				*
				* @example
				* var v = pow( 5.0, NaN );
				* // returns NaN
				*
				* @example
				* var v = pow( NaN, NaN );
				* // returns NaN
				*/
				function pow( x, y ) {
					var ahx; // absolute value high word `x`
					var ahy; // absolute value high word `y`
					var ax;  // absolute value `x`
					var hx;  // high word `x`
					var lx;  // low word `x`
					var hy;  // high word `y`
					var ly;  // low word `y`
					var sx;  // sign `x`
					var sy;  // sign `y`
					var y1;
					var hp;
					var lp;
					var t;
					var z;   // y prime
					var j;
					var i;
					if ( isnan( x ) || isnan( y ) ) {
						return NaN;
					}
					// Split `y` into high and low words:
					toWords( WORDS, y );
					hy = WORDS[ 0 ];
					ly = WORDS[ 1 ];

					// Special cases `y`...
					if ( ly === 0 ) {
						if ( y === 0.0 ) {
							return 1.0;
						}
						if ( y === 1.0 ) {
							return x;
						}
						if ( y === -1.0 ) {
							return 1.0 / x;
						}
						if ( y === 0.5 ) {
							return sqrt( x );
						}
						if ( y === -0.5 ) {
							return 1.0 / sqrt( x );
						}
						if ( y === 2.0 ) {
							return x * x;
						}
						if ( y === 3.0 ) {
							return x * x * x;
						}
						if ( y === 4.0 ) {
							x *= x;
							return x * x;
						}
						if ( isInfinite( y ) ) {
							return yIsInfinite( x, y );
						}
					}
					// Split `x` into high and low words:
					toWords( WORDS, x );
					hx = WORDS[ 0 ];
					lx = WORDS[ 1 ];

					// Special cases `x`...
					if ( lx === 0 ) {
						if ( hx === 0 ) {
							return xIsZero( x, y );
						}
						if ( x === 1.0 ) {
							return 1.0;
						}
						if (
							x === -1.0 &&
							isOdd( y )
						) {
							return -1.0;
						}
						if ( isInfinite( x ) ) {
							if ( x === NINF ) {
								// `pow( 1/x, -y )`
								return pow( -0.0, -y );
							}
							if ( y < 0.0 ) {
								return 0.0;
							}
							return PINF;
						}
					}
					if (
						x < 0.0 &&
						isInteger( y ) === false
					) {
						// Signal NaN...
						return (x-x)/(x-x);
					}
					ax = abs( x );

					// Remove the sign bits (i.e., get absolute values):
					ahx = (hx & ABS_MASK)|0; // asm type annotation
					ahy = (hy & ABS_MASK)|0; // asm type annotation

					// Extract the sign bits:
					sx = (hx >>> HIGH_NUM_NONSIGN_BITS)|0; // asm type annotation
					sy = (hy >>> HIGH_NUM_NONSIGN_BITS)|0; // asm type annotation

					// Determine the sign of the result...
					if ( sx && isOdd( y ) ) {
						sx = -1.0;
					} else {
						sx = 1.0;
					}
					// Case 1: `|y|` is huge...

					// |y| > 2^31
					if ( ahy > HIGH_BIASED_EXP_31 ) {
						// `|y| > 2^64`, then must over- or underflow...
						if ( ahy > HIGH_BIASED_EXP_64 ) {
							return yIsHuge( x, y );
						}
						// Over- or underflow if `x` is not close to unity...

						if ( ahx < HIGH_MAX_NEAR_UNITY ) {
							// y < 0
							if ( sy === 1 ) {
								// Signal overflow...
								return sx * HUGE * HUGE;
							}
							// Signal underflow...
							return sx * TINY * TINY;
						}
						if ( ahx > HIGH_BIASED_EXP_0 ) {
							// y > 0
							if ( sy === 0 ) {
								// Signal overflow...
								return sx * HUGE * HUGE;
							}
							// Signal underflow...
							return sx * TINY * TINY;
						}
						// At this point, `|1-x|` is tiny (`<= 2^-20`). Suffice to compute `log(x)` by `x - x^2/2 + x^3/3 - x^4/4`.
						t = logx( LOG_WORKSPACE, ax );
					}
					// Case 2: `|y|` is not huge...
					else {
						t = log2ax( LOG_WORKSPACE, ax, ahx );
					}
					// Split `y` into `y1 + y2` and compute `(y1+y2) * (t1+t2)`...
					y1 = setLowWord( y, 0 );
					lp = ( (y-y1)*t[0] ) + ( y*t[1] );
					hp = y1 * t[0];
					z = lp + hp;

					// Note: *can* be more performant to use `getHighWord` and `getLowWord` directly, but using `toWords` looks cleaner.
					toWords( WORDS, z );
					j = uint32ToInt32( WORDS[0] );
					i = uint32ToInt32( WORDS[1] );

					// z >= 1024
					if ( j >= HIGH_BIASED_EXP_10 ) {
						// z > 1024
						if ( ((j-HIGH_BIASED_EXP_10)|i) !== 0 ) {
							// Signal overflow...
							return sx * HUGE * HUGE;
						}
						if ( (lp+OVT) > (z-hp) ) {
							// Signal overflow...
							return sx * HUGE * HUGE;
						}
					}
					// z <= -1075
					else if ( (j&ABS_MASK) >= HIGH_1075 ) {
						// z < -1075
						if ( ((j-HIGH_NEG_1075)|i) !== 0 ) {
							// signal underflow...
							return sx * TINY * TINY;
						}
						if ( lp <= (z-hp) ) {
							// signal underflow...
							return sx * TINY * TINY;
						}
					}
					// Compute `2^(hp+lp)`...
					z = pow2( j, hp, lp );

					return sx * z;
				}


				// EXPORTS //

				module.exports = pow;
			},
			"pow2.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
				*
				* Developed at SunPro, a Sun Microsystems, Inc. business.
				* Permission to use, copy, modify, and distribute this
				* software is freely granted, provided that this notice
				* is preserved.
				* ```
				*/

				'use strict';

				// MODULES //

				var getHighWord = require( '@stdlib/number-float64-base-get-high-word' );
				var setHighWord = require( '@stdlib/number-float64-base-set-high-word' );
				var setLowWord = require( '@stdlib/number-float64-base-set-low-word' );
				var uint32ToInt32 = require( '@stdlib/number-uint32-base-to-int32' );
				var ldexp = require( '@stdlib/math-base-special-ldexp' );
				var LN2 = require( '@stdlib/constants-float64-ln-two' );
				var BIAS = require( '@stdlib/constants-float64-exponent-bias' );
				var polyvalP = require( './polyval_p.js' );


				// VARIABLES //

				// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
				var ABS_MASK = 0x7fffffff|0; // asm type annotation

				// 0x000fffff = 1048575 => 0 00000000000 11111111111111111111
				var HIGH_SIGNIFICAND_MASK = 0x000fffff|0; // asm type annotation

				// 0x00100000 = 1048576 => 0 00000000001 00000000000000000000 => biased exponent: 1 = -1022+1023 => 2^-1022
				var HIGH_MIN_NORMAL_EXP = 0x00100000|0; // asm type annotation

				// 0x3fe00000 = 1071644672 => 0 01111111110 00000000000000000000 => biased exponent: 1022 = -1+1023 => 2^-1
				var HIGH_BIASED_EXP_NEG_1 = 0x3fe00000|0; // asm type annotation

				// TODO: consider making into an external constant
				var HIGH_NUM_SIGNIFICAND_BITS = 20|0; // asm type annotation

				// High: LN2
				var LN2_HI = 6.93147182464599609375e-01; // 0x3FE62E43, 0x00000000

				// Low: LN2
				var LN2_LO = -1.90465429995776804525e-09; // 0xBE205C61, 0x0CA86C39


				// MAIN //

				/**
				* Computes \\(2^{\mathrm{hp} + \mathrm{lp}\\).
				*
				* @private
				* @param {number} j - high word of `hp + lp`
				* @param {number} hp - first power summand
				* @param {number} lp - second power summand
				* @returns {number} function value
				*
				* @example
				* var z = pow2( 1065961648, -0.3398475646972656, -0.000002438187359100815 );
				* // returns ~0.79
				*/
				function pow2( j, hp, lp ) {
					var tmp;
					var t1;
					var t;
					var r;
					var u;
					var v;
					var w;
					var z;
					var n;
					var i;
					var k;

					i = (j & ABS_MASK)|0; // asm type annotation
					k = ((i>>HIGH_NUM_SIGNIFICAND_BITS) - BIAS)|0; // asm type annotation
					n = 0;

					// `|z| > 0.5`, set `n = z+0.5`
					if ( i > HIGH_BIASED_EXP_NEG_1 ) {
						n = (j + (HIGH_MIN_NORMAL_EXP>>(k+1)))>>>0; // asm type annotation
						k = (((n & ABS_MASK)>>HIGH_NUM_SIGNIFICAND_BITS) - BIAS)|0; // new k for n
						tmp = ((n & ~(HIGH_SIGNIFICAND_MASK >> k)))>>>0; // asm type annotation
						t = setHighWord( 0.0, tmp );
						n = (((n & HIGH_SIGNIFICAND_MASK)|HIGH_MIN_NORMAL_EXP) >> (HIGH_NUM_SIGNIFICAND_BITS-k))>>>0; // eslint-disable-line max-len
						if ( j < 0 ) {
							n = -n;
						}
						hp -= t;
					}
					t = lp + hp;
					t = setLowWord( t, 0 );
					u = t * LN2_HI;
					v = ( (lp - (t-hp))*LN2 ) + ( t*LN2_LO );
					z = u + v;
					w = v - (z - u);
					t = z * z;
					t1 = z - ( t*polyvalP( t ) );
					r = ( (z*t1) / (t1-2.0) ) - ( w + (z*w) );
					z = 1.0 - (r - z);
					j = getHighWord( z );
					j = uint32ToInt32( j );
					j += (n << HIGH_NUM_SIGNIFICAND_BITS)>>>0; // asm type annotation

					// Check for subnormal output...
					if ( (j>>HIGH_NUM_SIGNIFICAND_BITS) <= 0 ) {
						z = ldexp( z, n );
					} else {
						z = setHighWord( z, j );
					}
					return z;
				}


				// EXPORTS //

				module.exports = pow2;
			},
			"x_is_zero.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
				*
				* Developed at SunPro, a Sun Microsystems, Inc. business.
				* Permission to use, copy, modify, and distribute this
				* software is freely granted, provided that this notice
				* is preserved.
				* ```
				*/

				'use strict';

				// MODULES //

				var isOdd = require( '@stdlib/math-base-assert-is-odd' );
				var copysign = require( '@stdlib/math-base-special-copysign' );
				var NINF = require( '@stdlib/constants-float64-ninf' );
				var PINF = require( '@stdlib/constants-float64-pinf' );


				// MAIN //

				/**
				* Evaluates the exponential function when \\(|x| = 0\\).
				*
				* @private
				* @param {number} x - base
				* @param {number} y - exponent
				* @returns {number} function value
				*
				* @example
				* var v = pow( 0.0, 2 );
				* // returns 0.0
				*
				* @example
				* var v = pow( -0.0, -9 );
				* // returns -Infinity
				*
				* @example
				* var v = pow( 0.0, -9 );
				* // returns Infinity
				*
				* @example
				* var v = pow( -0.0, 9 );
				* // returns 0.0
				*
				* @example
				* var v = pow( 0.0, -Infinity  );
				* // returns Infinity
				*
				* @example
				* var v = pow( 0.0, Infinity );
				* // returns 0.0
				*/
				function pow( x, y ) {
					if ( y === NINF ) {
						return PINF;
					}
					if ( y === PINF ) {
						return 0.0;
					}
					if ( y > 0.0 ) {
						if ( isOdd( y ) ) {
							return x; // handles +-0
						}
						return 0.0;
					}
					// y < 0.0
					if ( isOdd( y ) ) {
						return copysign( PINF, x ); // handles +-0
					}
					return PINF;
				}


				// EXPORTS //

				module.exports = pow;
			},
			"y_is_huge.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
				*
				* Developed at SunPro, a Sun Microsystems, Inc. business.
				* Permission to use, copy, modify, and distribute this
				* software is freely granted, provided that this notice
				* is preserved.
				* ```
				*/

				'use strict';

				// MODULES //

				var getHighWord = require( '@stdlib/number-float64-base-get-high-word' );


				// VARIABLES //

				// 0x7fffffff = 2147483647 => 0 11111111111 11111111111111111111
				var ABS_MASK = 0x7fffffff|0; // asm type annotation

				// 0x3fefffff = 1072693247 => 0 01111111110 11111111111111111111 => biased exponent: 1022 = -1+1023 => 2^-1
				var HIGH_MAX_NEAR_UNITY = 0x3fefffff|0; // asm type annotation

				var HUGE = 1.0e300;
				var TINY = 1.0e-300;


				// MAIN //

				/**
				* Evaluates the exponential function when \\(|y| > 2^64\\).
				*
				* @private
				* @param {number} x - base
				* @param {number} y - exponent
				* @returns {number} overflow or underflow result
				*
				* @example
				* var v = pow( 9.0, 3.6893488147419103e19 );
				* // returns Infinity
				*
				* @example
				* var v = pow( -3.14, -3.6893488147419103e19 );
				* // returns 0.0
				*/
				function pow( x, y ) {
					var ahx;
					var hx;

					hx = getHighWord( x );
					ahx = (hx & ABS_MASK);

					if ( ahx <= HIGH_MAX_NEAR_UNITY ) {
						if ( y < 0 ) {
							// signal overflow...
							return HUGE * HUGE;
						}
						// signal underflow...
						return TINY * TINY;
					}
					// `x` has a biased exponent greater than or equal to `0`...

					if ( y > 0 ) {
						// signal overflow...
						return HUGE * HUGE;
					}
					// signal underflow...
					return TINY * TINY;
				}


				// EXPORTS //

				module.exports = pow;
			},
			"y_is_infinite.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var abs = require( '@stdlib/math-base-special-abs' );
				var PINF = require( '@stdlib/constants-float64-pinf' );


				// MAIN //

				/**
				* Evaluates the exponential function when \\( y = \pm \infty\\).
				*
				* @private
				* @param {number} x - base
				* @param {number} y - exponent
				* @returns {number} function value
				*
				* @example
				* var v = pow( -1.0, Infinity );
				* // returns NaN
				*
				* @example
				* var v = pow( -1.0, -Infinity  );
				* // returns NaN
				*
				* @example
				* var v = pow( 1.0, Infinity );
				* // returns 1.0
				*
				* @example
				* var v = pow( 1.0, -Infinity  );
				* // returns 1.0
				*
				* @example
				* var v = pow( 0.5, Infinity );
				* // returns 0.0
				*
				* @example
				* var v = pow( 0.5, -Infinity  );
				* // returns Infinity
				*
				* @example
				* var v = pow( 1.5, -Infinity  );
				* // returns 0.0
				*
				* @example
				* var v = pow( 1.5, Infinity );
				* // returns Infinity
				*/
				function pow( x, y ) {
					if ( x === -1.0 ) {
						// Julia (0.4.2) and Python (2.7.9) return `1.0` (WTF???). JavaScript (`Math.pow`), R, and libm return `NaN`. We choose `NaN`, as the value is indeterminate; i.e., we cannot determine whether `y` is odd, even, or somewhere in between.
						return (x-x)/(x-x); // signal NaN
					}
					if ( x === 1.0 ) {
						return 1.0;
					}
					// (|x| > 1 && y === NINF) || (|x| < 1 && y === PINF)
					if ( (abs(x) < 1.0) === (y === PINF) ) {
						return 0.0;
					}
					// (|x| > 1 && y === PINF) || (|x| < 1 && y === NINF)
					return PINF;
				}


				// EXPORTS //

				module.exports = pow;
			}
		}
	},
	"@stdlib/math-base-special-powm1": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Evaluate `bˣ - 1`.
				*
				* @module @stdlib/math-base-special-powm1
				*
				* @example
				* var powm1 = require( '@stdlib/math-base-special-powm1' );
				*
				* var y = powm1( 2.0, 3.0 );
				* // returns 7.0
				*
				* y = powm1( 4.0, 0.5 );
				* // returns 1.0
				*
				* y = powm1( 0.0, 100.0 );
				* // returns -1.0
				*
				* y = powm1( 100.0, 0.0 );
				* // returns 0.0
				*
				* y = powm1( 0.0, 0.0 );
				* // returns 0.0
				*
				* y = powm1( 3.141592653589793, 5.0 );
				* // returns ~305.0197
				*
				* y = powm1( NaN, 3.0 );
				* // returns NaN
				*
				* y = powm1( 5.0, NaN );
				* // returns NaN
				*/

				// MODULES //

				var powm1 = require( './powm1.js' );


				// EXPORTS //

				module.exports = powm1;
			},
			"powm1.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_60_0/boost/math/special_functions/powm1.hpp}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* (C) Copyright John Maddock 2006.
				*
				* Use, modification and distribution are subject to the
				* Boost Software License, Version 1.0. (See accompanying file
				* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
				* ```
				*/

				'use strict';

				// MODULES //

				var isnan = require( '@stdlib/math-base-assert-is-nan' );
				var abs = require( '@stdlib/math-base-special-abs' );
				var expm1 = require( '@stdlib/math-base-special-expm1' );
				var ln = require( '@stdlib/math-base-special-ln' );
				var pow = require( '@stdlib/math-base-special-pow' );
				var trunc = require( '@stdlib/math-base-special-trunc' );


				// MAIN //

				/**
				* Evaluates `bˣ - 1`.
				*
				* @param {number} b - base
				* @param {number} x - exponent
				* @returns {number} function value
				*
				* @example
				* var y = powm1( 2.0, 3.0 );
				* // returns 7.0
				*
				* @example
				* var y = powm1( 4.0, 0.5 );
				* // returns 1.0
				*
				* @example
				* var y = powm1( 0.0, 100.0 );
				* // returns -1.0
				*
				* @example
				* var y = powm1( 100.0, 0.0 );
				* // returns 0.0
				*
				* @example
				* var y = powm1( 0.0, 0.0 );
				* // returns 0.0
				*
				* @example
				* var y = powm1( 3.141592653589793, 5.0 );
				* // returns ~305.0197
				*
				* @example
				* var y = powm1( NaN, 3.0 );
				* // returns NaN
				*
				* @example
				* var y = powm1( 5.0, NaN );
				* // returns NaN
				*/
				function powm1( b, x ) {
					var y;
					if (
						isnan( b ) ||
						isnan( x )
					) {
						return NaN;
					}
					if ( x === 0.0 ) {
						// Any number raised to zero (including 0) is always 1 => b^0 - 1 = 0
						return 0.0;
					}
					if ( b === 0.0 ) {
						// Zero raised to any number (except 0) is always zero => 0^x - 1 = -1
						return -1.0;
					}
					if ( b < 0.0 && x%2.0 === 0 ) {
						// If `x` is even, recognize that `(-b)**x == (b)**x`...
						b = -b;
					}
					if ( b > 0.0 ) {
						if (
							abs( x*(b-1.0) ) < 0.5 ||
							abs( x ) < 0.2
						) {
							// No good/quick approximation for ln(b)*x, so we have to evaluate...
							y = ln( b ) * x;
							if ( y < 0.5 ) {
								return expm1( y );
							}
						}
					} else if ( trunc( x ) !== x ) {
						// Exponentiation would yield a complex result...
						return NaN;
					}
					return pow( b, x ) - 1.0;
				}


				// EXPORTS //

				module.exports = powm1;
			}
		}
	},
	"@stdlib/math-base-special-rempio2": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Compute `x - nπ/2 = r`.
				*
				* @module @stdlib/math-base-special-rempio2
				*
				* @example
				* var rempio2 = require( '@stdlib/math-base-special-rempio2' );
				*
				* var y = [ 0.0, 0.0 ];
				* var n = rempio2( 128.0, y );
				* // returns 81
				*
				* var y1 = y[ 0 ];
				* // returns ~0.765
				*
				* var y2 = y[ 1 ];
				* // returns ~3.618e-17
				*/

				// MODULES //

				var rempio2 = require( './rempio2.js' );


				// EXPORTS //

				module.exports = rempio2;
			},
			"kernel_rempio2.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
				*
				* Developed at SunPro, a Sun Microsystems, Inc. business.
				* Permission to use, copy, modify, and distribute this
				* software is freely granted, provided that this notice
				* is preserved.
				* ```
				*/

				/* eslint-disable array-element-newline */

				'use strict';

				// MODULES //

				var floor = require( '@stdlib/math-base-special-floor' );
				var ldexp = require( '@stdlib/math-base-special-ldexp' );
				var zeros = require( '@stdlib/array-base-zeros' );


				// VARIABLES //

				/*
				* Table of constants for `2/π` (`396` hex digits, `476` decimal).
				*
				* Integer array which contains the (`24*i`)-th to (`24*i+23`)-th bit of `2/π` after binary point. The corresponding floating value is
				*
				* ```tex
				* \operatorname{ipio2}[i] \cdot 2^{-24(i+1)}
				* ```
				*
				* This table must have at least `(e0-3)/24 + jk` terms. For quad precision (`e0 <= 16360`, `jk = 6`), this is `686`.
				*/
				var IPIO2 = [
					0xA2F983, 0x6E4E44, 0x1529FC, 0x2757D1, 0xF534DD, 0xC0DB62,
					0x95993C, 0x439041, 0xFE5163, 0xABDEBB, 0xC561B7, 0x246E3A,
					0x424DD2, 0xE00649, 0x2EEA09, 0xD1921C, 0xFE1DEB, 0x1CB129,
					0xA73EE8, 0x8235F5, 0x2EBB44, 0x84E99C, 0x7026B4, 0x5F7E41,
					0x3991D6, 0x398353, 0x39F49C, 0x845F8B, 0xBDF928, 0x3B1FF8,
					0x97FFDE, 0x05980F, 0xEF2F11, 0x8B5A0A, 0x6D1F6D, 0x367ECF,
					0x27CB09, 0xB74F46, 0x3F669E, 0x5FEA2D, 0x7527BA, 0xC7EBE5,
					0xF17B3D, 0x0739F7, 0x8A5292, 0xEA6BFB, 0x5FB11F, 0x8D5D08,
					0x560330, 0x46FC7B, 0x6BABF0, 0xCFBC20, 0x9AF436, 0x1DA9E3,
					0x91615E, 0xE61B08, 0x659985, 0x5F14A0, 0x68408D, 0xFFD880,
					0x4D7327, 0x310606, 0x1556CA, 0x73A8C9, 0x60E27B, 0xC08C6B
				];

				// Double precision array, obtained by cutting `π/2` into `24` bits chunks...
				var PIO2 = [
					1.57079625129699707031e+00, // 0x3FF921FB, 0x40000000
					7.54978941586159635335e-08, // 0x3E74442D, 0x00000000
					5.39030252995776476554e-15, // 0x3CF84698, 0x80000000
					3.28200341580791294123e-22, // 0x3B78CC51, 0x60000000
					1.27065575308067607349e-29, // 0x39F01B83, 0x80000000
					1.22933308981111328932e-36, // 0x387A2520, 0x40000000
					2.73370053816464559624e-44, // 0x36E38222, 0x80000000
					2.16741683877804819444e-51  // 0x3569F31D, 0x00000000
				];
				var TWO24 = 1.67772160000000000000e+07;  // 0x41700000, 0x00000000
				var TWON24 = 5.96046447753906250000e-08; // 0x3E700000, 0x00000000

				// Arrays for storing temporary values (note that, in C, this is not thread safe):
				var F = zeros( 20 );
				var Q = zeros( 20 );
				var FQ = zeros( 20 );
				var IQ = zeros( 20 );


				// FUNCTIONS //

				/**
				* Performs the computation for `kernelRempio2()`.
				*
				* @private
				* @param {PositiveNumber} x - input value
				* @param {(Array|TypedArray|Object)} y - output object for storing double precision numbers
				* @param {integer} jz - number of terms of `ipio2[]` used
				* @param {Array<integer>} q - array with integral values, representing the 24-bits chunk of the product of `x` and `2/π`
				* @param {integer} q0 - the corresponding exponent of `q[0]` (the exponent for `q[i]` would be `q0-24*i`)
				* @param {integer} jk - `jk+1` is the initial number of terms of `IPIO2[]` needed in the computation
				* @param {integer} jv - index for pointing to the suitable `ipio2[]` for the computation
				* @param {integer} jx - `nx - 1`
				* @param {Array<number>} f - `IPIO2[]` in floating point
				* @returns {number} last three binary digits of `N`
				*/
				function compute( x, y, jz, q, q0, jk, jv, jx, f ) {
					var carry;
					var fw;
					var ih;
					var jp;
					var i;
					var k;
					var n;
					var j;
					var z;

					// `jp+1` is the number of terms in `PIO2[]` needed:
					jp = jk;

					// Distill `q[]` into `IQ[]` in reverse order...
					z = q[ jz ];
					j = jz;
					for ( i = 0; j > 0; i++ ) {
						fw = ( TWON24 * z )|0;
						IQ[ i ] = ( z - (TWO24*fw) )|0;
						z = q[ j-1 ] + fw;
						j -= 1;
					}
					// Compute `n`...
					z = ldexp( z, q0 );
					z -= 8.0 * floor( z*0.125 ); // Trim off integer >= 8
					n = z|0;
					z -= n;
					ih = 0;
					if ( q0 > 0 ) {
						// Need `IQ[jz-1]` to determine `n`...
						i = ( IQ[ jz-1 ] >> (24-q0) );
						n += i;
						IQ[ jz-1 ] -= ( i << (24-q0) );
						ih = ( IQ[ jz-1 ] >> (23-q0) );
					}
					else if ( q0 === 0 ) {
						ih = ( IQ[ jz-1 ] >> 23 );
					}
					else if ( z >= 0.5 ) {
						ih = 2;
					}
					// Case: q > 0.5
					if ( ih > 0 ) {
						n += 1;
						carry = 0;

						// Compute `1-q`:
						for ( i = 0; i < jz; i++ ) {
							j = IQ[ i ];
							if ( carry === 0 ) {
								if ( j !== 0 ) {
									carry = 1;
									IQ[ i ] = 0x1000000 - j;
								}
							} else {
								IQ[ i ] = 0xffffff - j;
							}
						}
						if ( q0 > 0 ) {
							// Rare case: chance is 1 in 12...
							switch ( q0 ) { // eslint-disable-line default-case
							case 1:
								IQ[ jz-1 ] &= 0x7fffff;
								break;
							case 2:
								IQ[ jz-1 ] &= 0x3fffff;
								break;
							}
						}
						if ( ih === 2 ) {
							z = 1.0 - z;
							if ( carry !== 0 ) {
								z -= ldexp( 1.0, q0 );
							}
						}
					}
					// Check if re-computation is needed...
					if ( z === 0.0 ) {
						j = 0;
						for ( i = jz-1; i >= jk; i-- ) {
							j |= IQ[ i ];
						}
						if ( j === 0 ) {
							// Need re-computation...
							for ( k = 1; IQ[ jk-k ] === 0; k++ ) {
								// `k` is the number of terms needed...
							}
							for ( i = jz+1; i <= jz+k; i++ ) {
								// Add `q[jz+1]` to `q[jz+k]`...
								f[ jx+i ] = IPIO2[ jv+i ];
								fw = 0.0;
								for ( j = 0; j <= jx; j++ ) {
									fw += x[ j ] * f[ jx + (i-j) ];
								}
								q[ i ] = fw;
							}
							jz += k;
							return compute( x, y, jz, q, q0, jk, jv, jx, f );
						}
					}
					// Chop off zero terms...
					if ( z === 0.0 ) {
						jz -= 1;
						q0 -= 24;
						while ( IQ[ jz ] === 0 ) {
							jz -= 1;
							q0 -= 24;
						}
					} else {
						// Break `z` into 24-bit if necessary...
						z = ldexp( z, -q0 );
						if ( z >= TWO24 ) {
							fw = (TWON24*z)|0;
							IQ[ jz ] = ( z - (TWO24*fw) )|0;
							jz += 1;
							q0 += 24;
							IQ[ jz ] = fw;
						} else {
							IQ[ jz ] = z|0;
						}
					}
					// Convert integer "bit" chunk to floating-point value...
					fw = ldexp( 1.0, q0 );
					for ( i = jz; i >= 0; i-- ) {
						q[ i ] = fw * IQ[i];
						fw *= TWON24;
					}
					// Compute `PIO2[0,...,jp]*q[jz,...,0]`...
					for ( i = jz; i >= 0; i-- ) {
						fw = 0.0;
						for ( k = 0; k <= jp && k <= jz-i; k++ ) {
							fw += PIO2[ k ] * q[ i+k ];
						}
						FQ[ jz-i ] = fw;
					}
					// Compress `FQ[]` into `y[]`...
					fw = 0.0;
					for ( i = jz; i >= 0; i-- ) {
						fw += FQ[ i ];
					}
					if ( ih === 0 ) {
						y[ 0 ] = fw;
					} else {
						y[ 0 ] = -fw;
					}
					fw = FQ[ 0 ] - fw;
					for ( i = 1; i <= jz; i++ ) {
						fw += FQ[i];
					}
					if ( ih === 0 ) {
						y[ 1 ] = fw;
					} else {
						y[ 1 ] = -fw;
					}
					return ( n & 7 );
				}


				// MAIN //

				/**
				* Returns the last three binary digits of `N` with `y = x - Nπ/2` so that `|y| < π/2`.
				*
				* ## Method
				*
				* -   The method is to compute the integer (`mod 8`) and fraction parts of `2x/π` without doing the full multiplication. In general, we skip the part of the product that is known to be a huge integer (more accurately, equals `0 mod 8` ). Thus, the number of operations is independent of the exponent of the input.
				*
				* @private
				* @param {PositiveNumber} x - input value
				* @param {(Array|TypedArray|Object)} y - remainder elements
				* @param {PositiveInteger} e0 - the exponent of `x[0]` (must be <= 16360)
				* @param {PositiveInteger} nx - dimension of `x[]`
				* @returns {number} last three binary digits of `N`
				*/
				function kernelRempio2( x, y, e0, nx ) {
					var fw;
					var jk;
					var jv;
					var jx;
					var jz;
					var q0;
					var i;
					var j;
					var m;

					// Initialize `jk` for double-precision floating-point numbers:
					jk = 4;

					// Determine `jx`, `jv`, `q0` (note that `q0 < 3`):
					jx = nx - 1;
					jv = ( (e0 - 3) / 24 )|0;
					if ( jv < 0 ) {
						jv = 0;
					}
					q0 = e0 - (24 * (jv + 1));

					// Set up `F[0]` to `F[jx+jk]` where `F[jx+jk] = IPIO2[jv+jk]`:
					j = jv - jx;
					m = jx + jk;
					for ( i = 0; i <= m; i++ ) {
						if ( j < 0 ) {
							F[ i ] = 0.0;
						} else {
							F[ i ] = IPIO2[ j ];
						}
						j += 1;
					}
					// Compute `Q[0],Q[1],...,Q[jk]`:
					for ( i = 0; i <= jk; i++ ) {
						fw = 0.0;
						for ( j = 0; j <= jx; j++ ) {
							fw += x[ j ] * F[ jx + (i-j) ];
						}
						Q[ i ] = fw;
					}
					jz = jk;
					return compute( x, y, jz, Q, q0, jk, jv, jx, F );
				}


				// EXPORTS //

				module.exports = kernelRempio2;
			},
			"rempio2.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/e_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
				*
				* Developed at SunPro, a Sun Microsystems, Inc. business.
				* Permission to use, copy, modify, and distribute this
				* software is freely granted, provided that this notice
				* is preserved.
				*
				* Optimized by Bruce D. Evans.
				* ```
				*/

				'use strict';

				// MODULES //

				var getHighWord = require( '@stdlib/number-float64-base-get-high-word' );
				var getLowWord = require( '@stdlib/number-float64-base-get-low-word' );
				var fromWords = require( '@stdlib/number-float64-base-from-words' );
				var rempio2Kernel = require( './kernel_rempio2.js' );
				var rempio2Medium = require( './rempio2_medium.js' );


				// VARIABLES //

				var ZERO = 0.00000000000000000000e+00;    // 0x00000000, 0x00000000
				var TWO24 = 1.67772160000000000000e+07;   // 0x41700000, 0x00000000

				// 33 bits of π/2:
				var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

				// PIO2_1T = π/2 - PIO2_1:
				var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331
				var TWO_PIO2_1T = 2.0 * PIO2_1T;
				var THREE_PIO2_1T = 3.0 * PIO2_1T;
				var FOUR_PIO2_1T = 4.0 * PIO2_1T;

				// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
				var ABS_MASK = 0x7fffffff|0; // asm type annotation

				// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
				var EXPONENT_MASK = 0x7ff00000|0; // asm type annotation

				// High word significand mask: 0xfffff = 1048575 => 00000000000011111111111111111111
				var SIGNIFICAND_MASK = 0xfffff|0; // asm type annotation

				// High word significand for π and π/2: 0x921fb = 598523 => 00000000000010010010000111111011
				var PI_HIGH_WORD_SIGNIFICAND = 0x921fb|0; // asm type annotation

				// High word for π/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
				var PIO4_HIGH_WORD = 0x3fe921fb|0; // asm type annotation

				// High word for 3π/4: 0x4002d97c = 1073928572 => 01000000000000101101100101111100
				var THREE_PIO4_HIGH_WORD = 0x4002d97c|0; // asm type annotation

				// High word for 5π/4: 0x400f6a7a = 1074752122 => 01000000000011110110101001111010
				var FIVE_PIO4_HIGH_WORD = 0x400f6a7a|0; // asm type annotation

				// High word for 6π/4: 0x4012d97c = 1074977148 => 01000000000100101101100101111100
				var THREE_PIO2_HIGH_WORD = 0x4012d97c|0; // asm type annotation

				// High word for 7π/4: 0x4015fdbc = 1075183036 => 01000000000101011111110110111100
				var SEVEN_PIO4_HIGH_WORD = 0x4015fdbc|0; // asm type annotation

				// High word for 8π/4: 0x401921fb = 1075388923 => 01000000000110010010000111111011
				var TWO_PI_HIGH_WORD = 0x401921fb|0; // asm type annotation

				// High word for 9π/4: 0x401c463b = 1075594811 => 01000000000111000100011000111011
				var NINE_PIO4_HIGH_WORD = 0x401c463b|0; // asm type annotation

				// 2^20*π/2 = 1647099.3291652855 => 0100000100111001001000011111101101010100010001000010110100011000 => high word => 0x413921fb = 1094263291 => 01000001001110010010000111111011
				var MEDIUM = 0x413921fb|0; // asm type annotation

				// Arrays for storing temporary values:
				var TX = [ 0.0, 0.0, 0.0 ]; // WARNING: not thread safe
				var TY = [ 0.0, 0.0 ]; // WARNING: not thread safe


				// MAIN //

				/**
				* Computes `x - nπ/2 = r`.
				*
				* ## Notes
				*
				* -   Returns `n` and stores the remainder `r` as two numbers `y[0]` and `y[1]`, such that `y[0]+y[1] = r`.
				*
				*
				* @param {number} x - input value
				* @param {(Array|TypedArray|Object)} y - remainder elements
				* @returns {integer} factor of `π/2`
				*
				* @example
				* var y = [ 0.0, 0.0 ];
				* var n = rempio2( 128.0, y );
				* // returns 81
				*
				* var y1 = y[ 0 ];
				* // returns ~0.765
				*
				* var y2 = y[ 1 ];
				* // returns ~3.618e-17
				*
				* @example
				* var y = [ 0.0, 0.0 ];
				* var n = rempio2( NaN, y );
				* // returns 0
				*
				* var y1 = y[ 0 ];
				* // returns NaN
				*
				* var y2 = y[ 1 ];
				* // returns NaN
				*/
				function rempio2( x, y ) {
					var low;
					var e0;
					var hx;
					var ix;
					var nx;
					var i;
					var n;
					var z;

					hx = getHighWord( x );
					ix = (hx & ABS_MASK)|0; // asm type annotation

					// Case: |x| ~<= π/4 (no need for reduction)
					if ( ix <= PIO4_HIGH_WORD ) {
						y[ 0 ] = x;
						y[ 1 ] = 0.0;
						return 0;
					}
					// Case: |x| ~<= 5π/4
					if ( ix <= FIVE_PIO4_HIGH_WORD ) {
						// Case: |x| ~= π/2 or π
						if ( (ix & SIGNIFICAND_MASK) === PI_HIGH_WORD_SIGNIFICAND ) {
							// Cancellation => use medium case
							return rempio2Medium( x, ix, y );
						}
						// Case: |x| ~<= 3π/4
						if ( ix <= THREE_PIO4_HIGH_WORD ) {
							if ( x > 0.0 ) {
								z = x - PIO2_1;
								y[ 0 ] = z - PIO2_1T;
								y[ 1 ] = (z - y[0]) - PIO2_1T;
								return 1;
							}
							z = x + PIO2_1;
							y[ 0 ] = z + PIO2_1T;
							y[ 1 ] = (z - y[0]) + PIO2_1T;
							return -1;
						}
						if ( x > 0.0 ) {
							z = x - ( 2.0*PIO2_1 );
							y[ 0 ] = z - TWO_PIO2_1T;
							y[ 1 ] = (z - y[0]) - TWO_PIO2_1T;
							return 2;
						}
						z = x + ( 2.0*PIO2_1 );
						y[ 0 ] = z + TWO_PIO2_1T;
						y[ 1 ] = (z - y[0]) + TWO_PIO2_1T;
						return -2;
					}
					// Case: |x| ~<= 9π/4
					if ( ix <= NINE_PIO4_HIGH_WORD ) {
						// Case: |x| ~<= 7π/4
						if ( ix <= SEVEN_PIO4_HIGH_WORD ) {
							// Case: |x| ~= 3π/2
							if ( ix === THREE_PIO2_HIGH_WORD ) {
								return rempio2Medium( x, ix, y );
							}
							if ( x > 0.0 ) {
								z = x - ( 3.0*PIO2_1 );
								y[ 0 ] = z - THREE_PIO2_1T;
								y[ 1 ] = (z - y[0]) - THREE_PIO2_1T;
								return 3;
							}
							z = x + ( 3.0*PIO2_1 );
							y[ 0 ] = z + THREE_PIO2_1T;
							y[ 1 ] = (z - y[0]) + THREE_PIO2_1T;
							return -3;
						}
						// Case: |x| ~= 4π/2
						if ( ix === TWO_PI_HIGH_WORD ) {
							return rempio2Medium( x, ix, y );
						}
						if ( x > 0.0 ) {
							z = x - ( 4.0*PIO2_1 );
							y[ 0 ] = z - FOUR_PIO2_1T;
							y[ 1 ] = (z - y[0]) - FOUR_PIO2_1T;
							return 4;
						}
						z = x + ( 4.0*PIO2_1 );
						y[ 0 ] = z + FOUR_PIO2_1T;
						y[ 1 ] = (z - y[0]) + FOUR_PIO2_1T;
						return -4;
					}
					// Case: |x| ~< 2^20*π/2 (medium size)
					if ( ix < MEDIUM ) {
						return rempio2Medium( x, ix, y );
					}
					// Case: x is NaN or infinity
					if ( ix >= EXPONENT_MASK ) {
						y[ 0 ] = NaN;
						y[ 1 ] = NaN;
						return 0.0;
					}
					// Set z = scalbn(|x|, ilogb(x)-23)...
					low = getLowWord( x );
					e0 = (ix >> 20) - 1046; // `e0 = ilogb(z) - 23` => unbiased exponent minus 23
					z = fromWords( ix - ((e0 << 20)|0), low );
					for ( i = 0; i < 2; i++ ) {
						TX[ i ] = z|0;
						z = (z - TX[i]) * TWO24;
					}
					TX[ 2 ] = z;
					nx = 3;
					while ( TX[ nx-1 ] === ZERO ) {
						// Skip zero term...
						nx -= 1;
					}
					n = rempio2Kernel( TX, TY, e0, nx, 1 );
					if ( x < 0.0 ) {
						y[ 0 ] = -TY[ 0 ];
						y[ 1 ] = -TY[ 1 ];
						return -n;
					}
					y[ 0 ] = TY[ 0 ];
					y[ 1 ] = TY[ 1 ];
					return n;
				}


				// EXPORTS //

				module.exports = rempio2;
			},
			"rempio2_medium.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/k_rem_pio2.c}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
				*
				* Developed at SunPro, a Sun Microsystems, Inc. business.
				* Permission to use, copy, modify, and distribute this
				* software is freely granted, provided that this notice
				* is preserved.
				* ```
				*/

				'use strict';

				// MODULES //

				var round = require( '@stdlib/math-base-special-round' );
				var getHighWord = require( '@stdlib/number-float64-base-get-high-word' );


				// VARIABLES //

				// 53 bits of 2/π:
				var INVPIO2 = 6.36619772367581382433e-01; // 0x3FE45F30, 0x6DC9C883

				// First 33 bits of π/2:
				var PIO2_1 = 1.57079632673412561417e+00;  // 0x3FF921FB, 0x54400000

				// PIO2_1T = π/2 - PIO2_1:
				var PIO2_1T = 6.07710050650619224932e-11; // 0x3DD0B461, 0x1A626331

				// Another 33 bits of π/2:
				var PIO2_2 = 6.07710050630396597660e-11;  // 0x3DD0B461, 0x1A600000

				// PIO2_2T = π/2 - ( PIO2_1 + PIO2_2 ):
				var PIO2_2T = 2.02226624879595063154e-21; // 0x3BA3198A, 0x2E037073

				// Another 33 bits of π/2:
				var PIO2_3 = 2.02226624871116645580e-21;  // 0x3BA3198A, 0x2E000000

				// PIO2_3T = π/2 - ( PIO2_1 + PIO2_2 + PIO2_3 ):
				var PIO2_3T = 8.47842766036889956997e-32; // 0x397B839A, 0x252049C1

				// Exponent mask (2047 => 0x7ff):
				var EXPONENT_MASK = 0x7ff|0; // asm type annotation


				// MAIN //

				/**
				* Computes `x - nπ/2 = r` for medium-sized inputs.
				*
				* @private
				* @param {number} x - input value
				* @param {uint32} ix - high word of `x`
				* @param {(Array|TypedArray|Object)} y - remainder elements
				* @returns {integer} factor of `π/2`
				*/
				function rempio2Medium( x, ix, y ) {
					var high;
					var n;
					var t;
					var r;
					var w;
					var i;
					var j;

					n = round( x * INVPIO2 );
					r = x - ( n * PIO2_1 );
					w = n * PIO2_1T;

					// First rounding (good to 85 bits)...
					j = (ix >> 20)|0; // asm type annotation
					y[ 0 ] = r - w;
					high = getHighWord( y[0] );
					i = j - ( (high >> 20) & EXPONENT_MASK );

					// Check if a second iteration is needed (good to 118 bits)...
					if ( i > 16 ) {
						t = r;
						w = n * PIO2_2;
						r = t - w;
						w = (n * PIO2_2T) - ((t-r) - w);
						y[ 0 ] = r - w;
						high = getHighWord( y[0] );
						i = j - ( (high >> 20) & EXPONENT_MASK );

						// Check if a third iteration is needed (151 bits accumulated)...
						if ( i > 49 ) {
							t = r;
							w = n * PIO2_3;
							r = t - w;
							w = (n * PIO2_3T) - ((t-r) - w);
							y[ 0 ] = r - w;
						}
					}
					y[ 1 ] = (r - y[0]) - w;
					return n;
				}


				// EXPORTS //

				module.exports = rempio2Medium;
			}
		}
	},
	"@stdlib/math-base-special-round": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// TODO: implementation

				/**
				* Round a numeric value to the nearest integer.
				*
				* @module @stdlib/math-base-special-round
				*
				* @example
				* var round = require( '@stdlib/math-base-special-round' );
				*
				* var v = round( -4.2 );
				* // returns -4.0
				*
				* v = round( -4.5 );
				* // returns -4.0
				*
				* v = round( -4.6 );
				* // returns -5.0
				*
				* v = round( 9.99999 );
				* // returns 10.0
				*
				* v = round( 9.5 );
				* // returns 10.0
				*
				* v = round( 9.2 );
				* // returns 9.0
				*
				* v = round( 0.0 );
				* // returns 0.0
				*
				* v = round( -0.0 );
				* // returns -0.0
				*
				* v = round( Infinity );
				* // returns Infinity
				*
				* v = round( -Infinity );
				* // returns -Infinity
				*
				* v = round( NaN );
				* // returns NaN
				*/

				// MODULES //

				var round = require( './round.js' );


				// EXPORTS //

				module.exports = round;
			},
			"round.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// TODO: implementation

				/**
				* Rounds a numeric value to the nearest integer.
				*
				* @param {number} x - input value
				* @returns {number} function value
				*
				* @example
				* var v = round( -4.2 );
				* // returns -4.0
				*
				* @example
				* var v = round( -4.5 );
				* // returns -4.0
				*
				* @example
				* var v = round( -4.6 );
				* // returns -5.0
				*
				* @example
				* var v = round( 9.99999 );
				* // returns 10.0
				*
				* @example
				* var v = round( 9.5 );
				* // returns 10.0
				*
				* @example
				* var v = round( 9.2 );
				* // returns 9.0
				*
				* @example
				* var v = round( 0.0 );
				* // returns 0.0
				*
				* @example
				* var v = round( -0.0 );
				* // returns -0.0
				*
				* @example
				* var v = round( Infinity );
				* // returns Infinity
				*
				* @example
				* var v = round( -Infinity );
				* // returns -Infinity
				*
				* @example
				* var v = round( NaN );
				* // returns NaN
				*/
				var round = Math.round; // eslint-disable-line stdlib/no-builtin-math


				// EXPORTS //

				module.exports = round;
			}
		}
	},
	"@stdlib/math-base-special-sin": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Compute the sine of a number.
				*
				* @module @stdlib/math-base-special-sin
				*
				* @example
				* var sin = require( '@stdlib/math-base-special-sin' );
				*
				* var v = sin( 0.0 );
				* // returns ~0.0
				*
				* v = sin( 3.141592653589793/2.0 );
				* // returns ~1.0
				*
				* v = sin( -3.141592653589793/6.0 );
				* // returns ~-0.5
				*
				* v = sin( NaN );
				* // returns NaN
				*/

				// MODULES //

				var sin = require( './sin.js' );


				// EXPORTS //

				module.exports = sin;
			},
			"sin.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*
				*
				* ## Notice
				*
				* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_sin.c}. The implementation follows the original, but has been modified for JavaScript.
				*
				* ```text
				* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
				*
				* Developed at SunPro, a Sun Microsystems, Inc. business.
				* Permission to use, copy, modify, and distribute this
				* software is freely granted, provided that this notice
				* is preserved.
				* ```
				*/

				'use strict';

				// MODULES //

				var getHighWord = require( '@stdlib/number-float64-base-get-high-word' );
				var kernelCos = require( '@stdlib/math-base-special-kernel-cos' );
				var kernelSin = require( '@stdlib/math-base-special-kernel-sin' );
				var rempio2 = require( '@stdlib/math-base-special-rempio2' );


				// VARIABLES //

				// Absolute value mask: 0x7fffffff = 2147483647 => 01111111111111111111111111111111
				var ABS_MASK = 0x7fffffff|0; // asm type annotation

				// Exponent mask: 0x7ff00000 = 2146435072 => 01111111111100000000000000000000
				var EXPONENT_MASK = 0x7ff00000|0; // asm type annotation

				// High word for PI/4: 0x3fe921fb = 1072243195 => 00111111111010010010000111111011
				var PIO4_HIGH_WORD = 0x3fe921fb|0; // asm type annotation

				// 2^-26 = 1.4901161193847656e-8 => 0011111001010000000000000000000000000000000000000000000000000000 => high word => 00111110010100000000000000000000 => 0x3e500000 = 1045430272
				var SMALL_HIGH_WORD = 0x3e500000|0; // asm type annotation

				// Array for storing remainder elements:
				var Y = [ 0.0, 0.0 ]; // WARNING: not thread safe


				// MAIN //

				/**
				* Computes the sine of a number.
				*
				* ## Method
				*
				* -   Let \\(S\\), \\(C\\), and \\(T\\) denote the \\(\sin\\), \\(\cos\\), and \\(\tan\\), respectively, on \\(\[-\pi/4, +\pi/4\]\\).
				*
				* -   Reduce the argument \\(x\\) to \\(y1+y2 = x-k\pi/2\\) in \\(\[-\pi/4, +\pi/4\]\\), and let \\(n = k \mod 4\\).
				*
				* -   We have
				*
				*     | n | sin(x) | cos(x) | tan(x) |
				*     | - | ------ | ------ | ------ |
				*     | 0 |   S    |   C    |    T   |
				*     | 1 |   C    |  -S    |  -1/T  |
				*     | 2 |  -S    |  -C    |    T   |
				*     | 3 |  -C    |   S    |  -1/T  |
				*
				*
				* @param {number} x - input value (in radians)
				* @returns {number} sine
				*
				* @example
				* var v = sin( 0.0 );
				* // returns ~0.0
				*
				* @example
				* var v = sin( 3.141592653589793/2.0 );
				* // returns ~1.0
				*
				* @example
				* var v = sin( -3.141592653589793/6.0 );
				* // returns ~-0.5
				*
				* @example
				* var v = sin( NaN );
				* // returns NaN
				*/
				function sin( x ) {
					var ix;
					var n;

					ix = getHighWord( x );
					ix &= ABS_MASK;

					// Case: |x| ~< π/4
					if ( ix <= PIO4_HIGH_WORD ) {
						// Case: |x| ~< 2^-26
						if ( ix < SMALL_HIGH_WORD ) {
							return x;
						}
						return kernelSin( x, 0.0 );
					}
					// Case: x is NaN or infinity
					if ( ix >= EXPONENT_MASK ) {
						return NaN;
					}
					// Argument reduction...
					n = rempio2( x, Y );
					switch ( n & 3 ) {
					case 0:
						return kernelSin( Y[ 0 ], Y[ 1 ] );
					case 1:
						return kernelCos( Y[ 0 ], Y[ 1 ] );
					case 2:
						return -kernelSin( Y[ 0 ], Y[ 1 ] );
					default:
						return -kernelCos( Y[ 0 ], Y[ 1 ] );
					}
				}


				// EXPORTS //

				module.exports = sin;
			}
		}
	},
	"@stdlib/math-base-special-sinpi": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Compute the value of `sin(πx)`.
				*
				* @module @stdlib/math-base-special-sinpi
				*
				* @example
				* var sinpi = require( '@stdlib/math-base-special-sinpi' );
				*
				* var y = sinpi( 0.0 );
				* // returns 0.0
				*
				* y = sinpi( 0.5 );
				* // returns 1.0
				*
				* y = sinpi( 0.9 );
				* // returns ~0.309
				*
				* y = sinpi( NaN );
				* // returns NaN
				*/

				// MODULES //

				var sinpi = require( './sinpi.js' );


				// EXPORTS //

				module.exports = sinpi;
			},
			"sinpi.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/*
				* Notes:
				*	=> sin(-x) = -sin(x)
				*	=> sin(+n) = +0, where `n` is a positive integer
				*	=> sin(-n) = -sin(+n) = -0, where `n` is a positive integer
				*	=> cos(-x) = cos(x)
				*/


				// MODULES //

				var isnan = require( '@stdlib/math-base-assert-is-nan' );
				var isInfinite = require( '@stdlib/math-base-assert-is-infinite' );
				var cos = require( '@stdlib/math-base-special-cos' );
				var sin = require( '@stdlib/math-base-special-sin' );
				var abs = require( '@stdlib/math-base-special-abs' );
				var copysign = require( '@stdlib/math-base-special-copysign' );
				var PI = require( '@stdlib/constants-float64-pi' );


				// MAIN //

				/**
				* Computes the value of `sin(πx)`.
				*
				* @param {number} x - input value
				* @returns {number} function value
				*
				* @example
				* var y = sinpi( 0.0 );
				* // returns 0.0
				*
				* @example
				* var y = sinpi( 0.5 );
				* // returns 1.0
				*
				* @example
				* var y = sinpi( 0.9 );
				* // returns ~0.309
				*
				* @example
				* var y = sinpi( NaN );
				* // returns NaN
				*/
				function sinpi( x ) {
					var ar;
					var r;
					if ( isnan( x ) ) {
						return NaN;
					}
					if ( isInfinite( x ) ) {
						return NaN;
					}
					// Argument reduction (reduce to [0,2))...
					r = x % 2.0; // sign preserving
					ar = abs( r );

					// If `x` is an integer, the mod is an integer...
					if ( ar === 0.0 || ar === 1.0 ) {
						return copysign( 0.0, r );
					}
					if ( ar < 0.25 ) {
						return sin( PI*r );
					}
					// In each of the following, we further reduce to [-π/4,π/4)...
					if ( ar < 0.75 ) {
						ar = 0.5 - ar;
						return copysign( cos( PI*ar ), r );
					}
					if ( ar < 1.25 ) {
						r = copysign( 1.0, r ) - r;
						return sin( PI*r );
					}
					if ( ar < 1.75 ) {
						ar -= 1.5;
						return -copysign( cos( PI*ar ), r );
					}
					r -= copysign( 2.0, r );
					return sin( PI*r );
				}


				// EXPORTS //

				module.exports = sinpi;
			}
		}
	},
	"@stdlib/math-base-special-sqrt": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Compute the principal square root of a double-precision floating-point number.
				*
				* @module @stdlib/math-base-special-sqrt
				*
				* @example
				* var sqrt = require( '@stdlib/math-base-special-sqrt' );
				*
				* var v = sqrt( 4.0 );
				* // returns 2.0
				*
				* v = sqrt( 9.0 );
				* // returns 3.0
				*
				* v = sqrt( 0.0 );
				* // returns 0.0
				*
				* v = sqrt( -4.0 );
				* // returns NaN
				*
				* v = sqrt( NaN );
				* // returns NaN
				*/

				// MODULES //

				var sqrt = require( './main.js' );


				// EXPORTS //

				module.exports = sqrt;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MAIN //

				/**
				* Compute the principal square root of a double-precision floating-point number.
				*
				* @type {Function}
				* @param {number} x - input value
				* @returns {number} principal square root
				*
				* @example
				* var v = sqrt( 4.0 );
				* // returns 2.0
				*
				* v = sqrt( 9.0 );
				* // returns 3.0
				*
				* v = sqrt( 0.0 );
				* // returns 0.0
				*
				* v = sqrt( -4.0 );
				* // returns NaN
				*
				* v = sqrt( NaN );
				* // returns NaN
				*/
				var sqrt = Math.sqrt; // eslint-disable-line stdlib/no-builtin-math


				// EXPORTS //

				module.exports = sqrt;
			}
		}
	},
	"@stdlib/math-base-special-trunc": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Round a double-precision floating-point number toward zero.
				*
				* @module @stdlib/math-base-special-trunc
				*
				* @example
				* var trunc = require( '@stdlib/math-base-special-trunc' );
				*
				* var v = trunc( -4.2 );
				* // returns -4.0
				*
				* v = trunc( 9.99999 );
				* // returns 9.0
				*
				* v = trunc( 0.0 );
				* // returns 0.0
				*
				* v = trunc( -0.0 );
				* // returns -0.0
				*
				* v = trunc( NaN );
				* // returns NaN
				*
				* v = trunc( Infinity );
				* // returns Infinity
				*
				* v = trunc( -Infinity );
				* // returns -Infinity
				*/

				// MODULES //

				var trunc = require( './main.js' );


				// EXPORTS //

				module.exports = trunc;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var floor = require( '@stdlib/math-base-special-floor' );
				var ceil = require( '@stdlib/math-base-special-ceil' );


				// MAIN //

				/**
				* Rounds a double-precision floating-point number toward zero.
				*
				* @param {number} x - input value
				* @returns {number} rounded value
				*
				* @example
				* var v = trunc( -4.2 );
				* // returns -4.0
				*
				* @example
				* var v = trunc( 9.99999 );
				* // returns 9.0
				*
				* @example
				* var v = trunc( 0.0 );
				* // returns 0.0
				*
				* @example
				* var v = trunc( -0.0 );
				* // returns -0.0
				*
				* @example
				* var v = trunc( NaN );
				* // returns NaN
				*
				* @example
				* var v = trunc( Infinity );
				* // returns Infinity
				*
				* @example
				* var v = trunc( -Infinity );
				* // returns -Infinity
				*/
				function trunc( x ) {
					if ( x < 0.0 ) {
						return ceil( x );
					}
					return floor( x );
				}


				// EXPORTS //

				module.exports = trunc;
			}
		}
	},
	"@stdlib/math-base-tools-continued-fraction": {
		":mainpath:": "./lib",
		"lib": {
			"basic.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var abs = require( '@stdlib/math-base-special-abs' );
				var EPS = require( '@stdlib/constants-float64-eps' );
				var FLOAT32_SMALLEST_NORMAL = require( '@stdlib/constants-float32-smallest-normal' );


				// VARIABLES //

				var MAX_ITER = 1000000;


				// FUNCTIONS //

				/**
				* Evaluates a continued fraction expansion.
				*
				* ```text
				*           a1
				*      ---------------
				*      b1 +     a2
				*           ----------
				*            b2 +   a3
				*                -----
				*                b3 + ...
				* ```
				*
				* @private
				* @param {Function} gen - function giving terms of continued fraction expansion
				* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term
				* @param {PositiveInteger} maxIter - maximum number of iterations
				* @returns {number} evaluated expansion
				*/
				function continuedFractionA( gen, factor, maxIter ) {
					var delta;
					var a0;
					var C;
					var D;
					var f;
					var v;

					v = gen();
					f = v[ 1 ];
					a0 = v[ 0 ];
					if ( f === 0 ) {
						f = FLOAT32_SMALLEST_NORMAL;
					}
					C = f;
					D = 0.0;

					do {
						v = gen();
						if ( v ) {
							D = v[ 1 ] + ( v[ 0 ] * D );
							if ( D === 0.0 ) {
								D = FLOAT32_SMALLEST_NORMAL;
							}
							C = v[ 1 ] + ( v[ 0 ] / C );
							if ( C === 0.0 ) {
								C = FLOAT32_SMALLEST_NORMAL;
							}
							D = 1.0 / D;
							delta = C * D;
							f *= delta;
						}
					} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus

					return a0 / f;
				}

				/**
				* Evaluates a continued fraction expansion.
				*
				* ```text
				*      b0 +   a1
				*      ---------------
				*      b1 +   a2
				*           ----------
				*           b2 +   a3
				*                -----
				*                b3 + ...
				* ```
				*
				* @private
				* @param {Function} gen - function giving terms of continued fraction expansion
				* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term
				* @param {PositiveInteger} maxIter - maximum number of iterations
				* @returns {number} evaluated expansion
				*/
				function continuedFractionB( gen, factor, maxIter ) {
					var delta;
					var C;
					var D;
					var f;
					var v;

					v = gen();
					f = v[ 1 ];
					if ( f === 0.0 ) {
						f = FLOAT32_SMALLEST_NORMAL;
					}
					C = f;
					D = 0.0;
					do {
						v = gen();
						if ( v ) {
							D = v[ 1 ] + ( v[ 0 ] * D );
							if ( D === 0.0 ) {
								D = FLOAT32_SMALLEST_NORMAL;
							}
							C = v[ 1 ] + ( v[ 0 ] / C );
							if ( C === 0.0 ) {
								C = FLOAT32_SMALLEST_NORMAL;
							}
							D = 1.0 / D;
							delta = C * D;
							f *= delta;
						}
					} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
					return f;
				}


				// MAIN //

				/**
				* Evaluates the continued fraction approximation for the supplied series generator using the modified Lentz algorithm.
				*
				* ## References
				*
				* -   Lentz, William J. 1976. "Generating bessel functions in Mie scattering calculations using continued fractions." _Applied Optics_ 15 (3): 668–71. doi:[10.1364/AO.15.000668](https://doi.org/10.1364/AO.15.000668).
				*
				* @param {Function} generator - function returning terms of continued fraction expansion
				* @param {Object} [options] - function options
				* @param {PositiveInteger} [options.maxIter=1000000] - maximum number of iterations
				* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
				* @param {boolean} [options.keep=false] - whether to keep the leading b term
				* @returns {number} value of continued fraction
				*
				* @example
				* // Continued fraction for (e-1)^(-1):
				* var gen = generator();
				* var out = continuedFraction( gen );
				* // returns ~0.582
				*
				* function generator() {
				*    var i = 0;
				*    return function() {
				*        i++;
				*        return [ i, i ];
				*    };
				* }
				*/
				function continuedFraction( generator, options ) {
					var maxIter;
					var opts;
					var eps;

					opts = {};
					if ( arguments.length > 1 ) {
						opts = options;
					}
					eps = opts.tolerance || EPS;
					maxIter = opts.maxIter || MAX_ITER;

					if ( opts.keep ) {
						return continuedFractionB( generator, eps, maxIter );
					}
					return continuedFractionA( generator, eps, maxIter );
				}


				// EXPORTS //

				module.exports = continuedFraction;
			},
			"generators.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var abs = require( '@stdlib/math-base-special-abs' );
				var FLOAT32_SMALLEST_NORMAL = require( '@stdlib/constants-float32-smallest-normal' );
				var EPS = require( '@stdlib/constants-float64-eps' );


				// VARIABLES //

				var MAX_ITER = 1000000;


				// FUNCTIONS //

				/**
				* Evaluates a continued fraction expansion.
				*
				* ```text
				*           a1
				*      ---------------
				*      b1 +     a2
				*           ----------
				*            b2 +   a3
				*                -----
				*                b3 + ...
				* ```
				*
				* @private
				* @param {Function} gen - function giving terms of continued fraction expansion
				* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term
				* @param {PositiveInteger} maxIter - maximum number of iterations
				* @returns {number} evaluated expansion
				*/
				function continuedFractionA( gen, factor, maxIter ) {
					var isgenerator;
					var delta;
					var a0;
					var f;
					var C;
					var D;
					var v;

					isgenerator = typeof gen.next === 'function';
					v = ( isgenerator ) ? gen.next().value : gen();
					f = v[ 1 ];
					a0 = v[ 0 ];
					if ( f === 0.0 ) {
						f = FLOAT32_SMALLEST_NORMAL;
					}
					C = f;
					D = 0;
					if ( isgenerator === true ) {
						do {
							v = gen.next().value;
							if ( v ) {
								D = v[ 1 ] + ( v[ 0 ] * D );
								if ( D === 0.0 ) {
									D = FLOAT32_SMALLEST_NORMAL;
								}
								C = v[ 1 ] + ( v[ 0 ] / C );
								if ( C === 0.0 ) {
									C = FLOAT32_SMALLEST_NORMAL;
								}
								D = 1.0 / D;
								delta = C * D;
								f *= delta;
							}
						} while ( ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
					} else {
						do {
							v = gen();
							if ( v ) {
								D = v[ 1 ] + ( v[ 0 ] * D );
								if ( D === 0.0 ) {
									D = FLOAT32_SMALLEST_NORMAL;
								}
								C = v[ 1 ] + ( v[ 0 ] / C );
								if ( C === 0.0 ) {
									C = FLOAT32_SMALLEST_NORMAL;
								}
								D = 1.0 / D;
								delta = C * D;
								f *= delta;
							}
						} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
					}
					return a0 / f;
				}

				/**
				* Evaluates a continued fraction expansion.
				*
				* ```text
				*      b0 +    a1
				*      ---------------
				*      b1 +     a2
				*           ----------
				*           b2 +   a3
				*                -----
				*                b3 + ...
				* ```
				*
				* @private
				* @param {Function} gen - function giving terms of continued fraction expansion
				* @param {PositiveNumber} factor - further terms are only added as long as factor*result is smaller than the next term
				* @param {PositiveInteger} maxIter - maximum number of iterations
				* @returns {number} evaluated expansion
				*/
				function continuedFractionB( gen, factor, maxIter ) {
					var isgenerator;
					var delta;
					var f;
					var C;
					var D;
					var v;

					isgenerator = typeof gen.next === 'function';
					v = ( isgenerator ) ? gen.next().value : gen();
					f = v[ 1 ];
					if ( f === 0.0 ) {
						f = FLOAT32_SMALLEST_NORMAL;
					}
					C = f;
					D = 0.0;
					if ( isgenerator === true ) {
						do {
							v = gen.next().value;
							if ( v ) {
								D = v[ 1 ] + ( v[ 0 ] * D );
								if ( D === 0.0 ) {
									D = FLOAT32_SMALLEST_NORMAL;
								}
								C = v[ 1 ] + ( v[ 0 ] / C );
								if ( C === 0.0 ) {
									C = FLOAT32_SMALLEST_NORMAL;
								}
								D = 1.0 / D;
								delta = C * D;
								f *= delta;
							}
						} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
					} else {
						do {
							v = gen();
							if ( v ) {
								D = v[ 1 ] + ( v[ 0 ] * D );
								if ( D === 0.0 ) {
									D = FLOAT32_SMALLEST_NORMAL;
								}
								C = v[ 1 ] + ( v[ 0 ] / C );
								if ( C === 0.0 ) {
									C = FLOAT32_SMALLEST_NORMAL;
								}
								D = 1.0 / D;
								delta = C * D;
								f *= delta;
							}
						} while ( v && ( abs( delta - 1.0 ) > factor ) && --maxIter ); // eslint-disable-line no-plusplus
					}
					return f;
				}


				// MAIN //

				/**
				* Evaluates the continued fraction approximation for the supplied series generator using the modified Lentz algorithm.
				*
				* ## References
				*
				* -   Lentz, William J. 1976. "Generating bessel functions in Mie scattering calculations using continued fractions." _Applied Optics_ 15 (3): 668–71. doi:[10.1364/AO.15.000668](https://doi.org/10.1364/AO.15.000668).
				*
				* @param {Function} generator - function returning terms of continued fraction expansion
				* @param {Object} [options] - function options
				* @param {PositiveInteger} [options.maxIter=1000] - maximum number of iterations
				* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
				* @param {boolean} [options.keep=false] - whether to keep the leading b term
				* @returns {number} value of continued fraction
				*
				* @example
				* // Continued fraction for (e-1)^(-1):
				* var gen = generator();
				* var out = continuedFraction( gen );
				* // returns ~0.582
				*
				* function* generator() {
				*    var i = 0;
				*    while ( true ) {
				*        i++;
				*        yield [ i, i ];
				*    }
				* }
				*/
				function continuedFraction( generator, options ) {
					var maxIter;
					var opts;
					var eps;

					opts = {};
					if ( arguments.length > 1 ) {
						opts = options;
					}
					maxIter = opts.maxIter || MAX_ITER;
					eps = opts.tolerance || EPS;

					if ( opts.keep ) {
						return continuedFractionB( generator, eps, maxIter );
					}
					return continuedFractionA( generator, eps, maxIter );
				}


				// EXPORTS //

				module.exports = continuedFraction;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Calculate a continued fraction approximation.
				*
				* @module @stdlib/math-base-tools-continued-fraction
				*
				* @example
				* var continuedFraction = require( '@stdlib/math-base-tools-continued-fraction' );
				*
				* // Continued fraction for (e-1)^(-1):
				* var gen = generator()
				* var out = continuedFraction( gen );
				* // returns ~0.582
				*
				* function generator() {
				*    var i = 0;
				*    return function() {
				*        i++;
				*        return [ i, i ];
				*    };
				* }
				*/

				// MODULES //

				var hasGeneratorSupport = require( '@stdlib/assert-has-generator-support' );
				var generator = require( './generators.js' );
				var basic = require( './basic.js' );


				// MAIN //

				var continuedFraction;
				if ( hasGeneratorSupport() ) {
					continuedFraction = generator;
				} else {
					continuedFraction = basic;
				}


				// EXPORTS //

				module.exports = continuedFraction;
			}
		}
	},
	"@stdlib/math-base-tools-evalpoly": {
		":mainpath:": "./lib",
		"lib": {
			"evalpoly.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MAIN //

				/**
				* Evaluates a polynomial.
				*
				* ## Notes
				*
				* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
				* @param {number} x - value at which to evaluate the polynomial
				* @returns {number} evaluated polynomial
				*
				* @example
				* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
				* // returns 123.0
				*/
				function evalpoly( c, x ) {
					var p;
					var i;

					i = c.length;
					if ( i < 2 || x === 0.0 ) {
						if ( i === 0 ) {
							return 0.0;
						}
						return c[ 0 ];
					}
					i -= 1;
					p = ( c[ i ] * x ) + c[ i-1 ];
					i -= 2;
					while ( i >= 0 ) {
						p = ( p * x ) + c[ i ];
						i -= 1;
					}
					return p;
				}


				// EXPORTS //

				module.exports = evalpoly;
			},
			"factory.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var evalpoly = require( './evalpoly.js' );


				// MAIN //

				/**
				* Generates a function for evaluating a polynomial.
				*
				* ## Notes
				*
				* -   The compiled function uses [Horner's rule][horners-method] for efficient computation.
				*
				* [horners-method]: http://en.wikipedia.org/wiki/Horner%27s_method
				*
				*
				* @param {NumericArray} c - polynomial coefficients sorted in ascending degree
				* @returns {Function} function for evaluating a polynomial
				*
				* @example
				* var polyval = factory( [3.0,2.0,1.0] );
				*
				* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
				* // returns 123.0
				*
				* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
				* // returns 38.0
				*/
				function factory( c ) {
					var f;
					var n;
					var m;
					var i;

					// Avoid exceeding the maximum stack size on V8 :(. Note that the choice of `500` was empirically determined...
					if ( c.length > 500 ) {
						return polyval;
					}
					// Code generation. Start with the function definition...
					f = 'return function evalpoly(x){';

					// Create the function body...
					n = c.length;

					// If no coefficients, the function always returns 0...
					if ( n === 0 ) {
						f += 'return 0.0;';
					}
					// If only one coefficient, the function always returns that coefficient...
					else if ( n === 1 ) {
						f += 'return ' + c[ 0 ] + ';';
					}
					// If more than one coefficient, apply Horner's method...
					else {
						// If `x == 0`, return the first coefficient...
						f += 'if(x===0.0){return ' + c[ 0 ] + ';}';

						// Otherwise, evaluate the polynomial...
						f += 'return ' + c[ 0 ];
						m = n - 1;
						for ( i = 1; i < n; i++ ) {
							f += '+x*';
							if ( i < m ) {
								f += '(';
							}
							f += c[ i ];
						}
						// Close all the parentheses...
						for ( i = 0; i < m-1; i++ ) {
							f += ')';
						}
						f += ';';
					}
					// Close the function:
					f += '}';

					// Add a source directive for debugging:
					f += '//# sourceURL=evalpoly.factory.js';

					// Create the function in the global scope:
					return ( new Function( f ) )(); // eslint-disable-line no-new-func

					/*
					*    function evalpoly( x ) {
					*        if ( x === 0.0 ) {
					*            return c[ 0 ];
					*        }
					*        return c[0]+x*(c[1]+x*(c[2]+x*(c[3]+...+x*(c[n-2]+x*c[n-1]))));
					*    }
					*/

					/**
					* Evaluates a polynomial.
					*
					* @private
					* @param {number} x - value at which to evaluate a polynomial
					* @returns {number} evaluated polynomial
					*/
					function polyval( x ) {
						return evalpoly( c, x );
					}
				}


				// EXPORTS //

				module.exports = factory;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Evaluate a polynomial.
				*
				* @module @stdlib/math-base-tools-evalpoly
				*
				* @example
				* var evalpoly = require( '@stdlib/math-base-tools-evalpoly' );
				*
				* var v = evalpoly( [3.0,2.0,1.0], 10.0 ); // 3*10^0 + 2*10^1 + 1*10^2
				* // returns 123.0
				*
				* @example
				* var evalpoly = require( '@stdlib/math-base-tools-evalpoly' );
				*
				* var polyval = evalpoly.factory( [3.0,2.0,1.0] );
				*
				* var v = polyval( 10.0 ); // => 3*10^0 + 2*10^1 + 1*10^2
				* // returns 123.0
				*
				* v = polyval( 5.0 ); // => 3*5^0 + 2*5^1 + 1*5^2
				* // returns 38.0
				*/

				// MODULES //

				var setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );
				var evalpoly = require( './evalpoly.js' );
				var factory = require( './factory.js' );


				// MAIN //

				setReadOnly( evalpoly, 'factory', factory );


				// EXPORTS //

				module.exports = evalpoly;
			}
		}
	},
	"@stdlib/math-base-tools-sum-series": {
		":mainpath:": "./lib",
		"lib": {
			"basic.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var abs = require( '@stdlib/math-base-special-abs' );
				var EPS = require( '@stdlib/constants-float64-eps' );


				// VARIABLES //

				var MAX_TERMS = 1000000;


				// MAIN //

				/**
				* Sum the elements of the series given by the supplied function.
				*
				* @param {Function} generator - series function
				* @param {Object} [options] - function options
				* @param {PositiveInteger} [options.maxTerms=1000000] - maximum number of terms to be added
				* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
				* @param {number} [options.initialValue=0] - initial value of the resulting sum
				* @returns {number} sum of all series terms
				*
				* @example
				* var gen = geometricSeriesClosure( 0.9 )
				* var out = sumSeries( gen );
				* // returns 10.0
				*
				* function geometricSeriesClosure( x ) {
				*     var exponent = -1;
				*     return function() {
				*         exponent += 1;
				*         return Math.pow( x, exponent );
				*     };
				* }
				*/
				function sumSeries( generator, options ) {
					var tolerance;
					var nextTerm;
					var counter;
					var result;
					var opts;

					opts = {};

					if ( arguments.length > 1 ) {
						opts = options;
					}
					tolerance = opts.tolerance || EPS;
					counter = opts.maxTerms || MAX_TERMS;
					result = opts.initialValue || 0;

					// Repeatedly call function...
					do {
						nextTerm = generator();
						result += nextTerm;
					}
					while ( ( abs(tolerance * result) < abs(nextTerm) ) && --counter ); // eslint-disable-line no-plusplus

					return result;
				}


				// EXPORTS //

				module.exports = sumSeries;
			},
			"generators.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var abs = require( '@stdlib/math-base-special-abs' );
				var EPS = require( '@stdlib/constants-float64-eps' );


				// VARIABLES //

				var MAX_TERMS = 1000000;


				// MAIN //

				/**
				* Sum the elements of the series given by the supplied function.
				*
				* @param {Function} generator - series function
				* @param {Object} [options] - function options
				* @param {PositiveInteger} [options.maxTerms=1000000] - maximum number of terms to be added
				* @param {PositiveNumber} [options.tolerance=2.22e-16] - further terms are only added as long as the next term is greater than current term times the tolerance
				* @param {number} [options.initialValue=0] - initial value of the resulting sum
				* @returns {number} sum of all series terms
				*
				* @example
				* var gen = geometricSeriesGenerator( 0.9 );
				* var out = sumSeries( gen );
				* // returns 10.0
				*
				* function* geometricSeriesGenerator( x ) {
				*     var exponent = 0;
				*     while ( true ) {
				*         yield Math.pow( x, exponent );
				*         exponent += 1;
				*     }
				* }
				*/
				function sumSeries( generator, options ) {
					var isgenerator;
					var tolerance;
					var nextTerm;
					var counter;
					var result;
					var opts;

					opts = {};
					if ( arguments.length > 1 ) {
						opts = options;
					}
					tolerance = opts.tolerance || EPS;
					counter = opts.maxTerms || MAX_TERMS;
					result = opts.initialValue || 0;

					isgenerator = typeof generator.next === 'function';
					if ( isgenerator === true ) {
						// Case A: Iterate over generator object created by a generator function...
						for ( nextTerm of generator ) {
							result += nextTerm;
							if (
								abs(tolerance * result) >= abs(nextTerm) ||
								--counter === 0 // eslint-disable-line no-plusplus
							) {
								break;
							}
						}
					} else {
						// Case B: Repeatedly call function...
						do {
							nextTerm = generator();
							result += nextTerm;
						}
						while ( ( abs(tolerance * result) < abs(nextTerm) ) && --counter ); // eslint-disable-line no-plusplus
					}
					return result;
				}


				// EXPORTS //

				module.exports = sumSeries;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Sum the elements of the series given by the supplied function.
				*
				* @module @stdlib/math-base-tools-sum-series
				*
				* @example
				* var sumSeries = require( '@stdlib/math-base-tools-sum-series' );
				*
				* var gen = geometricSeriesClosure( 0.9 )
				* var out = sumSeries( gen );
				* // returns 10
				*
				* function geometricSeriesClosure( x ) {
				*     var exponent = -1;
				*     return function() {
				*         exponent += 1;
				*         return Math.pow( x, exponent );
				*     };
				* }
				*/

				// MODULES //

				var hasGeneratorSupport = require( '@stdlib/assert-has-generator-support' );
				var generator = require( './generators.js' );
				var basic = require( './basic.js' );


				// MAIN //

				var sumSeries;
				if ( hasGeneratorSupport() ) {
					sumSeries = generator;
				} else {
					sumSeries = basic;
				}


				// EXPORTS //

				module.exports = sumSeries;
			}
		}
	},
	"@stdlib/number-ctor": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Constructor which returns a `Number` object.
				*
				* @module @stdlib/number-ctor
				*
				* @example
				* var Number = require( '@stdlib/number-ctor' );
				*
				* var v = new Number( 10.0 );
				* // returns <Number>
				*/

				// MODULES //

				var Number = require( './number.js' );


				// EXPORTS //

				module.exports = Number;
			},
			"number.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// EXPORTS //

				module.exports = Number; // eslint-disable-line stdlib/require-globals
			}
		}
	},
	"@stdlib/number-float64-base-exponent": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Return an integer corresponding to the unbiased exponent of a double-precision floating-point number.
				*
				* @module @stdlib/number-float64-base-exponent
				*
				* @example
				* var exponent = require( '@stdlib/number-float64-base-exponent' );
				*
				* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
				* // returns -1019
				*
				* exp = exponent( -3.14 );
				* // returns 1
				*
				* exp = exponent( 0.0 );
				* // returns -1023
				*
				* exp = exponent( NaN );
				* // returns 1024
				*/

				// MODULES //

				var exponent = require( './main.js' );


				// EXPORTS //

				module.exports = exponent;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var getHighWord = require( '@stdlib/number-float64-base-get-high-word' );
				var EXP_MASK = require( '@stdlib/constants-float64-high-word-exponent-mask' );
				var BIAS = require( '@stdlib/constants-float64-exponent-bias' );


				// MAIN //

				/**
				* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.
				*
				* @param {number} x - input value
				* @returns {integer32} unbiased exponent
				*
				* @example
				* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307
				* // returns -1019
				*
				* @example
				* var exp = exponent( -3.14 );
				* // returns 1
				*
				* @example
				* var exp = exponent( 0.0 );
				* // returns -1023
				*
				* @example
				* var exp = exponent( NaN );
				* // returns 1024
				*/
				function exponent( x ) {
					// Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:
					var high = getHighWord( x );

					// Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:
					high = ( high & EXP_MASK ) >>> 20;

					// Remove the bias and return:
					return (high - BIAS)|0; // asm type annotation
				}


				// EXPORTS //

				module.exports = exponent;
			}
		}
	},
	"@stdlib/number-float64-base-from-words": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Create a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
				*
				* @module @stdlib/number-float64-base-from-words
				*
				* @example
				* var fromWords = require( '@stdlib/number-float64-base-from-words' );
				*
				* var v = fromWords( 1774486211, 2479577218 );
				* // returns 3.14e201
				*
				* v = fromWords( 3221823995, 1413754136 );
				* // returns -3.141592653589793
				*
				* v = fromWords( 0, 0 );
				* // returns 0.0
				*
				* v = fromWords( 2147483648, 0 );
				* // returns -0.0
				*
				* v = fromWords( 2146959360, 0 );
				* // returns NaN
				*
				* v = fromWords( 2146435072, 0 );
				* // returns Infinity
				*
				* v = fromWords( 4293918720, 0 );
				* // returns -Infinity
				*/

				// MODULES //

				var fromWords = require( './main.js' );


				// EXPORTS //

				module.exports = fromWords;
			},
			"indices.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var isLittleEndian = require( '@stdlib/assert-is-little-endian' );


				// MAIN //

				var indices;
				var HIGH;
				var LOW;

				if ( isLittleEndian === true ) {
					HIGH = 1; // second index
					LOW = 0; // first index
				} else {
					HIGH = 0; // first index
					LOW = 1; // second index
				}
				indices = {
					'HIGH': HIGH,
					'LOW': LOW
				};


				// EXPORTS //

				module.exports = indices;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var Uint32Array = require( '@stdlib/array-uint32' );
				var Float64Array = require( '@stdlib/array-float64' );
				var indices = require( './indices.js' );


				// VARIABLES //

				var FLOAT64_VIEW = new Float64Array( 1 );
				var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

				var HIGH = indices.HIGH;
				var LOW = indices.LOW;


				// MAIN //

				/**
				* Creates a double-precision floating-point number from a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
				*
				* ## Notes
				*
				* ```text
				* float64 (64 bits)
				* f := fraction (significand/mantissa) (52 bits)
				* e := exponent (11 bits)
				* s := sign bit (1 bit)
				*
				* |-------- -------- -------- -------- -------- -------- -------- --------|
				* |                                Float64                                |
				* |-------- -------- -------- -------- -------- -------- -------- --------|
				* |              Uint32               |               Uint32              |
				* |-------- -------- -------- -------- -------- -------- -------- --------|
				* ```
				*
				* If little endian (more significant bits last):
				*
				* ```text
				*                         <-- lower      higher -->
				* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
				* ```
				*
				* If big endian (more significant bits first):
				*
				* ```text
				*                         <-- higher      lower -->
				* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
				* ```
				*
				*
				* In which Uint32 should we place the higher order bits? If little endian, the second; if big endian, the first.
				*
				*
				* ## References
				*
				* -   [Open Group][1]
				*
				* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
				*
				* @param {uinteger32} high - higher order word (unsigned 32-bit integer)
				* @param {uinteger32} low - lower order word (unsigned 32-bit integer)
				* @returns {number} floating-point number
				*
				* @example
				* var v = fromWords( 1774486211, 2479577218 );
				* // returns 3.14e201
				*
				* @example
				* var v = fromWords( 3221823995, 1413754136 );
				* // returns -3.141592653589793
				*
				* @example
				* var v = fromWords( 0, 0 );
				* // returns 0.0
				*
				* @example
				* var v = fromWords( 2147483648, 0 );
				* // returns -0.0
				*
				* @example
				* var v = fromWords( 2146959360, 0 );
				* // returns NaN
				*
				* @example
				* var v = fromWords( 2146435072, 0 );
				* // returns Infinity
				*
				* @example
				* var v = fromWords( 4293918720, 0 );
				* // returns -Infinity
				*/
				function fromWords( high, low ) {
					UINT32_VIEW[ HIGH ] = high;
					UINT32_VIEW[ LOW ] = low;
					return FLOAT64_VIEW[ 0 ];
				}


				// EXPORTS //

				module.exports = fromWords;
			}
		}
	},
	"@stdlib/number-float64-base-get-high-word": {
		":mainpath:": "./lib",
		"lib": {
			"high.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var isLittleEndian = require( '@stdlib/assert-is-little-endian' );


				// MAIN //

				var HIGH;
				if ( isLittleEndian === true ) {
					HIGH = 1; // second index
				} else {
					HIGH = 0; // first index
				}


				// EXPORTS //

				module.exports = HIGH;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Return an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
				*
				* @module @stdlib/number-float64-base-get-high-word
				*
				* @example
				* var getHighWord = require( '@stdlib/number-float64-base-get-high-word' );
				*
				* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
				* // returns 1774486211
				*/

				// MODULES //

				var getHighWord = require( './main.js' );


				// EXPORTS //

				module.exports = getHighWord;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var Uint32Array = require( '@stdlib/array-uint32' );
				var Float64Array = require( '@stdlib/array-float64' );
				var HIGH = require( './high.js' );


				// VARIABLES //

				var FLOAT64_VIEW = new Float64Array( 1 );
				var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


				// MAIN //

				/**
				* Returns an unsigned 32-bit integer corresponding to the more significant 32 bits of a double-precision floating-point number.
				*
				* ## Notes
				*
				* ```text
				* float64 (64 bits)
				* f := fraction (significand/mantissa) (52 bits)
				* e := exponent (11 bits)
				* s := sign bit (1 bit)
				*
				* |-------- -------- -------- -------- -------- -------- -------- --------|
				* |                                Float64                                |
				* |-------- -------- -------- -------- -------- -------- -------- --------|
				* |              Uint32               |               Uint32              |
				* |-------- -------- -------- -------- -------- -------- -------- --------|
				* ```
				*
				* If little endian (more significant bits last):
				*
				* ```text
				*                         <-- lower      higher -->
				* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
				* ```
				*
				* If big endian (more significant bits first):
				*
				* ```text
				*                         <-- higher      lower -->
				* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
				* ```
				*
				* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
				*
				*
				* ## References
				*
				* -   [Open Group][1]
				*
				* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
				*
				* @param {number} x - input value
				* @returns {uinteger32} higher order word
				*
				* @example
				* var w = getHighWord( 3.14e201 ); // => 01101001110001001000001011000011
				* // returns 1774486211
				*/
				function getHighWord( x ) {
					FLOAT64_VIEW[ 0 ] = x;
					return UINT32_VIEW[ HIGH ];
				}


				// EXPORTS //

				module.exports = getHighWord;
			}
		}
	},
	"@stdlib/number-float64-base-get-low-word": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Return an unsigned 32-bit integer corresponding to the less significant 32 bits of a double-precision floating-point number.
				*
				* @module @stdlib/number-float64-base-get-low-word
				*
				* @example
				* var getLowWord = require( '@stdlib/number-float64-base-get-low-word' );
				*
				* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
				* // returns 2479577218
				*/

				// MODULES //

				var getLowWord = require( './main.js' );


				// EXPORTS //

				module.exports = getLowWord;
			},
			"low.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var isLittleEndian = require( '@stdlib/assert-is-little-endian' );


				// MAIN //

				var LOW;
				if ( isLittleEndian === true ) {
					LOW = 0; // first index
				} else {
					LOW = 1; // second index
				}


				// EXPORTS //

				module.exports = LOW;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var Uint32Array = require( '@stdlib/array-uint32' );
				var Float64Array = require( '@stdlib/array-float64' );
				var LOW = require( './low.js' );


				// VARIABLES //

				var FLOAT64_VIEW = new Float64Array( 1 );
				var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


				// MAIN //

				/**
				* Returns a 32-bit unsigned integer corresponding to the less significant 32 bits of a double-precision floating-point number.
				*
				* ## Notes
				*
				* ```text
				* float64 (64 bits)
				* f := fraction (significand/mantissa) (52 bits)
				* e := exponent (11 bits)
				* s := sign bit (1 bit)
				*
				* |-------- -------- -------- -------- -------- -------- -------- --------|
				* |                                Float64                                |
				* |-------- -------- -------- -------- -------- -------- -------- --------|
				* |              Uint32               |               Uint32              |
				* |-------- -------- -------- -------- -------- -------- -------- --------|
				* ```
				*
				* If little endian (more significant bits last):
				*
				* ```text
				*                         <-- lower      higher -->
				* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
				* ```
				*
				* If big endian (more significant bits first):
				*
				* ```text
				*                         <-- higher      lower -->
				* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
				* ```
				*
				* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
				*
				*
				* ## References
				*
				* -   [Open Group][1]
				*
				* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
				*
				* @param {number} x - input value
				* @returns {uinteger32} lower order word
				*
				* @example
				* var w = getLowWord( 3.14e201 ); // => 10010011110010110101100010000010
				* // returns 2479577218
				*/
				function getLowWord( x ) {
					FLOAT64_VIEW[ 0 ] = x;
					return UINT32_VIEW[ LOW ];
				}


				// EXPORTS //

				module.exports = getLowWord;
			}
		}
	},
	"@stdlib/number-float64-base-normalize": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Return a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
				*
				* @module @stdlib/number-float64-base-normalize
				*
				* @example
				* var normalize = require( '@stdlib/number-float64-base-normalize' );
				* var pow = require( '@stdlib/math-base-special-pow' );
				*
				* var out = normalize( 3.14e-319 );
				* // returns [ 1.4141234400356668e-303, -52 ]
				*
				* var y = out[ 0 ];
				* var exp = out[ 1 ];
				*
				* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
				* // returns true
				*
				* @example
				* var Float64Array = require( '@stdlib/array-float64' );
				* var normalize = require( '@stdlib/number-float64-base-normalize' );
				*
				* var out = new Float64Array( 2 );
				*
				* var v = normalize( out, 3.14e-319 );
				* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]
				*
				* var bool = ( v === out );
				* // returns true
				*/

				// MODULES //

				var normalize = require( './main.js' );


				// EXPORTS //

				module.exports = normalize;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var fcn = require( './normalize.js' );


				// MAIN //

				/**
				* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
				*
				* @param {(Array|TypedArray|Object)} [out] - output array
				* @param {number} x - input value
				* @returns {(Array|TypedArray|Object)} output array
				*
				* @example
				* var pow = require( '@stdlib/math-base-special-pow' );
				*
				* var out = normalize( [ 0.0, 0 ], 3.14e-319 );
				* // returns [ 1.4141234400356668e-303, -52 ]
				*
				* var y = out[ 0 ];
				* var exp = out[ 1 ];
				*
				* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
				* // returns true
				*
				* @example
				* var Float64Array = require( '@stdlib/array-float64' );
				* var pow = require( '@stdlib/math-base-special-pow' );
				*
				* var out = new Float64Array( 2 );
				*
				* var v = normalize( out, 3.14e-319 );
				* // returns <Float64Array>[ 1.4141234400356668e-303, -52 ]
				*
				* var bool = ( v === out );
				* // returns true
				*
				* @example
				* var out = normalize( [ 0.0, 0 ], 0.0 );
				* // returns [ 0.0, 0 ]
				*
				* @example
				* var out = normalize( [ 0.0, 0 ], Infinity );
				* // returns [ Infinity, 0 ]
				*
				* @example
				* var out = normalize( [ 0.0, 0 ], -Infinity );
				* // returns [ -Infinity, 0 ]
				*
				* @example
				* var out = normalize( [ 0.0, 0 ], NaN );
				* // returns [ NaN, 0 ]
				*/
				function normalize( out, x ) {
					if ( arguments.length === 1 ) {
						return fcn( [ 0.0, 0 ], out );
					}
					return fcn( out, x );
				}


				// EXPORTS //

				module.exports = normalize;
			},
			"normalize.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var FLOAT64_SMALLEST_NORMAL = require( '@stdlib/constants-float64-smallest-normal' );
				var isInfinite = require( '@stdlib/math-base-assert-is-infinite' );
				var isnan = require( '@stdlib/math-base-assert-is-nan' );
				var abs = require( '@stdlib/math-base-special-abs' );


				// VARIABLES //

				// (1<<52)
				var SCALAR = 4503599627370496;


				// MAIN //

				/**
				* Returns a normal number `y` and exponent `exp` satisfying \\(x = y \cdot 2^\mathrm{exp}\\).
				*
				* @private
				* @param {(Array|TypedArray|Object)} out - output array
				* @param {number} x - input value
				* @returns {(Array|TypedArray|Object)} output array
				*
				* @example
				* var pow = require( '@stdlib/math-base-special-pow' );
				*
				* var out = normalize( [ 0.0, 0 ], 3.14e-319 );
				* // returns [ 1.4141234400356668e-303, -52 ]
				*
				* var y = out[ 0 ];
				* var exp = out[ 1 ];
				*
				* var bool = ( y*pow(2.0,exp) === 3.14e-319 );
				* // returns true
				*
				* @example
				* var out = normalize( [ 0.0, 0 ], 0.0 );
				* // returns [ 0.0, 0 ];
				*
				* @example
				* var out = normalize( [ 0.0, 0 ], Infinity );
				* // returns [ Infinity, 0 ]
				*
				* @example
				* var out = normalize( [ 0.0, 0 ], -Infinity );
				* // returns [ -Infinity, 0 ]
				*
				* @example
				* var out = normalize( [ 0.0, 0 ], NaN );
				* // returns [ NaN, 0 ]
				*/
				function normalize( out, x ) {
					if ( isnan( x ) || isInfinite( x ) ) {
						out[ 0 ] = x;
						out[ 1 ] = 0;
						return out;
					}
					if ( x !== 0.0 && abs( x ) < FLOAT64_SMALLEST_NORMAL ) {
						out[ 0 ] = x * SCALAR;
						out[ 1 ] = -52;
						return out;
					}
					out[ 0 ] = x;
					out[ 1 ] = 0;
					return out;
				}


				// EXPORTS //

				module.exports = normalize;
			}
		}
	},
	"@stdlib/number-float64-base-set-high-word": {
		":mainpath:": "./lib",
		"lib": {
			"high.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var isLittleEndian = require( '@stdlib/assert-is-little-endian' );


				// MAIN //

				var HIGH;
				if ( isLittleEndian === true ) {
					HIGH = 1; // second index
				} else {
					HIGH = 0; // first index
				}


				// EXPORTS //

				module.exports = HIGH;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Set the more significant 32 bits of a double-precision floating-point number.
				*
				* @module @stdlib/number-float64-base-set-high-word
				*
				* @example
				* var setHighWord = require( '@stdlib/number-float64-base-set-high-word' );
				*
				* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101
				*
				* var y = setHighWord( 3.14e201, high ); // => 0 00000000000 0000000000000000010110010011110010110101100010000010
				* // returns 1.18350528745e-313
				*
				* @example
				* var setHighWord = require( '@stdlib/number-float64-base-set-high-word' );
				* var PINF = require( '@stdlib/constants-float64-pinf' ); //  => 0 11111111111 00000000000000000000 00000000000000000000000000000000
				*
				* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000
				*
				* // Set the higher order bits of `+infinity` to return `1`:
				* var y = setHighWord( PINF, high ); => 0 01111111111 0000000000000000000000000000000000000000000000000000
				* // returns 1.0
				*/

				// MODULES //

				var setHighWord = require( './main.js' );


				// EXPORTS //

				module.exports = setHighWord;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var Uint32Array = require( '@stdlib/array-uint32' );
				var Float64Array = require( '@stdlib/array-float64' );
				var HIGH = require( './high.js' );


				// VARIABLES //

				var FLOAT64_VIEW = new Float64Array( 1 );
				var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


				// MAIN //

				/**
				* Sets the more significant 32 bits of a double-precision floating-point number.
				*
				* ## Notes
				*
				* ```text
				* float64 (64 bits)
				* f := fraction (significand/mantissa) (52 bits)
				* e := exponent (11 bits)
				* s := sign bit (1 bit)
				*
				* |-------- -------- -------- -------- -------- -------- -------- --------|
				* |                                Float64                                |
				* |-------- -------- -------- -------- -------- -------- -------- --------|
				* |              Uint32               |               Uint32              |
				* |-------- -------- -------- -------- -------- -------- -------- --------|
				* ```
				*
				* If little endian (more significant bits last):
				*
				* ```text
				*                         <-- lower      higher -->
				* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
				* ```
				*
				* If big endian (more significant bits first):
				*
				* ```text
				*                         <-- higher      lower -->
				* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
				* ```
				*
				* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
				*
				*
				* ## References
				*
				* -   [Open Group][1]
				*
				* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
				*
				* @param {number} x - double
				* @param {uinteger32} high - unsigned 32-bit integer to replace the higher order word of `x`
				* @returns {number} double having the same lower order word as `x`
				*
				* @example
				* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101
				*
				* var y = setHighWord( 3.14e201, high ); //  => 0 00000000000 0000000000000000010110010011110010110101100010000010
				* // returns 1.18350528745e-313
				*
				* @example
				* var PINF = require( '@stdlib/constants-float64-pinf' ); // => 0 11111111111 00000000000000000000 00000000000000000000000000000000
				*
				* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000
				*
				* // Set the higher order bits of `+infinity` to return `1`:
				* var y = setHighWord( PINF, high ); // => 0 01111111111 0000000000000000000000000000000000000000000000000000
				* // returns 1.0
				*/
				function setHighWord( x, high ) {
					FLOAT64_VIEW[ 0 ] = x;
					UINT32_VIEW[ HIGH ] = ( high >>> 0 ); // identity bit shift to ensure integer
					return FLOAT64_VIEW[ 0 ];
				}


				// EXPORTS //

				module.exports = setHighWord;
			}
		}
	},
	"@stdlib/number-float64-base-set-low-word": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Set the less significant 32 bits of a double-precision floating-point number.
				*
				* @module @stdlib/number-float64-base-set-low-word
				*
				* @example
				* var setLowWord = require( '@stdlib/number-float64-base-set-low-word' );
				*
				* var low = 5 >>> 0; // => 00000000000000000000000000000101
				*
				* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010
				*
				* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101
				* // returns 3.139998651394392e+201
				*
				* @example
				* var setLowWord = require( '@stdlib/number-float64-base-set-low-word' );
				* var PINF = require( '@stdlib/constants-float64-pinf' );
				* var NINF = require( '@stdlib/constants-float64-ninf' );
				*
				* var low = 12345678;
				*
				* var y = setLowWord( PINF, low );
				* // returns NaN
				*
				* y = setLowWord( NINF, low );
				* // returns NaN
				*
				* y = setLowWord( NaN, low );
				* // returns NaN
				*/

				// MODULES //

				var setLowWord = require( './main.js' );


				// EXPORTS //

				module.exports = setLowWord;
			},
			"low.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var isLittleEndian = require( '@stdlib/assert-is-little-endian' );


				// MAIN //

				var LOW;
				if ( isLittleEndian === true ) {
					LOW = 0; // first index
				} else {
					LOW = 1; // second index
				}


				// EXPORTS //

				module.exports = LOW;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var Uint32Array = require( '@stdlib/array-uint32' );
				var Float64Array = require( '@stdlib/array-float64' );
				var LOW = require( './low.js' );


				// VARIABLES //

				var FLOAT64_VIEW = new Float64Array( 1 );
				var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );


				// MAIN //

				/**
				* Sets the less significant 32 bits of a double-precision floating-point number.
				*
				* ## Notes
				*
				* ```text
				* float64 (64 bits)
				* f := fraction (significand/mantissa) (52 bits)
				* e := exponent (11 bits)
				* s := sign bit (1 bit)
				*
				* |-------- -------- -------- -------- -------- -------- -------- --------|
				* |                                Float64                                |
				* |-------- -------- -------- -------- -------- -------- -------- --------|
				* |              Uint32               |               Uint32              |
				* |-------- -------- -------- -------- -------- -------- -------- --------|
				* ```
				*
				* If little endian (more significant bits last):
				*
				* ```text
				*                         <-- lower      higher -->
				* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
				* ```
				*
				* If big endian (more significant bits first):
				*
				* ```text
				*                         <-- higher      lower -->
				* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
				* ```
				*
				* In which Uint32 can we find the lower order bits? If little endian, the first; if big endian, the second.
				*
				*
				* ## References
				*
				* -   [Open Group][1]
				*
				* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
				*
				* @param {number} x - double
				* @param {uinteger32} low - unsigned 32-bit integer to replace the lower order word of `x`
				* @returns {number} double having the same higher order word as `x`
				*
				* @example
				* var low = 5 >>> 0; // => 00000000000000000000000000000101
				*
				* var x = 3.14e201; // => 0 11010011100 01001000001011000011 10010011110010110101100010000010
				*
				* var y = setLowWord( x, low ); // => 0 11010011100 01001000001011000011 00000000000000000000000000000101
				* // returns 3.139998651394392e+201
				*
				* @example
				* var PINF = require( '@stdlib/constants-float64-pinf' );
				* var NINF = require( '@stdlib/constants-float64-ninf' );
				*
				* var low = 12345678;
				*
				* var y = setLowWord( PINF, low );
				* // returns NaN
				*
				* y = setLowWord( NINF, low );
				* // returns NaN
				*
				* y = setLowWord( NaN, low );
				* // returns NaN
				*/
				function setLowWord( x, low ) {
					FLOAT64_VIEW[ 0 ] = x;
					UINT32_VIEW[ LOW ] = ( low >>> 0 ); // identity bit shift to ensure integer
					return FLOAT64_VIEW[ 0 ];
				}


				// EXPORTS //

				module.exports = setLowWord;
			}
		}
	},
	"@stdlib/number-float64-base-to-words": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Split a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
				*
				* @module @stdlib/number-float64-base-to-words
				*
				* @example
				* var toWords = require( '@stdlib/number-float64-base-to-words' );
				*
				* var w = toWords( 3.14e201 );
				* // returns [ 1774486211, 2479577218 ]
				*
				* @example
				* var Uint32Array = require( '@stdlib/array-uint32' );
				* var toWords = require( '@stdlib/number-float64-base-to-words' );
				*
				* var out = new Uint32Array( 2 );
				*
				* var w = toWords( out, 3.14e201 );
				* // returns <Uint32Array>[ 1774486211, 2479577218 ]
				*
				* var bool = ( w === out );
				* // returns true
				*/

				// MODULES //

				var toWords = require( './main.js' );


				// EXPORTS //

				module.exports = toWords;
			},
			"indices.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var isLittleEndian = require( '@stdlib/assert-is-little-endian' );


				// MAIN //

				var indices;
				var HIGH;
				var LOW;

				if ( isLittleEndian === true ) {
					HIGH = 1; // second index
					LOW = 0; // first index
				} else {
					HIGH = 0; // first index
					LOW = 1; // second index
				}
				indices = {
					'HIGH': HIGH,
					'LOW': LOW
				};


				// EXPORTS //

				module.exports = indices;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var fcn = require( './to_words.js' );


				// MAIN //

				/**
				* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
				*
				* @param {(Array|TypedArray|Object)} [out] - output array
				* @param {number} x - input value
				* @returns {(Array|TypedArray|Object)} output array
				*
				* @example
				* var w = toWords( 3.14e201 );
				* // returns [ 1774486211, 2479577218 ]
				*
				* @example
				* var Uint32Array = require( '@stdlib/array-uint32' );
				*
				* var out = new Uint32Array( 2 );
				*
				* var w = toWords( out, 3.14e201 );
				* // returns <Uint32Array>[ 1774486211, 2479577218 ]
				*
				* var bool = ( w === out );
				* // returns true
				*/
				function toWords( out, x ) {
					if ( arguments.length === 1 ) {
						return fcn( [ 0, 0 ], out );
					}
					return fcn( out, x );
				}


				// EXPORTS //

				module.exports = toWords;
			},
			"to_words.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var Uint32Array = require( '@stdlib/array-uint32' );
				var Float64Array = require( '@stdlib/array-float64' );
				var indices = require( './indices.js' );


				// VARIABLES //

				var FLOAT64_VIEW = new Float64Array( 1 );
				var UINT32_VIEW = new Uint32Array( FLOAT64_VIEW.buffer );

				var HIGH = indices.HIGH;
				var LOW = indices.LOW;


				// MAIN //

				/**
				* Splits a double-precision floating-point number into a higher order word (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).
				*
				* ## Notes
				*
				* ```text
				* float64 (64 bits)
				* f := fraction (significand/mantissa) (52 bits)
				* e := exponent (11 bits)
				* s := sign bit (1 bit)
				*
				* |-------- -------- -------- -------- -------- -------- -------- --------|
				* |                                Float64                                |
				* |-------- -------- -------- -------- -------- -------- -------- --------|
				* |              Uint32               |               Uint32              |
				* |-------- -------- -------- -------- -------- -------- -------- --------|
				* ```
				*
				* If little endian (more significant bits last):
				*
				* ```text
				*                         <-- lower      higher -->
				* |   f7       f6       f5       f4       f3       f2    e2 | f1 |s|  e1  |
				* ```
				*
				* If big endian (more significant bits first):
				*
				* ```text
				*                         <-- higher      lower -->
				* |s| e1    e2 | f1     f2       f3       f4       f5        f6      f7   |
				* ```
				*
				* In which Uint32 can we find the higher order bits? If little endian, the second; if big endian, the first.
				*
				*
				* ## References
				*
				* -   [Open Group][1]
				*
				* [1]: http://pubs.opengroup.org/onlinepubs/9629399/chap14.htm
				*
				*
				* @private
				* @param {(Array|TypedArray|Object)} out - output array
				* @param {number} x - input value
				* @returns {(Array|TypedArray|Object)} output array
				*
				* @example
				* var Uint32Array = require( '@stdlib/array-uint32' );
				*
				* var out = new Uint32Array( 2 );
				*
				* var w = toWords( out, 3.14e201 );
				* // returns <Uint32Array>[ 1774486211, 2479577218 ]
				*
				* var bool = ( w === out );
				* // returns true
				*/
				function toWords( out, x ) {
					FLOAT64_VIEW[ 0 ] = x;
					out[ 0 ] = UINT32_VIEW[ HIGH ];
					out[ 1 ] = UINT32_VIEW[ LOW ];
					return out;
				}


				// EXPORTS //

				module.exports = toWords;
			}
		}
	},
	"@stdlib/number-uint32-base-to-int32": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Convert an unsigned 32-bit integer to a signed 32-bit integer.
				*
				* @module @stdlib/number-uint32-base-to-int32
				*
				* @example
				* var float64ToUint32 = require( '@stdlib/number-float64-base-to-uint32' );
				* var uint32ToInt32 = require( '@stdlib/number-uint32-base-to-int32' );
				*
				* var y = uint32ToInt32( float64ToUint32( 4294967295 ) );
				* // returns -1
				*
				* y = uint32ToInt32( float64ToUint32( 3 ) );
				* // returns 3
				*/

				// MODULES //

				var uint32ToInt32 = require( './main.js' );


				// EXPORTS //

				module.exports = uint32ToInt32;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MAIN //

				/**
				* Converts an unsigned 32-bit integer to a signed 32-bit integer.
				*
				* @param {uinteger32} x - unsigned 32-bit integer
				* @returns {integer32} signed 32-bit integer
				*
				* @example
				* var float64ToUint32 = require( '@stdlib/number-float64-base-to-uint32' );
				* var y = uint32ToInt32( float64ToUint32( 4294967295 ) );
				* // returns -1
				*
				* @example
				* var float64ToUint32 = require( '@stdlib/number-float64-base-to-uint32' );
				* var y = uint32ToInt32( float64ToUint32( 3 ) );
				* // returns 3
				*/
				function uint32ToInt32( x ) {
					// NOTE: we could also use typed-arrays to achieve the same end.
					return x|0; // asm type annotation
				}


				// EXPORTS //

				module.exports = uint32ToInt32;
			}
		}
	},
	"@stdlib/utils-define-nonenumerable-read-only-property": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Define a non-enumerable read-only property.
				*
				* @module @stdlib/utils-define-nonenumerable-read-only-property
				*
				* @example
				* var setNonEnumerableReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );
				*
				* var obj = {};
				*
				* setNonEnumerableReadOnly( obj, 'foo', 'bar' );
				*
				* try {
				*     obj.foo = 'boop';
				* } catch ( err ) {
				*     console.error( err.message );
				* }
				*/

				// MODULES //

				var setNonEnumerableReadOnly = require( './main.js' );


				// EXPORTS //

				module.exports = setNonEnumerableReadOnly;
			},
			"main.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var defineProperty = require( '@stdlib/utils-define-property' );


				// MAIN //

				/**
				* Defines a non-enumerable read-only property.
				*
				* @param {Object} obj - object on which to define the property
				* @param {(string|symbol)} prop - property name
				* @param {*} value - value to set
				*
				* @example
				* var obj = {};
				*
				* setNonEnumerableReadOnly( obj, 'foo', 'bar' );
				*
				* try {
				*     obj.foo = 'boop';
				* } catch ( err ) {
				*     console.error( err.message );
				* }
				*/
				function setNonEnumerableReadOnly( obj, prop, value ) {
					defineProperty( obj, prop, {
						'configurable': false,
						'enumerable': false,
						'writable': false,
						'value': value
					});
				}


				// EXPORTS //

				module.exports = setNonEnumerableReadOnly;
			}
		}
	},
	"@stdlib/utils-define-property": {
		":mainpath:": "./lib",
		"lib": {
			"builtin.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MAIN //

				/**
				* Defines (or modifies) an object property.
				*
				* ## Notes
				*
				* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.
				*
				* @name defineProperty
				* @type {Function}
				* @param {Object} obj - object on which to define the property
				* @param {(string|symbol)} prop - property name
				* @param {Object} descriptor - property descriptor
				* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object
				* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties
				* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator
				* @param {*} [descriptor.value] - property value
				* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.
				* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.
				* @throws {TypeError} first argument must be an object
				* @throws {TypeError} third argument must be an object
				* @throws {Error} property descriptor cannot have both a value and a setter and/or getter
				* @returns {Object} object with added property
				*
				* @example
				* var obj = {};
				*
				* defineProperty( obj, 'foo', {
				*     'value': 'bar'
				* });
				*
				* var str = obj.foo;
				* // returns 'bar'
				*/
				var defineProperty = Object.defineProperty;


				// EXPORTS //

				module.exports = defineProperty;
			},
			"define_property.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2021 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MAIN //

				var main = ( typeof Object.defineProperty === 'function' ) ? Object.defineProperty : null;


				// EXPORTS //

				module.exports = main;
			},
			"has_define_property_support.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2021 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var defineProperty = require( './define_property.js' );


				// MAIN //

				/**
				* Tests for `Object.defineProperty` support.
				*
				* @private
				* @returns {boolean} boolean indicating if an environment has `Object.defineProperty` support
				*
				* @example
				* var bool = hasDefinePropertySupport();
				* // returns <boolean>
				*/
				function hasDefinePropertySupport() {
					// Test basic support...
					try {
						defineProperty( {}, 'x', {} );
						return true;
					} catch ( err ) { // eslint-disable-line no-unused-vars
						return false;
					}
				}


				// EXPORTS //

				module.exports = hasDefinePropertySupport;
			},
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Define (or modify) an object property.
				*
				* @module @stdlib/utils-define-property
				*
				* @example
				* var defineProperty = require( '@stdlib/utils-define-property' );
				*
				* var obj = {};
				* defineProperty( obj, 'foo', {
				*     'value': 'bar',
				*     'writable': false,
				*     'configurable': false,
				*     'enumerable': false
				* });
				* obj.foo = 'boop'; // => throws
				*/

				// MODULES //

				var hasDefinePropertySupport = require( './has_define_property_support.js' );
				var builtin = require( './builtin.js' );
				var polyfill = require( './polyfill.js' );


				// MAIN //

				var defineProperty;
				if ( hasDefinePropertySupport() ) {
					defineProperty = builtin;
				} else {
					defineProperty = polyfill;
				}


				// EXPORTS //

				module.exports = defineProperty;
			},
			"polyfill.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				/* eslint-disable no-underscore-dangle, no-proto */

				'use strict';

				// VARIABLES //

				var objectProtoype = Object.prototype;
				var toStr = objectProtoype.toString;
				var defineGetter = objectProtoype.__defineGetter__;
				var defineSetter = objectProtoype.__defineSetter__;
				var lookupGetter = objectProtoype.__lookupGetter__;
				var lookupSetter = objectProtoype.__lookupSetter__;


				// MAIN //

				/**
				* Defines (or modifies) an object property.
				*
				* ## Notes
				*
				* -   Property descriptors come in two flavors: **data descriptors** and **accessor descriptors**. A data descriptor is a property that has a value, which may or may not be writable. An accessor descriptor is a property described by a getter-setter function pair. A descriptor must be one of these two flavors and cannot be both.
				*
				* @param {Object} obj - object on which to define the property
				* @param {string} prop - property name
				* @param {Object} descriptor - property descriptor
				* @param {boolean} [descriptor.configurable=false] - boolean indicating if property descriptor can be changed and if the property can be deleted from the provided object
				* @param {boolean} [descriptor.enumerable=false] - boolean indicating if the property shows up when enumerating object properties
				* @param {boolean} [descriptor.writable=false] - boolean indicating if the value associated with the property can be changed with an assignment operator
				* @param {*} [descriptor.value] - property value
				* @param {(Function|void)} [descriptor.get=undefined] - function which serves as a getter for the property, or, if no getter, undefined. When the property is accessed, a getter function is called without arguments and with the `this` context set to the object through which the property is accessed (which may not be the object on which the property is defined due to inheritance). The return value will be used as the property value.
				* @param {(Function|void)} [descriptor.set=undefined] - function which serves as a setter for the property, or, if no setter, undefined. When assigning a property value, a setter function is called with one argument (the value being assigned to the property) and with the `this` context set to the object through which the property is assigned.
				* @throws {TypeError} first argument must be an object
				* @throws {TypeError} third argument must be an object
				* @throws {Error} property descriptor cannot have both a value and a setter and/or getter
				* @returns {Object} object with added property
				*
				* @example
				* var obj = {};
				*
				* defineProperty( obj, 'foo', {
				*     'value': 'bar'
				* });
				*
				* var str = obj.foo;
				* // returns 'bar'
				*/
				function defineProperty( obj, prop, descriptor ) {
					var prototype;
					var hasValue;
					var hasGet;
					var hasSet;

					if ( typeof obj !== 'object' || obj === null || toStr.call( obj ) === '[object Array]' ) {
						throw new TypeError( 'invalid argument. First argument must be an object. Value: `' + obj + '`.' );
					}
					if ( typeof descriptor !== 'object' || descriptor === null || toStr.call( descriptor ) === '[object Array]' ) {
						throw new TypeError( 'invalid argument. Property descriptor must be an object. Value: `' + descriptor + '`.' );
					}
					hasValue = ( 'value' in descriptor );
					if ( hasValue ) {
						if (
							lookupGetter.call( obj, prop ) ||
							lookupSetter.call( obj, prop )
						) {
							// Override `__proto__` to avoid touching inherited accessors:
							prototype = obj.__proto__;
							obj.__proto__ = objectProtoype;

							// Delete property as existing getters/setters prevent assigning value to specified property:
							delete obj[ prop ];
							obj[ prop ] = descriptor.value;

							// Restore original prototype:
							obj.__proto__ = prototype;
						} else {
							obj[ prop ] = descriptor.value;
						}
					}
					hasGet = ( 'get' in descriptor );
					hasSet = ( 'set' in descriptor );

					if ( hasValue && ( hasGet || hasSet ) ) {
						throw new Error( 'invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.' );
					}

					if ( hasGet && defineGetter ) {
						defineGetter.call( obj, prop, descriptor.get );
					}
					if ( hasSet && defineSetter ) {
						defineSetter.call( obj, prop, descriptor.set );
					}
					return obj;
				}


				// EXPORTS //

				module.exports = defineProperty;
			}
		}
	},
	"@stdlib/utils-eval": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Alias for `eval` global.
				*
				* @module @stdlib/utils-eval
				*
				* @example
				* var evil = require( '@stdlib/utils-eval' );
				*
				* var v = evil( '5*4*3*2*1' );
				* // returns 120
				*/

				// MODULES //

				var evil = eval; // eslint-disable-line no-eval


				// EXPORTS //

				module.exports = evil;
			}
		}
	},
	"@stdlib/utils-native-class": {
		":mainpath:": "./lib",
		"lib": {
			"index.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				/**
				* Return a string value indicating a specification defined classification of an object.
				*
				* @module @stdlib/utils-native-class
				*
				* @example
				* var nativeClass = require( '@stdlib/utils-native-class' );
				*
				* var str = nativeClass( 'a' );
				* // returns '[object String]'
				*
				* str = nativeClass( 5 );
				* // returns '[object Number]'
				*
				* function Beep() {
				*     return this;
				* }
				* str = nativeClass( new Beep() );
				* // returns '[object Object]'
				*/

				// MODULES //

				var hasToStringTag = require( '@stdlib/assert-has-tostringtag-support' );
				var builtin = require( './native_class.js' );
				var polyfill = require( './polyfill.js' );


				// MAIN //

				var nativeClass;
				if ( hasToStringTag() ) {
					nativeClass = polyfill;
				} else {
					nativeClass = builtin;
				}


				// EXPORTS //

				module.exports = nativeClass;
			},
			"native_class.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var toStr = require( './tostring.js' );


				// MAIN //

				/**
				* Returns a string value indicating a specification defined classification (via the internal property `[[Class]]`) of an object.
				*
				* @param {*} v - input value
				* @returns {string} string value indicating a specification defined classification of the input value
				*
				* @example
				* var str = nativeClass( 'a' );
				* // returns '[object String]'
				*
				* @example
				* var str = nativeClass( 5 );
				* // returns '[object Number]'
				*
				* @example
				* function Beep() {
				*     return this;
				* }
				* var str = nativeClass( new Beep() );
				* // returns '[object Object]'
				*/
				function nativeClass( v ) {
					return toStr.call( v );
				}


				// EXPORTS //

				module.exports = nativeClass;
			},
			"polyfill.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MODULES //

				var hasOwnProp = require( '@stdlib/assert-has-own-property' );
				var toStringTag = require( './tostringtag.js' );
				var toStr = require( './tostring.js' );


				// MAIN //

				/**
				* Returns a string value indicating a specification defined classification of an object in environments supporting `Symbol.toStringTag`.
				*
				* @param {*} v - input value
				* @returns {string} string value indicating a specification defined classification of the input value
				*
				* @example
				* var str = nativeClass( 'a' );
				* // returns '[object String]'
				*
				* @example
				* var str = nativeClass( 5 );
				* // returns '[object Number]'
				*
				* @example
				* function Beep() {
				*     return this;
				* }
				* var str = nativeClass( new Beep() );
				* // returns '[object Object]'
				*/
				function nativeClass( v ) {
					var isOwn;
					var tag;
					var out;

					if ( v === null || v === void 0 ) {
						return toStr.call( v );
					}
					tag = v[ toStringTag ];
					isOwn = hasOwnProp( v, toStringTag );

					// Attempt to override the `toStringTag` property. For built-ins having a `Symbol.toStringTag` property (e.g., `JSON`, `Math`, etc), the `Symbol.toStringTag` property is read-only (e.g., , so we need to wrap in a `try/catch`.
					try {
						v[ toStringTag ] = void 0;
					} catch ( err ) { // eslint-disable-line no-unused-vars
						return toStr.call( v );
					}
					out = toStr.call( v );

					if ( isOwn ) {
						v[ toStringTag ] = tag;
					} else {
						delete v[ toStringTag ];
					}
					return out;
				}


				// EXPORTS //

				module.exports = nativeClass;
			},
			"tostring.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MAIN //

				var toStr = Object.prototype.toString;


				// EXPORTS //

				module.exports = toStr;
			},
			"tostringtag.js": function (exports, module, require) {
				/**
				* @license Apache-2.0
				*
				* Copyright (c) 2018 The Stdlib Authors.
				*
				* Licensed under the Apache License, Version 2.0 (the "License");
				* you may not use this file except in compliance with the License.
				* You may obtain a copy of the License at
				*
				*    http://www.apache.org/licenses/LICENSE-2.0
				*
				* Unless required by applicable law or agreed to in writing, software
				* distributed under the License is distributed on an "AS IS" BASIS,
				* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
				* See the License for the specific language governing permissions and
				* limitations under the License.
				*/

				'use strict';

				// MAIN //

				var toStrTag = ( typeof Symbol === 'function' ) ? Symbol.toStringTag : '';


				// EXPORTS //

				module.exports = toStrTag;
			}
		}
	},
	"jerzy": {
		"jerzy.js": function (exports, module, require) {
			var vector = require('./lib/vector');
			var factor = require('./lib/factor');
			var matrix = require('./lib/matrix');
			var t = require('./lib/t');
			var misc = require('./lib/misc');
			var distributions = require('./lib/distributions');
			var regression = require('./lib/regression');
			var correlation = require('./lib/correlation');
			var numeric = require('./lib/numeric');
			var anova = require('./lib/anova');
			var normality = require('./lib/normality');
			var confidence = require('./lib/confidence');
			var power = require('./lib/power');
			var nonparametric = require('./lib/nonparametric');
			
			module.exports.Vector = vector.Vector;
			module.exports.Factor = factor.Factor;
			module.exports.Matrix = factor.Matrix;
			module.exports.Sequence = vector.Sequence;
			module.exports.StudentT = t.StudentT;
			module.exports.Misc = misc.Misc;
			module.exports.Numeric = numeric.Numeric;
			module.exports.Normal = distributions.Normal;
			module.exports.StandardNormal = distributions.StandardNormal;
			module.exports.T = distributions.T;
			module.exports.F = distributions.F;
			module.exports.Kolmogorov = distributions.Kolmogorov;
			module.exports.Regression = regression.Regression;
			module.exports.Correlation = correlation.Correlation;
			module.exports.Anova = anova.Anova;
			module.exports.Normality = normality.Normality;
			module.exports.Confidence = confidence.Confidence;
			module.exports.Power = power.Power;
			module.exports.Nonparametric = nonparametric.Nonparametric;
		},
		"lib": {
			"anova.js": function (exports, module, require) {
				var vector = require('./vector');
				var distributions = require('./distributions');

				Anova = function() {};

				/*
				 * One-way ANOVA
				 */

				Anova.oneway = function(x, y) {
					var result = {};

					var vectors = [];
					for (var i = 0; i < x.groups(); i++) {
						var v = new vector.Vector([]);
						var indices = x.group(i);
						for (var j = 0; j < indices.length; j++) {
							v.push(y.elements[indices[j]]);
						}
						vectors.push(v);
					}

					var mean = new vector.Vector([]);
					var n = new vector.Vector([]);
					var v = new vector.Vector([]);
					for (var i = 0; i < vectors.length; i++) {
						mean.push(vectors[i].mean());
						n.push(vectors[i].length());
						v.push(vectors[i].variance());
					}

					result.tdf = x.groups() - 1;
					result.tss = mean.add(-y.mean()).pow(2).multiply(n).sum();
					result.tms = result.tss / result.tdf;

					result.edf = x.length() - x.groups();
					result.ess = v.multiply(n.add(-1)).sum();
					result.ems = result.ess / result.edf;

					result.f = result.tms / result.ems;

					var fdistr = new distributions.F(result.tdf, result.edf);
					result.p = 1 - fdistr.distr(Math.abs(result.f));

					return result;
				}

				module.exports.Anova = Anova;
			},
			"confidence.js": function (exports, module, require) {
				var distributions = require('./distributions');

				Confidence = function() {};

				Confidence.normal = function(x, c) {
					var alpha = 1 - c;
					var t = new distributions.T(x.length() - 1);
					var lower = x.mean() - t.inverse(1 - alpha / 2) * x.sem();
					var upper = x.mean() + t.inverse(1 - alpha / 2) * x.sem();
					return [lower, upper];
				};

				Confidence.normalUpper = function(x, c) {
					var alpha = 1 - c;
					var t = new distributions.T(x.length() - 1);
					return(x.mean() + t.inverse(1 - alpha) * x.sem());
				};

				Confidence.normalLower = function(x, c) {
					var alpha = 1 - c;
					var t = new distributions.T(x.length() - 1);
					return(x.mean() - t.inverse(1 - alpha) * x.sem());
				};

				module.exports.Confidence = Confidence;
			},
			"correlation.js": function (exports, module, require) {
				var distributions = require('./distributions');

				Correlation = function() {};

				/*
				 * Pearson correlation
				 */

				Correlation.pearson = function(x, y) {
					var result = {};
					var n = x.length();
					var mx = x.mean();
					var my = y.mean();
					result.r = x.add(-mx).multiply(y.add(-my)).sum() /
						Math.sqrt(x.add(-mx).pow(2).sum() * y.add(-my).pow(2).sum());
					result.t = result.r * Math.sqrt((n - 2) / (1 - Math.pow(result.r, 2)));
					result.df = n - 2;
					var tdistr = new distributions.T(result.df);
					result.p = 2 * (1 - tdistr.distr(Math.abs(result.t)));
					return result;
				};

				module.exports.Correlation = Correlation;
			},
			"distributions.js": function (exports, module, require) {
				var vector = require('./vector');
				var misc = require('./misc');
				var numeric = require('./numeric');
				
				/*
				 * Normal distribution
				 */
				
				Normal = function(mean, variance) {
					this.mean = mean;
					this.variance = variance;
				};
				
				Normal.prototype._de = function(x) {
					return (1 / (Math.sqrt(this.variance) * (Math.sqrt(2 * Math.PI)))) 
						* Math.exp(-(Math.pow(x - this.mean, 2)) / (2 * this.variance))
				};
				
				Normal.prototype._di = function(x) {
					return 0.5 * (1 + misc.Misc.erf((x - this.mean) / (Math.sqrt(this.variance) * Math.sqrt(2))));
				};
				
				Normal.prototype.dens = function(arg) {
					if (arg instanceof vector.Vector) {
						result = new vector.Vector([]);
						for (var i = 0; i < arg.length(); ++i) {
							result.push(this._de(arg.elements[i]));
						}
						return result;
					} else {
						return this._de(arg);
					}
				};
				
				Normal.prototype.distr = function(arg) {
					if (arg instanceof vector.Vector) {
						result = new vector.Vector([]);
						for (var i = 0; i < arg.length(); ++i) {
							result.push(this._di(arg.elements[i]));
						}
						return result;
					} else {
						return this._di(arg);
					}
				};
				
				Normal.prototype.inverse = function(x) {
					var a1 = -3.969683028665376e+1;
					var a2 = 2.209460984245205e+2;
					var a3 = -2.759285104469687e+2;
					var a4 = 1.383577518672690e+2;
					var a5 = -3.066479806614716e+1;
					var a6 = 2.506628277459239e+0;
				
					var b1 = -5.447609879822406e+1;
					var b2 = 1.615858368580409e+2;
					var b3 = -1.556989798598866e+2;
					var b4 = 6.680131188771972e+1;
					var b5 = -1.328068155288572e+1;
				
					var c1 = -7.784894002430293e-3;
					var c2 = -3.223964580411365e-1;
					var c3 = -2.400758277161838e+0;
					var c4 = -2.549732539343734e+0;
					var c5 = 4.374664141464968e+0;
					var c6 = 2.938163982698783e+0;
				
					var d1 = 7.784695709041462e-3;
					var d2 = 3.224671290700398e-1;
					var d3 = 2.445134137142996e+0;
					var d4 = 3.754408661907416e+0;
				
					var q, r, y;
				
					if (x < 0.02425) {
						q = Math.sqrt(-2 * Math.log(x));
						y = (((((c1 * q + c2) * q + c3) * q + c4) * q + c5) * q + c6) / ((((d1 * q + d2) * q + d3) * q + d4) * q + 1);
					} else if (x < 1 - 0.02425) {
						q = x - 0.5;
						r = q * q;
						y = (((((a1 * r + a2) * r + a3) * r + a4) * r + a5) * r + a6) * q / (((((b1 * r + b2) * r + b3) * r + b4) * r + b5) * r + 1);
					} else {
						q = Math.sqrt(-2 * Math.log(1 - x));
						y = -(((((c1 * q + c2) * q + c3) * q + c4) * q + c5) * q + c6) / ((((d1 * q + d2) * q + d3) * q + d4) * q + 1);
					}
				
					return y * this.variance + this.mean;
				};
				
				/*
				 * Standard Normal distribution
				 */
				
				StandardNormal.prototype = new Normal();
				
				StandardNormal.prototype.constructor = StandardNormal;
				
				function StandardNormal() {
					this.mean = 0;
					this.variance = 1;
				};
				
				/*
				 * T distribution
				 */
				
				T = function(df) {
					this.df = df;
				};
				
				T.prototype._de = function(x) {
					return (misc.Misc.gamma((this.df + 1) / 2) / (Math.sqrt(this.df * Math.PI) * misc.Misc.gamma(this.df / 2))) 
						* Math.pow((1 + Math.pow(x, 2) / this.df), -(this.df + 1) / 2);
				};
				
				T.prototype._di = function(x) {
					if (x < 0) {
						return 0.5 * misc.Misc.rbeta(this.df / (Math.pow(x, 2) + this.df), this.df / 2, 0.5);
					} else {
						return 1 - 0.5 * misc.Misc.rbeta(this.df / (Math.pow(x, 2) + this.df), this.df / 2, 0.5);
					}
				};
				
				T.prototype.dens = function(arg) {
					if (arg instanceof vector.Vector) {
						result = new vector.Vector([]);
						for (var i = 0; i < arg.length(); ++i) {
							result.push(this._de(arg.elements[i]));
						}
						return result;
					} else {
						return this._de(arg);
					}
				};
				
				T.prototype.distr = function(arg) {
					if (arg instanceof vector.Vector) {
						result = new vector.Vector([]);
						for (var i = 0; i < arg.length(); ++i) {
							result.push(this._di(arg.elements[i]));
						}
						return result;
					} else {
						return this._di(arg);
					}
				};
				
				T.prototype.inverse = function(x) {
					return (function (o, x) {
						var t = numeric.Numeric.bisection(function(y) {
							return o._di(y) - x;
						}, -10.1, 10);
						return t;
					})(this, x);
				};
				
				/*
				 * Kolmogorov distribution
				 */
				
				Kolmogorov = function() {};
				
				Kolmogorov.prototype._di = function(x) {
					var term;
					var sum = 0;
					var k = 1;
					do {
						term = Math.exp(-Math.pow(2 * k - 1, 2) * Math.pow(Math.PI, 2) / (8 * Math.pow(x, 2)));
						sum = sum + term;
						k++;
					} while (Math.abs(term) > 0.000000000001);
					return Math.sqrt(2 * Math.PI) * sum / x;
				};
				
				Kolmogorov.prototype.distr = function(arg) {
				        if (arg instanceof vector.Vector) {
				                result = new vector.Vector([]);
				                for (var i = 0; i < arg.length(); ++i) {
				                        result.push(this._di(arg.elements[i]));
				                }
				                return result;
				        } else {
				                return this._di(arg);
				        }
				};
				
				Kolmogorov.prototype.inverse = function(x) {
					return (function (o, x) {
						var t = numeric.Numeric.bisection(function(y) {
							return o._di(y) - x;
						}, 0, 1);
						return t;
					})(this, x);
				};
				
				/*
				 * F distribution
				 */
				
				F = function(df1, df2) {
					this.df1 = df1;
					this.df2 = df2;
				};
				
				F.prototype._di = function(x) {
					return misc.Misc.rbeta((this.df1 * x) / (this.df1 * x + this.df2), this.df1 / 2, this.df2 / 2);
				};
				
				F.prototype.distr = function(arg) {
					if (arg instanceof vector.Vector) {
						result = new vector.Vector([]);
						for (var i = 0; i < arg.length(); ++i) {
							result.push(this._di(arg.elements[i]));
						}
						return result;
					} else {
						return this._di(arg);
					}
				};
				
				module.exports.Normal = Normal;
				module.exports.StandardNormal = StandardNormal;
				module.exports.T = T;
				module.exports.F = F;
				module.exports.Kolmogorov = Kolmogorov;
			},
			"factor.js": function (exports, module, require) {
				Factor = function(elements) {
					this.levels = [];
					this.factors = [];
					for (var i = 0; i < elements.length; i++) {
						if ((index = this.levels.indexOf(elements[i])) != -1) {
							this.factors.push(index);
						} else {
							this.factors.push(this.levels.length);
							this.levels.push(elements[i]);
						}
					}
				};

				Factor.prototype.group = function(g) {
					var indices = [];
					var i = -1;
					while ((i = this.factors.indexOf(g, i + 1)) != -1) {
						indices.push(i);
					}
					return indices;
				};

				Factor.prototype.length = function() {
					return this.factors.length;
				};

				Factor.prototype.groups = function() {
					return this.levels.length;
				};

				module.exports.Factor = Factor;
			},
			"matrix.js": function (exports, module, require) {
				Matrix = function(elements) {
					this.elements = elements;
				};

				Matrix.prototype.rows = function() {
					return this.elements.length;
				};

				Matrix.prototype.cols = function() {
					return this.elements[0].length;
				};

				Matrix.prototype.dot = function(m) {
					var result = [];
					for (var i = 0; i < this.rows(); i++) {
						result[i] = [];
						for (var j = 0; j < m.cols(); j++) {
							var sum = 0;
							for (var k = 0; k < this.cols(); k++) {
								sum += this.elements[i][k] * m.elements[k][j];
							}
							result[i][j] = sum;
						}
					}
					return new Matrix(result); 
				};

				module.exports.Matrix = Matrix;
			},
			"misc.js": function (exports, module, require) {
				var numeric = require('./numeric');
				var beta = require('@stdlib/math-base-special-beta');
				var betainc = require('@stdlib/math-base-special-betainc');

				Misc = function() {};

				/*
				 * error function
				 */

				Misc.erf = function(z) {
					var term;
					var sum = 0;
					var n = 0;
					do {
						term = Math.pow(-1, n) * Math.pow(z, 2 * n + 1) / this.fac(n) / (2 * n + 1);
						sum = sum + term;
						n++;
					} while (Math.abs(term) > 0.000000000001);
					return sum * 2 / Math.sqrt(Math.PI);
				};

				/*
				 * gamma function
				 */

				Misc.gamma = function (n) {
					var p = [
						0.99999999999980993,
						676.5203681218851,
						-1259.1392167224028,
						771.32342877765313,
						-176.61502916214059,
						12.507343278686905,
						-0.13857109526572012,
						9.9843695780195716e-6,
						1.5056327351493116e-7
					];
					var g = 7;
					if (n < 0.5) {
						return Math.PI / (Math.sin(Math.PI * n) * this.gamma(1 - n));
					}
					n -= 1;
					var a = p[0];
					var t = n + g + 0.5;
					for (var i = 1; i < p.length; i++) {
						a += p[i] / (n + i);
					}
					return Math.sqrt(2 * Math.PI) * Math.pow(t, n + 0.5) * Math.exp(-t) * a;
				};

				/*
				 * beta function
				 */

				Misc.beta = function (x, y) {
					//return this.gamma(x) * this.gamma(y) / this.gamma(x + y);
					return beta(x, y);
				};

				/*
				 * incomplete beta function
				 */

				Misc.ibeta = function (x, a, b) {
					/*
					return numeric.Numeric.adaptiveSimpson(function(y) {
						return Math.pow(y, a - 1) * Math.pow(1 - y, b - 1);
					}, 0, x, 0.000000000001, 10);
					*/
					return betainc(x, a, b, false);
				};

				/*
				 * regularized incomplete beta function
				 */


				Misc.rbeta = function (x, a, b) {
					return this.ibeta(x, a, b) / this.beta(a, b);
				};

				/*
				 * factorial
				 */

				Misc.fac = function(n) {
					var result = 1;
					for (var i = 2; i <= n; i++) {
						result = result * i;
					}
					return result;
				}

				module.exports.Misc = Misc;
			},
			"nonparametric.js": function (exports, module, require) {
				var vector = require('./vector');
				var distributions = require('./distributions');

				Nonparametric = function() {};

				/*
				 * Two-sample Kolmogorov-Smirnov test
				 */

				Nonparametric.kolmogorovSmirnov = function(x, y) {
					var all = new vector.Vector(x.elements.concat(y.elements)).sort();
					var ecdfx = x.ecdf(all);
					var ecdfy = y.ecdf(all);
					var d = ecdfy.subtract(ecdfx).abs().max();
					var n = (x.length() * y.length()) / (x.length() + y.length());
					var ks = Math.sqrt(n) * d;
					var p = 1 - new distributions.Kolmogorov().distr(ks);

					return {
						"d": d,
						"ks": ks,
						"p": p
					};
				}

				module.exports.Nonparametric = Nonparametric;
			},
			"normality.js": function (exports, module, require) {
				var matrix = require('./matrix');
				var vector = require('./vector');
				var distributions = require('./distributions');

				Normality = function() {};

				Normality.shapiroWilk = function(x) {
					result = {};
					var xx = x.sort();
					var mean = x.mean();
					var n = x.length();
					var u = 1 / Math.sqrt(n);

					// m

					var sn = new distributions.StandardNormal();
					var m = new vector.Vector([]);
					for (var i = 1; i <= n; i++) {
						m.push(sn.inverse((i - 3/8) / (n + 1/4)));
					}

					// c

					var md = m.dot(m);
					var c = m.multiply(1 / Math.sqrt(md));

					// a

					var an = -2.706056 * Math.pow(u, 5) + 4.434685 * Math.pow(u, 4) - 2.071190 * Math.pow(u, 3) - 0.147981 * Math.pow(u, 2) + 0.221157 * u + c.elements[n - 1];
					var ann = -3.582633 * Math.pow(u, 5) + 5.682633 * Math.pow(u, 4) - 1.752461 * Math.pow(u, 3) - 0.293762 * Math.pow(u, 2) + 0.042981 * u + c.elements[n - 2];

					var phi;

					if (n > 5) {
						phi = (md - 2 * Math.pow(m.elements[n - 1], 2) - 2 * Math.pow(m.elements[n - 2], 2)) / (1 - 2 * Math.pow(an, 2) - 2 * Math.pow(ann, 2));
					} else {
						phi = (md - 2 * Math.pow(m.elements[n - 1], 2)) / (1 - 2 * Math.pow(an, 2));
					}

					var a = new vector.Vector([]);
					if (n > 5) {
						a.push(-an);
						a.push(-ann);
						for (var i = 2; i < n - 2; i++) {
							a.push(m.elements[i] * Math.pow(phi, -1/2));
						}		
						a.push(ann);
						a.push(an);
					} else {
						a.push(-an);
						for (var i = 1; i < n - 1; i++) {
							a.push(m.elements[i] * Math.pow(phi, -1/2));
						}		
						a.push(an);
					}

					// w

					result.w = Math.pow(a.multiply(xx).sum(), 2) / xx.ss();

					// p

					var g, mu, sigma;

					if (n < 12) {
						var gamma = 0.459 * n - 2.273;
						g = - Math.log(gamma - Math.log(1 - result.w));
						mu = -0.0006714 * Math.pow(n, 3) + 0.025054 * Math.pow(n, 2) - 0.39978 * n + 0.5440;
						sigma = Math.exp(-0.0020322 * Math.pow(n, 3) + 0.062767 * Math.pow(n, 2) - 0.77857 * n + 1.3822);
					} else {
						var u = Math.log(n);
						g = Math.log(1 - result.w);
						mu = 0.0038915 * Math.pow(u, 3) - 0.083751 * Math.pow(u, 2) - 0.31082 * u - 1.5851;
						sigma = Math.exp(0.0030302 * Math.pow(u, 2) - 0.082676 * u - 0.4803);
					}

					var z = (g - mu) / sigma;
					var norm = new distributions.StandardNormal();
					result.p = 1 - norm.distr(z);

					return result;
				};

				module.exports.Normality = Normality;
			},
			"numeric.js": function (exports, module, require) {
				Numeric = function() {};
				
				/*
				 * adaptive Simpson
				 */
				
				Numeric._adaptive = function(f, a, b, eps, s, fa, fb, fc, depth) {
					var c = (a + b) / 2;
					var h = b - a;
					var d = (a + c) / 2;
					var e = (c + b) / 2;
					var fd = f(d);
					var fe = f(e);
					var left = (h / 12) * (fa + 4 * fd + fc);
					var right = (h / 12) * (fc + 4* fe + fb);
					var s2 = left + right;
					if (depth <= 0 || Math.abs(s2 - s) <= 15 * eps) {
						return s2 + (s2 - s) / 15;
					} else {
						return this._adaptive(f, a, c, eps / 2, left, fa, fc, fd, depth - 1)
							+ this._adaptive(f, c, b, eps / 2, right, fc, fb, fe, depth - 1);
					}
				}
				
				Numeric.adaptiveSimpson = function(f, a, b, eps, depth) {
					var c = (a + b) / 2;
					var h = b - a;
					var fa = f(a);
					var fb = f(b);
					var fc = f(c);
					var s = (h / 6) * (fa + 4 * fc + fb);                                                                
					return this._adaptive(f, a, b, eps, s, fa, fb, fc, depth);
				}
				
				/*
				 * root finding: bisection
				 */
				
				Numeric.bisection = function(f, a, b, eps) {
					eps = typeof eps !== "undefined" ? eps : 1e-9;
					while (Math.abs(a - b) > eps) {
				 		if (f(a) * f((a + b) / 2) < 0) {
				 			b = (a + b) / 2;
				 		} else {
				 			a = (a + b) / 2;
				 		}
				 	}
					return (a + b) / 2;
				}
				
				/*
				 * root finding: secant
				 */
				
				Numeric.secant = function(f, a, b, eps) {
					eps = typeof eps !== "undefined" ? eps : 1e-9;
					var q = [a, b];
					while (Math.abs(q[0] - q[1]) > eps) {
						q.push((q[0] * f(q[1]) - q[1] * f(q[0])) / (f(q[1]) - f(q[0])));
						q.shift();
					}
					return (q[0] + q[1]) / 2;
				}
				
				module.exports.Numeric = Numeric;
			},
			"power.js": function (exports, module, require) {
				var distributions = require('./distributions');

				Power = function() {};

				/*
				 * Sample size calculation
				 */

				Power.sampleSize = function(a, power, sd, effect) {
					var n = new distributions.Normal(0, 1);
					return (2 * Math.pow(n.inverse(1 - a / 2) + n.inverse(power), 2) * Math.pow(sd, 2)) / Math.pow(effect, 2);
				};

				module.exports.Power = Power;
			},
			"regression.js": function (exports, module, require) {
				var distributions = require('./distributions');
				
				Regression = function() {};
				
				/*
				 * simple linear regression
				 */
				
				Regression.linear = function(x, y) {
					var result = {};
					result.n = x.length();
				
					// means
				
					var mx = x.mean();
					var my = y.mean();
				
					// parameters
				
					var rx = x.add(-mx);
					var ry = y.add(-my);
				
					var ssxx = rx.pow(2).sum();
					var ssyy = ry.pow(2).sum();
					var ssxy = rx.multiply(ry).sum();
				
					result.slope = ssxy / ssxx;
					result.intercept = my - result.slope * mx;
				
					// sum of squared residuals
				
					var ssr = y.add(x.multiply(result.slope).add(result.intercept).multiply(-1)).pow(2).sum();
				
					// residual standard error
				
					result.rse = Math.sqrt(ssr / (result.n - 2))
					
					// slope
				
					var tdistr = new distributions.T(result.n - 2);
				
					result.slope_se = result.rse / Math.sqrt(ssxx);
					result.slope_t = result.slope / result.slope_se;
					result.slope_p = 2 * (1 - tdistr.distr(Math.abs(result.slope_t)));
				
					// intercept
				
					result.intercept_se = result.rse / Math.sqrt(ssxx) / Math.sqrt(result.n) * Math.sqrt(x.pow(2).sum());
					result.intercept_t = result.intercept / result.intercept_se;
					result.intercept_p = 2 * (1 - tdistr.distr(Math.abs(result.intercept_t)));
				
					// R-squared
					
					result.rs = Math.pow(ssxy, 2) / (ssxx * ssyy);
				
					return result;
				};
				
				module.exports.Regression = Regression;
			},
			"t.js": function (exports, module, require) {
				var vector = require('./vector');
				var distributions = require('./distributions');
				
				StudentT = function(){};
				
				StudentT.test = function(first, second) {
					if (second instanceof vector.Vector) {
						return this._twosample(first, second);
					} else {
						return this._onesample(first, second);
					}
				};
				
				/*
				 * two-sample Student's t-test
				 */
				
				StudentT._twosample = function(first, second) {
					var result = {};
					result.se = Math.sqrt((first.variance() / first.length()) + (second.variance() / second.length()));
					result.t = (first.mean() - second.mean()) / result.se;
					result.df = first.length() + second.length() - 2;
					var tdistr = new distributions.T(result.df);
					result.p = 2 * (1 - tdistr.distr(Math.abs(result.t)));
					return result;
				};
				
				/*
				 * one-sample Student's t-test
				 */
				
				StudentT._onesample = function(sample, mu) {
					var result = {};
					result.sample = sample;
					result.mu = mu;
					result.se = Math.sqrt(result.sample.variance()) / Math.sqrt(result.sample.length());
					result.t = (result.sample.mean() - result.mu) / result.se;
					result.df = result.sample.length() - 1;
					var tdistr = new distributions.T(result.df);
					result.p = 2 * (1 - tdistr.distr(Math.abs(result.t)));
					return result;
				};
				
				module.exports.StudentT = StudentT;
			},
			"vector.js": function (exports, module, require) {
				Vector = function(elements) {
					this.elements = elements;
				};
				
				Vector.prototype.push = function(value) {
					this.elements.push(value);
				};
				
				Vector.prototype.map = function(fun) {
					return new Vector(this.elements.map(fun));
				};
				
				Vector.prototype.length = function() {
					return this.elements.length;
				};
				
				Vector.prototype.concat = function(x) {
					return new Vector(this.elements.slice(0).concat(x.elements.slice(0)));
				};
				
				Vector.prototype.abs = function() {
					var values = [];
					for (var i = 0; i < this.elements.length; i++) {
						values.push(Math.abs(this.elements[i]));
					}
					return new Vector(values);
				};
				
				Vector.prototype.dot = function(v) {
					var result = 0;
					for (var i = 0; i < this.length(); i++) {
						result = result + this.elements[i] * v.elements[i];
					}
					return result;
				};
				
				Vector.prototype.sum = function() {
					var sum = 0;
					for (var i = 0, n = this.elements.length; i < n; ++i) {
						sum += this.elements[i];
					}
					return sum;
				};
				
				Vector.prototype.log = function() {
					var result = new Vector(this.elements.slice(0));
					for (var i = 0, n = this.elements.length; i < n; ++i) {
						result.elements[i] = Math.log(result.elements[i]);
					}
					return result;
				};
				
				Vector.prototype.add = function(term) {
					var result = new Vector(this.elements.slice(0));
					if (term instanceof Vector) {
						for (var i = 0, n = result.elements.length; i < n; ++i) {
							result.elements[i] += term.elements[i];
						}
					} else {
						for (var i = 0, n = result.elements.length; i < n; ++i) {
							result.elements[i] += term;
						}
					}
					return result;
				};
				
				Vector.prototype.subtract = function(term) {
					return this.add(term.multiply(-1));
				};
				
				Vector.prototype.multiply = function(factor) {
					var result = new Vector(this.elements.slice(0));
					if (factor instanceof Vector) {
						for (var i = 0, n = result.elements.length; i < n; ++i) {
							result.elements[i] = result.elements[i] * factor.elements[i];
						}
					} else {
						for (var i = 0, n = result.elements.length; i < n; ++i) {
							result.elements[i] = result.elements[i] * factor;
						}
					}
					return result;
				};
				
				Vector.prototype.pow = function(p) {
					var result = new Vector(this.elements.slice(0));
					if (p instanceof Vector) {
						for (var i = 0, n = result.elements.length; i < n; ++i) {
							result.elements[i] = Math.pow(result.elements[i], p.elements[i]);
						}
					} else {
						for (var i = 0, n = result.elements.length; i < n; ++i) {
							result.elements[i] = Math.pow(result.elements[i], p);
						}
					}
					return result;
				};
				
				Vector.prototype.mean = function() {
					var sum = 0;
					for (var i = 0, n = this.elements.length; i < n; ++i) {
						sum += this.elements[i];
					}
					return sum / this.elements.length;
				};
				
				Vector.prototype.median = function() {
					var sorted = this.sort();
					var middle = Math.floor(sorted.length() / 2);
					if (sorted.length() % 2) {
						return sorted.elements[middle];
					} else {
						return (sorted.elements[middle - 1] + sorted.elements[middle]) / 2;
					}
				};
				
				Vector.prototype.q1 = function() {
					var sorted = this.sort();
					var middle = Math.floor(sorted.length() / 2);
					var e = sorted.slice(0, middle);
					console.log(e);
					return e.median();
				};
				
				Vector.prototype.q3 = function() {
					var sorted = this.sort();
					var middle = Math.ceil(sorted.length() / 2);
					var e = sorted.slice(middle);
					return e.median();
				};
				
				Vector.prototype.slice = function(start, end) {
				    if (typeof end === "undefined") {
				        return new Vector(this.elements.slice(start));
				    } else {
				    	return new Vector(this.elements.slice(start, end));
				    }
				};
				
				Vector.prototype.geomean = function() {
					return Math.exp(this.log().sum() / this.elements.length);
				};
				
				Vector.prototype.sortElements = function() {
					var sorted = this.elements.slice(0);
					for (var i = 0, j, tmp; i < sorted.length; ++i) {
						tmp = sorted[i];
						for (j = i - 1; j >= 0 && sorted[j] > tmp; --j) {
							sorted[j + 1] = sorted[j];
						}
						sorted[j + 1] = tmp;
					}
					return sorted;
				};
				
				Vector.prototype._ecdf = function(x) {
					var sorted = this.sortElements();
					var count = 0;
					for (var i = 0; i < sorted.length && sorted[i] <= x; i++) {
						count++;	
					}
					return count / sorted.length;
				};
				
				Vector.prototype.ecdf = function(arg) {
					if (arg instanceof Vector) {
						var result = new Vector([]);
						for (var i = 0; i < arg.length(); i++) {
							result.push(this._ecdf(arg.elements[i]));
						}
						return result;
					} else {
						return this._ecdf(arg);
					}
				};
				
				Vector.prototype.sort = function() {
					return new Vector(this.sortElements());
				};
				
				Vector.prototype.min = function() {
					return this.sortElements()[0];
				};
				
				Vector.prototype.max = function() {
					return this.sortElements().pop();
				};
				
				Vector.prototype.toString = function() {
					return "[" + this.elements.join(", ") + "]";
				};
				
				/*
				 * unbiased sample variance
				 */
				
				Vector.prototype.variance = function() {
					return this.ss() / (this.elements.length - 1);
				};
				
				/*
				 * biased sample variance
				 */
				
				Vector.prototype.biasedVariance = function() {
					return this.ss() / this.elements.length;
				};
				
				/*
				 * corrected sample standard deviation
				 */
				
				Vector.prototype.sd = function() {
					return Math.sqrt(this.variance());
				};
				
				/*
				 * uncorrected sample standard deviation
				 */
				
				Vector.prototype.uncorrectedSd = function() {
					return Math.sqrt(this.biasedVariance());
				};
				
				/*
				 * standard error of the mean
				 */
				
				 Vector.prototype.sem = function() {
				 	return this.sd() / Math.sqrt(this.elements.length);
				 };
				
				/*
				 * total sum of squares
				 */
				
				Vector.prototype.ss = function() {
					var m = this.mean();
					var sum = 0;
					for (var i = 0, n = this.elements.length; i < n; ++i) {
						sum += Math.pow(this.elements[i] - m, 2);
					}
					return sum;
				};
				
				/*
				 * residuals
				 */
				
				Vector.prototype.res = function() {
					return this.add(-this.mean());
				};
				
				Vector.prototype.kurtosis = function() {
					return this.res().pow(4).mean() / Math.pow(this.res().pow(2).mean(), 2);
				};
				
				Vector.prototype.skewness = function() {
					return this.res().pow(3).mean() / Math.pow(this.res().pow(2).mean(), 3 / 2);
				};
				
				Sequence.prototype = new Vector();
				
				Sequence.prototype.constructor = Sequence;
				
				function Sequence(min, max, step) {
					this.elements = [];
					for (var i = min; i <= max; i = i + step) {
						this.elements.push(i);
					}
				};
				
				module.exports.Vector = Vector;
				module.exports.Sequence = Sequence;
			}
		}
	}
})("jerzy/jerzy");
